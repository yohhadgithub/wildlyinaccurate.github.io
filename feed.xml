<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wildly Inaccurate</title>
    <description>Guides &amp;amp; opinions about programming and the state of the web.
</description>
    <link>https://wildlyinaccurate.github.io/</link>
    <atom:link href="https://wildlyinaccurate.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 20 Dec 2014 20:38:30 +0000</pubDate>
    <lastBuildDate>Sat, 20 Dec 2014 20:38:30 +0000</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Transitioning to a new keyboard layout</title>
        <description>&lt;p&gt;I’ve long been considering switching to a different keyboard layout. I tend to type with mostly my forefinger and middle finger, only using my ring and pinky fingers occasionally to stretch out to the modifier keys. Despite this, I still manage to type at around 120WPM on a staggered QWERTY keyboard.&lt;/p&gt;

&lt;p&gt;Thinking back, I probably started teaching myself to type at a reasonable speed around age 10. I’m now in my mid-twenties. My typing technique (or lack thereof) never really bothered me, but 15 years of typing with poor technique has started to take its toll. Recently I’ve started experiencing hand fatigue, and I’m beginning to see early signs of RSI. So I figure now is the perfect time to make some changes to the way I type.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;My first idea was to start using an ergonomic keyboard. The three keyboards which seemed to be most popular at the time were the &lt;a href=&quot;http://www.microsoft.com/hardware/en-gb/p/natural-ergonomic-keyboard-4000&quot;&gt;Microsoft Natural Ergonomic&lt;/a&gt;, the &lt;a href=&quot;https://www.trulyergonomic.com/store/index.php&quot;&gt;Truly Ergonomic&lt;/a&gt;, and the soon-to-be-released &lt;a href=&quot;http://matias.ca/ergopro/pc/&quot;&gt;Matias Ergo Pro&lt;/a&gt;. After trying some keyboards out, I realised that if I was going to do this properly, I would need a split-hand keyboard. This is mostly due to having quite broad shoulders, which means that when my hands are close together (like on a keyboard), my shoulders need to be bunched up in order for my hands to take the correct position. This can be quite uncomfortable, and I often find myself stretching and cracking my shoulders throughout the day.&lt;/p&gt;

&lt;p&gt;The Ergo Pro is the only one of the keyboards I was evaluating which had a split-hand design. Unfortunately it didn’t take long for me to realise that despite the split-hand design, the Ergo Pro wasn’t suitable either. A lot of the pain I get in my hands is due to over-stretching the ring and pinky fingers. The Ergo Pro still follows a fairly standard keyboard layout, which places the modifier keys in a position where you must reach your pinkies out in order to hit them.&lt;/p&gt;

&lt;p&gt;For a while, I was defeated.&lt;/p&gt;

&lt;p&gt;Then, I stumbled across the &lt;a href=&quot;http://ergodox.org/&quot;&gt;ErgoDox&lt;/a&gt;. At a glance, this looked like the perfect keyboard for me. The split-hand design would relieve the tension from my shoulders, the thumb keys would reduce the need to stretch my pinkies to reach the modifier keys, and the non-staggered layout would help reduce the distance my fingers need to travel when changing rows. The fact that the keyboard is fully programmable with open-source firmware was what finally sold me.&lt;/p&gt;

&lt;p&gt;So I ordered myself an &lt;a href=&quot;https://www.massdrop.com/buy/ergodox&quot;&gt;ErgoDox kit from MassDrop&lt;/a&gt;, and set around to building my keyboard.&lt;/p&gt;

&lt;p&gt;I built the keyboard in short bursts when I had spare time on the weekends. All up I probably invested about 10 hours over a period of two months. I made good use of the electronics station at &lt;a href=&quot;https://london.hackspace.org.uk/&quot;&gt;London Hackspace&lt;/a&gt;, and learned a lot about soldering and about electronics in general. I’m fairly confident that I could build another ErgoDox in a matter of hours.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;The finished ErgoDox&quot; src=&quot;/assets/ergodox-1024x551.jpg&quot; srcset=&quot;/assets/resized/ergodox-1024x551-290x156.jpg 290w, /assets/resized/ergodox-1024x551-315x169.jpg 315w, /assets/resized/ergodox-1024x551-720x387.jpg 720w, /assets/resized/ergodox-1024x551-940x506.jpg 940w,  /assets/ergodox-1024x551.jpg 1024w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        The finished ErgoDox
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;While the open-source firmware has &lt;a href=&quot;https://github.com/wildlyinaccurate/ergodox-firmware/tree/master/src/keyboard/ergodox/layout&quot;&gt;several layouts available&lt;/a&gt;, MassDrop provides the binary firmware for a QWERTY layout to get you started. I didn’t particularly feel like learning a completely new keyboard layout so I stuck with QWERTY, figuring that the layout of the ErgoDox would solve the fatigue problems I was having. I was wrong.&lt;/p&gt;

&lt;p&gt;Using the ErgoDox, I still felt like my fingers were moving just as much as on a regular keyboard. I used Patrick Gillespie’s amazing &lt;a href=&quot;http://patorjk.com/keyboard-layout-analyzer&quot;&gt;Keyboard Layout Analyzer&lt;/a&gt; to help me figure out what the problem was.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;ErgoDox QWERTY Layout Heat Map&quot; src=&quot;/assets/ergodox-qwerty-heatmap.png&quot; srcset=&quot;/assets/resized/ergodox-qwerty-heatmap-290x111.png 290w, /assets/resized/ergodox-qwerty-heatmap-315x120.png 315w, /assets/resized/ergodox-qwerty-heatmap-720x274.png 720w,  /assets/ergodox-qwerty-heatmap.png 929w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        ErgoDox QWERTY Layout Heat Map
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;The heat map above shows how the QWERTY layout requires you to constantly move your fingers between rows. For me, this was a major cause of discomfort. I decided that I needed to find a more efficient keyboard layout.&lt;/p&gt;

&lt;p&gt;Learning a new keyboard layout isn’t something you can take lightly. There’s a huge time investment required not only to learn the new layout, but to become proficient with it. For me, “proficient” means being able to type at least 100WPM – hopefully even more. So finding the “right” layout was a fairly daunting task.&lt;/p&gt;

&lt;p&gt;After some experimenting and reading others’ thoughts, I finally settled on Colemak. There were a few reasons for this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The layout scores highly in the layout analyser when analysing code (which I spend more time typing than English).&lt;/li&gt;
  &lt;li&gt;The heat map shows reduced movement between rows.&lt;/li&gt;
  &lt;li&gt;Keys used for common keyboard shortcuts (Q, W, Z, X, C, V) remain unchanged.&lt;/li&gt;
  &lt;li&gt;It felt the most “natural” compared to other popular layouts like Workman, Dvorak, and Programmer Dvorak.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;The heat map for a Colemak layout on the ErgoDox&quot; src=&quot;/assets/ergodox-colemak-heatmap1.png&quot; srcset=&quot;/assets/resized/ergodox-colemak-heatmap1-290x111.png 290w, /assets/resized/ergodox-colemak-heatmap1-315x120.png 315w, /assets/resized/ergodox-colemak-heatmap1-720x274.png 720w,  /assets/ergodox-colemak-heatmap1.png 929w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        The heat map for a Colemak layout on the ErgoDox
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;An article about &lt;a href=&quot;http://jjt.io/2013/11/25/why-any-developer-should-check-out-the-ergodox-keyboard/&quot;&gt;Jason Trill’s experience with the ErgoDox&lt;/a&gt; convinced me at the last minute to use a modified version of Colemak which puts the symbols on a separate layer around the home row, so you don’t need to move your fingers to the top row to type symbols. In case you’re wondering what I mean by a “separate layer”: layers on a keyboard are a way to have one key type different characters. You actually use layers all the time, even if you don’t realise it. When you hold down the Shift key, you’re activating another layer on your keyboard. When you hit the Caps Lock key, you’re toggling that layer. Layers differ from key combinations (like Control + Alt + Delete) in that they’re implemented in the keyboard’s firmware rather than at the software level.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;The &amp;quot;symbolmod&amp;quot; Colemak layout reduces finger movement even further&quot; src=&quot;/assets/ergodox-colemak-symbolmod-heatmap.png&quot; srcset=&quot;/assets/resized/ergodox-colemak-symbolmod-heatmap-290x111.png 290w, /assets/resized/ergodox-colemak-symbolmod-heatmap-315x120.png 315w, /assets/resized/ergodox-colemak-symbolmod-heatmap-720x274.png 720w,  /assets/ergodox-colemak-symbolmod-heatmap.png 929w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        The &amp;quot;symbolmod&amp;quot; Colemak layout reduces finger movement even further
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;As you can probably tell from the heat map above, the “Alt Gr” key enables the symbol layer, allowing me to type common symbols without my fingers leaving the home row.&lt;/p&gt;

&lt;h2 id=&quot;what-now&quot;&gt;What now?&lt;/h2&gt;

&lt;p&gt;As of today, I’ve only clocked up about an hour of typing with the new layout. I can only manage about 5WPM at the moment so it can be frustrating to use it for any more than a few minutes at a time.&lt;/p&gt;

&lt;p&gt;Rather than just trying to use the new layout for my day-to-day tasks, I’ve come up with a plan to help me become productive with it first.&lt;/p&gt;

&lt;h3 id=&quot;stage-1---touch-typing&quot;&gt;Stage 1 - Touch Typing&lt;/h3&gt;

&lt;p&gt;Before I do anything else, I need to learn how to touch type with the new layout. At the moment I’m relying on a printed guide, which I constantly refer to in order to find the keys I want. To learn how to touch type, I’m going back to basics:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The quick brown fox jumps over the lazy fox.
The quick brown fox jumps over the lazy fox.
The quick brown fox jumps over the lazy fox.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In theory, the more I use each key, the less I’ll have to look at my guide.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;The layout guide I&#39;m using to type at the moment&quot; src=&quot;/assets/ergodox-layout-guide-1024x598.jpg&quot; srcset=&quot;/assets/resized/ergodox-layout-guide-1024x598-290x169.jpg 290w, /assets/resized/ergodox-layout-guide-1024x598-315x184.jpg 315w, /assets/resized/ergodox-layout-guide-1024x598-720x420.jpg 720w, /assets/resized/ergodox-layout-guide-1024x598-940x549.jpg 940w,  /assets/ergodox-layout-guide-1024x598.jpg 1024w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        The layout guide I&#39;m using to type at the moment
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;stage-2---speed&quot;&gt;Stage 2 - Speed&lt;/h3&gt;

&lt;p&gt;Once I’m familiar enough with the layout, I’ll need to get my speed up. There are plenty of tools available online which give you a list of randomly-chosen words to type, and report your speed at the end. I’ve found that &lt;a href=&quot;http://10fastfingers.com/typing-test/english&quot;&gt;10FastFingers&lt;/a&gt; is good enough for my needs. Hopefully doing this for a week or two will get me typing at least 60WPM again.&lt;/p&gt;

&lt;h3 id=&quot;stage-3---programming&quot;&gt;Stage 3 - Programming&lt;/h3&gt;

&lt;p&gt;I spend a lot of my waking life programming, so I’ll need to become proficient with this new layout in a programming context. Up until this point I will have been typing mostly English words and some symbols on the new layout, so I’ll need some practice programming before I’m ready to use this layout for my day-to-day work.&lt;/p&gt;

&lt;p&gt;At the same time I will be continuing to use the typing speed tools and hopefully get closer to 100WPM.&lt;/p&gt;

&lt;h3 id=&quot;stage-4---shortcuts&quot;&gt;Stage 4 - Shortcuts&lt;/h3&gt;

&lt;p&gt;Once I’ve reached my 100WPM goal and feel comfortable enough using the new layout in a programming context, I’ll start using the new layout at work. The final step to fully converting to the new layout will be to re-learn all of the keyboard shortcuts which are currently part of my muscle memory on a QWERTY layout.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Oct 2014 13:44:00 +0000</pubDate>
        <link>https://wildlyinaccurate.github.io/transitioning-to-a-new-keyboard-layout</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/transitioning-to-a-new-keyboard-layout</guid>
        
        <category>colemak</category>
        
        <category>ergodox</category>
        
        <category>keyboard</category>
        
        
        <category>keyboards</category>
        
      </item>
    
      <item>
        <title>JavaScript Performance: Variable Initialization</title>
        <description>&lt;p&gt;Initializing variables properly in JavaScript can have significant performance benefits. This can be shown with a simple synthetic benchmark.&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;notypejs&quot;&gt;notype.js&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var x = null;

for (var i = 0; i &amp;lt; 1e8; i++) {
    x = 1 + x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;withtypejs&quot;&gt;withtype.js&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var x = 0;

for (var i = 0; i &amp;lt; 1e8; i++) {
    x = 1 + x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;benchmark-results&quot;&gt;Benchmark Results&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ time node notype.js
node notype.js  **0.30s** user 0.01s system 100% cpu 0.301 total

$ time node withtype.js
node withtype.js  **0.10s** user 0.00s system 99% cpu 0.109 total
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This particular benchmark may be trivial, but it demonstrates an important point. In &lt;code&gt;notype.js&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is initialized as &lt;code&gt;null&lt;/code&gt;. This makes it impossible for V8 to optimize the arithmetic within the loop, since the type of &lt;code&gt;x&lt;/code&gt; must be inferred during the first arithmetic operation. By contrast, the compiler can optimize &lt;code&gt;withtype.js&lt;/code&gt; because &lt;code&gt;x&lt;/code&gt; is known to be a number.&lt;/p&gt;

&lt;p&gt;Running these scripts again with V8’s profiler enabled, we can gain some additional insight into what’s going on under the hood.&lt;/p&gt;

&lt;h3 id=&quot;notypejs-1&quot;&gt;notype.js&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; [JavaScript]:
   ticks  total  nonlib   name
    181   63.3%   71.8%  LazyCompile: * /home/joseph/dev/jsperf/var_init_value/notype.js:1
     68   23.8%   27.0%  Stub: BinaryOpStub_ADD_Alloc_SMI
      1    0.3%    0.4%  LazyCompile: ~PropertyDescriptor native v8natives.js:482
      1    0.3%    0.4%  KeyedLoadIC: A keyed load IC from the snapshot
      1    0.3%    0.4%  CallInitialize: args_count: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;withtypejs-1&quot;&gt;withtype.js&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; [JavaScript]:
   ticks  total  nonlib   name
     72   66.7%   98.6%  LazyCompile: * /home/joseph/dev/jsperf/var_init_value/withtype.js:1
      1    0.9%    1.4%  LazyCompile: RegExpConstructor native regexp.js:86
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The profiler doesn’t give us the full picture here, but we can see that &lt;code&gt;notype.js&lt;/code&gt; is spending a fair amount of time in &lt;code&gt;BinaryOpStub_ADD_Alloc_SMI&lt;/code&gt;, which V8 uses to create SMI (small integer) values.&lt;/p&gt;

&lt;p&gt;It’s possible to dig into this even further by having V8 output the Hydrogen code (the intermediate language which V8 uses to represent the JavaScript code’s abstract syntax tree), or &lt;em&gt;even&lt;/em&gt; further by having V8 output the final assembly code. However, both of these things are outside the scope of this post. (If you’re &lt;em&gt;really&lt;/em&gt; interested, I’ve posted the output &lt;a href=&quot;https://gist.github.com/wildlyinaccurate/423294822c2729743490&quot;&gt;on GitHub&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;If this sort of thing interests you, you might enjoy reading Thorsten Lorenz’s collection of &lt;a href=&quot;https://github.com/thlorenz/v8-perf&quot;&gt;V8 performance resources&lt;/a&gt; or Petka Antonov’s &lt;a href=&quot;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot;&gt;V8 optimization killers&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Aug 2014 00:10:46 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/javascript-performance-variable-initialization</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/javascript-performance-variable-initialization</guid>
        
        <category>javascript</category>
        
        <category>performance</category>
        
        <category>v8</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>A Hacker&#39;s Guide to Git</title>
        <description>&lt;p&gt;&lt;em&gt;A Hacker’s Guide to Git&lt;/em&gt; is now available as an e-book. You can purchase it &lt;a href=&quot;https://leanpub.com/a-hackers-guide-to-git&quot;&gt;on LeanPub&lt;/a&gt;.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#repositories&quot;&gt;Repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tree-objects&quot;&gt;Tree Objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#commits&quot;&gt;Commits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#branches&quot;&gt;Branches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tags&quot;&gt;Tags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#merging&quot;&gt;Merging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rebasing&quot;&gt;Rebasing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cherry-picking&quot;&gt;Cherry-Picking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rebasing-continued&quot;&gt;Rebasing (Continued)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#remotes&quot;&gt;Remotes&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cloning&quot;&gt;Cloning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pushing&quot;&gt;Pushing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#remote-tracking-branches&quot;&gt;Remote-Tracking Branches&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fetching&quot;&gt;Fetching&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pulling&quot;&gt;Pulling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#toolkit&quot;&gt;Toolkit&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#git-reflog&quot;&gt;git-reflog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-fsck&quot;&gt;git-fsck&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-stash&quot;&gt;git-stash&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-describe&quot;&gt;git-describe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-rev-parse&quot;&gt;git-rev-parse&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-bisect&quot;&gt;git-bisect&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Git is currently the most widely used version control system in the world, mostly thanks to GitHub. By that measure, I’d argue that it’s also the most misunderstood version control system in the world.&lt;/p&gt;

&lt;p&gt;This statement probably doesn’t ring true straight away because on the surface, Git is pretty simple. It’s really easy to pick up if you’ve come from another VCS like Subversion or Mercurial. It’s even relatively easy to pick up if you’ve never used a VCS before. Everybody understands adding, committing, pushing and pulling; but this is about as far as Git’s simplicity goes. Past this point, Git is shrouded by fear, uncertainty and doubt.&lt;/p&gt;

&lt;p&gt;Once you start talking about branching, merging, rebasing, multiple remotes, remote-tracking branches, detached HEAD states… Git becomes less of an easily-understood tool and more of a feared deity. Anybody who talks about no-fast-forward merges is regarded with quiet superstition, and even veteran hackers would rather stay away from rebasing “just to be safe”.&lt;/p&gt;

&lt;p&gt;I think a big part of this is due to many people coming to Git from a conceptually simpler VCS – probably Subversion – and trying to apply their past knowledge to Git. It’s easy to understand why people want to do this. Subversion is simple, right? It’s just files and folders. Commits are numbered sequentially. Even branching and tagging is simple – it’s just like taking a backup of a folder.&lt;/p&gt;

&lt;p&gt;Basically, Subversion fits in nicely with our existing computing paradigms. Everybody understands files and folders. Everybody knows that revision #10 was the one after #9 and before #11. But these paradigms break down when you try to apply them to Git.&lt;/p&gt;

&lt;p&gt;That’s why trying to understand Git in this way is wrong. Git doesn’t work like Subversion at all. Which can be pretty confusing. You can add and remove files. You can commit your changes. You can generate diffs and patches which look just like the ones that Subversion generates. So how can something which appears so similar really be so different?&lt;/p&gt;

&lt;p&gt;Complex systems like Git become much easier to understand once you figure out how they really work. The goal of this guide is to shed some light on how Git works under the hood. We’re going to take a look at some of Git’s core concepts including its basic object storage, how commits work, how branches and tags work, and we’ll look at the different kinds of merging in Git including the much-feared rebase. Hopefully at the end of it all, you’ll have a solid understanding of these concepts and will be able to use some of Git’s more advanced features with confidence.&lt;/p&gt;

&lt;p&gt;It’s worth noting at this point that this guide is not intended to be a beginner’s introduction to Git. This guide was written for people who already use Git, but would like to better understand it by taking a peek under the hood, and learn a few neat tricks along the way. With that said, let’s begin.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;At the core of Git, like other VCS, is the repository. A Git repository is really just a simple key-value data store. This is where Git stores, among other things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Blobs&lt;/strong&gt;, which are the most basic data type in Git. Essentially, a blob is just a bunch of bytes; usually a binary representation of a file.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tree objects&lt;/strong&gt;, which are a bit like directories. Tree objects can contain pointers to blobs and other tree objects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Commit objects&lt;/strong&gt;, which point to a single tree object, and contain some metadata including the commit author and any parent commits.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tag objects&lt;/strong&gt;, which point to a single commit object, and contain some metadata.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;, which are pointers to a single object (usually a commit or tag object).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don’t need to worry about all of this just yet; we’ll cover these things in more detail later.&lt;/p&gt;

&lt;p&gt;The important thing to remember about a Git repository is that it exists entirely in a single &lt;code&gt;.git&lt;/code&gt; directory in your project root. There is no central repository like in Subversion or CVS. This is what allows Git to be a &lt;em&gt;distributed&lt;/em&gt; version control system – everybody has their own self-contained version of a repository.&lt;/p&gt;

&lt;p&gt;You can initialize a Git repository anywhere with the &lt;code&gt;git init&lt;/code&gt; command. Take a look inside the &lt;code&gt;.git&lt;/code&gt; folder to get a glimpse of what a repository looks like.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
Initialized empty Git repository in /home/demo/demo-repository/.git/
$ ls -l .git
total 32
drwxrwxr-x 2 demo demo 4096 May 24 20:10 branches
-rw-rw-r-- 1 demo demo 92 May 24 20:10 config
-rw-rw-r-- 1 demo demo 73 May 24 20:10 description
-rw-rw-r-- 1 demo demo 23 May 24 20:10 HEAD
drwxrwxr-x 2 demo demo 4096 May 24 20:10 hooks
drwxrwxr-x 2 demo demo 4096 May 24 20:10 info
drwxrwxr-x 4 demo demo 4096 May 24 20:10 objects
drwxrwxr-x 4 demo demo 4096 May 24 20:10 refs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important directories are &lt;code&gt;.git/objects&lt;/code&gt;, where Git stores all of its objects; and &lt;code&gt;.git/refs&lt;/code&gt;, where Git stores all of its references.&lt;/p&gt;

&lt;p&gt;We’ll see how all of this fits together as we learn about the rest of Git. For now, let’s learn a little bit more about tree objects.&lt;/p&gt;

&lt;h2 id=&quot;tree-objects&quot;&gt;Tree Objects&lt;/h2&gt;

&lt;p&gt;A tree object in Git can be thought of as a directory. It contains a list of blobs (files) and other tree objects (sub-directories).&lt;/p&gt;

&lt;p&gt;Imagine we had a simple repository, with a &lt;code&gt;README&lt;/code&gt; file and a &lt;code&gt;src/&lt;/code&gt; directory containing a &lt;code&gt;hello.c&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;README
src/
    hello.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would be represented by two tree objects: one for the root directory, and another for the &lt;code&gt;src/&lt;/code&gt; directory. Here’s what they would look like.&lt;/p&gt;

&lt;h4 id=&quot;tree-4da454&quot;&gt;tree 4da454..&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;blob&lt;/td&gt;
      &lt;td&gt;976165..&lt;/td&gt;
      &lt;td&gt;README&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tree&lt;/td&gt;
      &lt;td&gt;81fc8b..&lt;/td&gt;
      &lt;td&gt;src&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;tree81fc8b&quot;&gt;tree 81fc8b..&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;blob&lt;/td&gt;
      &lt;td&gt;1febef..&lt;/td&gt;
      &lt;td&gt;hello.c&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we draw the blobs (in green) as well as the tree objects (in blue), we end up with a diagram that looks a lot like our directory structure.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Git tree graph&quot; src=&quot;/assets/tree-graph.png&quot; srcset=&quot;/assets/resized/tree-graph-290x225.png 290w, /assets/resized/tree-graph-315x244.png 315w,  /assets/tree-graph.png 591w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Git tree graph
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Notice how given the root tree object, we can recurse through every tree object to figure out the state of the entire working tree. The root tree object, therefore, is essentially a snapshot of your repository at a given time. Usually when Git refers to “the tree”, it is referring to the root tree object.&lt;/p&gt;

&lt;p&gt;Now let’s learn how you can track the history of your repository with commit objects.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;

&lt;p&gt;A commit object is essentially a pointer that contains a few pieces of important metadata. The commit itself has a hash, which is built from a combination of the metadata that it contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The hash of the tree (the root tree object) at the time of the commit. As we learned in &lt;em&gt;Tree Objects&lt;/em&gt;, this means that with a single commit, Git can build the entire working tree by recursing into the tree.&lt;/li&gt;
  &lt;li&gt;The hash of any parent commits. This is what gives a repository its history: every commit has a parent commit, all the way back to the very first commit.&lt;/li&gt;
  &lt;li&gt;The author’s name and email address, and the time that the changes were authored.&lt;/li&gt;
  &lt;li&gt;The committer’s name and email address, and the time that the commit was made.&lt;/li&gt;
  &lt;li&gt;The commit message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see a commit object in action by creating a simple repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ git init
Initialized empty Git repository in /home/demo/simple-repository/.git/
 $ echo &#39;This is the readme.&#39; &amp;gt; README
 $ git add README
 $ git commit -m &quot;First commit&quot;
[master (root-commit) **d409ca7**] First commit
 1 file changed, 1 insertion(+)
 create mode 100644 README
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you create a commit, Git will give you the hash of that commit. Using &lt;code&gt;git show&lt;/code&gt; with the &lt;code&gt;--format=raw&lt;/code&gt; flag, we can see this newly-created commit’s metadata.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show --format=raw d409ca7

commit d409ca76bc919d9ca797f39ae724b7c65700fd27
tree 9d073fcdfaf07a39631ef94bcb3b8268bc2106b1
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400

    First commit

diff --git a/README b/README
new file mode 100644
index 0000000..9761654
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+This is the readme.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how although we referenced the commit by the partial hash &lt;code&gt;d409ca7&lt;/code&gt;, Git was able to figure out that we actually meant &lt;code&gt;d409ca76bc919d9ca797f39ae724b7c65700fd27&lt;/code&gt;. This is because the hashes that Git assigns to objects are unique enough to be identified by the first few characters. You can see here that Git is able to find this commit with as few as four characters; after which point Git will tell you that the reference is ambiguous.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show d409c
$ git show d409
$ git show d40
fatal: ambiguous argument &#39;d40&#39;: unknown revision or path not in the working tree.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;In previous sections, we saw how objects in Git are identified by a hash. Since we want to manipulate objects quite often in Git, it’s important to know their hashes. You could run all your Git commands referencing each object’s hash, like &lt;code&gt;git show d409ca7&lt;/code&gt;, but that would require you to remember the hash of every object you want to manipulate.&lt;/p&gt;

&lt;p&gt;To save you from having to memorize these hashes, Git has references, or “refs”. A reference is simply a file stored somewhere in &lt;code&gt;.git/refs&lt;/code&gt;, containing the hash of a commit object.&lt;/p&gt;

&lt;p&gt;To carry on the example from &lt;em&gt;Commits&lt;/em&gt;, let’s figure out the hash of “First commit” using references only.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
On branch master
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; has told us that we are on branch &lt;code&gt;master&lt;/code&gt;. As we will learn in a later section, branches are just references. We can see this by looking in &lt;code&gt;.git/refs/heads&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l .git/refs/heads/
total 4
-rw-rw-r-- 1 demo demo 41 May 24 20:02 master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can easily see which commit &lt;code&gt;master&lt;/code&gt; points to by reading the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/refs/heads/master
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sure enough, &lt;code&gt;master&lt;/code&gt; contains the hash of the “First commit” object.&lt;/p&gt;

&lt;p&gt;Of course, it’s possible to simplify this process. Git can tell us which commit a reference is pointing to with the &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;rev-parse&lt;/code&gt; commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show --oneline master
d409ca7 First commit
$ git rev-parse master
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git also has a special reference, &lt;code&gt;HEAD&lt;/code&gt;. This is a “symbolic” reference which points to the tip of the current branch rather than an actual commit. If we inspect &lt;code&gt;HEAD&lt;/code&gt;, we see that it simply points to &lt;code&gt;refs/head/master&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/HEAD
ref: refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is actually possible for &lt;code&gt;HEAD&lt;/code&gt; to point directly to a commit object. When this happens, Git will tell you that you are in a “detached HEAD state”. We’ll talk a bit more about this later, but really all this means is that you’re not currently on a branch.&lt;/p&gt;

&lt;h2 id=&quot;branches&quot;&gt;Branches&lt;/h2&gt;

&lt;p&gt;Git’s branches are often touted as being one of its strongest features. This is because branches in Git are very lightweight, compared to other VCS where a branch is usually a clone of the entire repository.&lt;/p&gt;

&lt;p&gt;The reason branches are so lightweight in Git is because they’re just references. We saw in &lt;em&gt;References&lt;/em&gt; that the &lt;code&gt;master&lt;/code&gt; branch was simply a file inside &lt;code&gt;.git/refs/heads&lt;/code&gt;. Let’s create another branch to see what happens under the hood.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch test-branch
$ cat .git/refs/heads/test-branch
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s as simple as that. Git has created a new entry in &lt;code&gt;.git/refs/heads&lt;/code&gt; and pointed it at the current commit.&lt;/p&gt;

&lt;p&gt;We also saw in &lt;em&gt;References&lt;/em&gt; that &lt;code&gt;HEAD&lt;/code&gt; is Git’s reference to the current branch. Let’s see that in action by switching to our newly-created branch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/HEAD
ref: refs/heads/master
$ git checkout test-branch
Switched to branch &#39;test-branch&#39;
$ cat .git/HEAD
ref: refs/heads/test-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you create a new commit, Git simply changes the current branch to point to the newly-created commit object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;Some more information here.&#39; &amp;gt;&amp;gt; README
$ git add README
$ git commit -m &quot;Update README in a new branch&quot;
[test-branch 7604067] Update README in a new branch
 1 file changed, 1 insertion(+)
$ cat .git/refs/heads/test-branch
76040677d717fd090e327681064ac6af9f0083fb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later on we’ll look at the difference between &lt;strong&gt;local branches&lt;/strong&gt; and &lt;strong&gt;remote-tracking branches&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tags&quot;&gt;Tags&lt;/h2&gt;

&lt;p&gt;There are two types of tags in Git – &lt;strong&gt;lightweight tags&lt;/strong&gt; and &lt;strong&gt;annotated tags&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the surface, these two types of tags look very similar. Both of them are references stored in &lt;code&gt;.git/refs/tags&lt;/code&gt;. However, that’s about as far as the similarities go. Let’s create a lightweight tag to see how they work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git tag 1.0-lightweight
$ cat .git/refs/tags/1.0-lightweight
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that Git has created a tag reference which points to the current commit. By default, &lt;code&gt;git tag&lt;/code&gt; will create a lightweight tag. Note that this is &lt;strong&gt;not a tag object&lt;/strong&gt;. We can verify this by using &lt;code&gt;git cat-file&lt;/code&gt; to inspect the tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git cat-file -p 1.0-lightweight
tree 9d073fcdfaf07a39631ef94bcb3b8268bc2106b1
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400

First commit
$ git cat-file -p d409ca7
tree 9d073fcdfaf07a39631ef94bcb3b8268bc2106b1
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400

First commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that as far as Git is concerned, the &lt;code&gt;1.0-lightweight&lt;/code&gt; tag and the &lt;code&gt;d409ca7&lt;/code&gt; commit are the &lt;em&gt;same object&lt;/em&gt;. That’s because the lightweight tag is &lt;em&gt;only a reference&lt;/em&gt; to the commit object.&lt;/p&gt;

&lt;p&gt;Let’s compare this to an annotated tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git tag -a -m &quot;Tagged 1.0&quot; 1.0
$ cat .git/refs/tags/1.0
10589beae63c6e111e99a0cd631c28479e2d11bf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve passed the &lt;code&gt;-a&lt;/code&gt; (&lt;code&gt;--annotate&lt;/code&gt;) flag to &lt;code&gt;git tag&lt;/code&gt; to create an annotated tag. Notice how Git creates a reference for the tag just like the lightweight tag, but this reference is not pointing to the same object as the lightweight tag. Let’s use &lt;code&gt;git cat-file&lt;/code&gt; again to inspect the object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git cat-file -p 1.0
object d409ca76bc919d9ca797f39ae724b7c65700fd27
type commit
tag 1.0
tagger Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1401029229 -0400

Tagged 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a &lt;strong&gt;tag object&lt;/strong&gt;, separate to the commit that it points to. As well as containing a pointer to a commit, tag objects also store a tag message and information about the tagger. Tag objects can also be signed with a &lt;a href=&quot;http://en.wikipedia.org/wiki/GNU_Privacy_Guard&quot; title=&quot;GNU Privacy Guard&quot;&gt;GPG key&lt;/a&gt; to prevent commit or email spoofing.&lt;/p&gt;

&lt;p&gt;Aside from being GPG-signable, there are a few reasons why annotated tags are preferred over lightweight tags.&lt;/p&gt;

&lt;p&gt;Probably the most important reason is that annotated tags have their own author information. This can be helpful when you want to know who created the tag, rather than who created the commit that the tag is referring to.&lt;/p&gt;

&lt;p&gt;Annotated tags are also timestamped. Since new versions are usually tagged right before they are released, an annotated tag can tell you when a version was released rather than just when the final commit was made.&lt;/p&gt;

&lt;h2 id=&quot;merging&quot;&gt;Merging&lt;/h2&gt;

&lt;p&gt;Merging in Git is the process of joining two histories (usually branches) together. Let’s start with a simple example. Say you’ve created a new feature branch from &lt;code&gt;master&lt;/code&gt;, and done some work on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b feature-branch
Switched to a new branch &#39;feature-branch&#39;
$ vim feature.html
$ git commit -am &quot;Finished the new feature&quot;
[feature-branch 0c21359] Finished the new feature
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the same time, you need to fix an urgent bug. So you create a &lt;code&gt;hotfix&lt;/code&gt; branch from &lt;code&gt;master&lt;/code&gt;, and do some work in there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
Switched to branch &#39;master&#39;
$ git checkout -b hotfix
Switched to a new branch &#39;hotfix&#39;
$ vim index.html
$ git commit -am &quot;Fixed some wording&quot;
[hotfix 40837f1] Fixed some wording
 1 file changed, 1 insertion(+), 1 deletion(-)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the history will look something like this.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Branching -- hotfix and feature branch&quot; src=&quot;/assets/branch-feature-hotfix.png&quot; srcset=&quot;/assets/resized/branch-feature-hotfix-290x124.png 290w, /assets/resized/branch-feature-hotfix-315x134.png 315w,  /assets/branch-feature-hotfix.png 631w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Branching -- hotfix and feature branch
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Now you want to bring the bug fix into &lt;code&gt;master&lt;/code&gt; so that you can tag it and release it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
Switched to branch &#39;master&#39;
$ git merge hotfix
Updating d939a3a..40837f1
Fast-forward
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how Git mentions &lt;strong&gt;fast-forward&lt;/strong&gt; during the merge. What this means is that all of the commits in &lt;code&gt;hotfix&lt;/code&gt; were directly upstream from &lt;code&gt;master&lt;/code&gt;. This allows Git to simply move the &lt;code&gt;master&lt;/code&gt; pointer up the tree to &lt;code&gt;hotfix&lt;/code&gt;. What you end up with looks like this.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Branching -- after merging hotfix&quot; src=&quot;/assets/branch-merge-hotfix.png&quot; srcset=&quot;/assets/resized/branch-merge-hotfix-290x124.png 290w, /assets/resized/branch-merge-hotfix-315x134.png 315w,  /assets/branch-merge-hotfix.png 631w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Branching -- after merging hotfix
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Now let’s try and merge &lt;code&gt;feature-branch&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge feature-branch
Merge made by the &#39;recursive&#39; strategy.
 feature.html | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, Git wasn’t able to perform a fast-forward. This is because &lt;code&gt;feature-branch&lt;/code&gt; isn’t directly upstream from &lt;code&gt;master&lt;/code&gt;. This is clear on the graph above, where &lt;code&gt;master&lt;/code&gt; is at commit &lt;strong&gt;D&lt;/strong&gt; which is in a different history tree to &lt;code&gt;feature-branch&lt;/code&gt; at commit &lt;strong&gt;C&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So how did Git handle this merge? Taking a look at the log, we see that Git has actually created a new ”merge” commit, as well as bringing the commit from &lt;code&gt;feature-branch&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --oneline
8ad0923 Merge branch &#39;feature-branch&#39;
0c21359 Finished the new feature
40837f1 Fixed some wording
d939a3a Initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upon closer inspection, we can see that this is a special kind of commit object – it has &lt;strong&gt;two parent commits&lt;/strong&gt;. This is referred to as a &lt;strong&gt;merge commit&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show --format=raw 8ad0923

commit 8ad09238b0dff99e8a99c84d68161ebeebbfc714
tree e5ee97c8f9a4173f07aa4c46cb7f26b7a9ff7a17
parent 40837f14b8122ac6b37c0919743b1fd429b3bbab
parent 0c21359730915c7888c6144aa8e9063345330f1f
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1401134489 +0100
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1401134489 +0100

 Merge branch &#39;feature-branch&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that our history graph now looks something like this (commit &lt;strong&gt;E&lt;/strong&gt; is the new merge commit).&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Branching -- after merging feature-branch&quot; src=&quot;/assets/branch-merge-feature.png&quot; srcset=&quot;/assets/resized/branch-merge-feature-290x149.png 290w, /assets/resized/branch-merge-feature-315x161.png 315w,  /assets/branch-merge-feature.png 656w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Branching -- after merging feature-branch
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Some people believe that this sort of history graph is undesirable. In the &lt;em&gt;Rebasing (Continued)&lt;/em&gt; section, we’ll learn how to prevent non-fast-forward merges by rebasing feature branches before merging them with &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rebasing&quot;&gt;Rebasing&lt;/h2&gt;

&lt;p&gt;Rebasing is without a doubt one of Git’s most misunderstood features. For most people, &lt;code&gt;git rebase&lt;/code&gt; is a command that should be avoided at all costs. This is probably due to the extraordinary amount of scaremongering around rebasing. &lt;em&gt;“Rebase Considered Harmful”&lt;/em&gt;, and _“Please, stay away from rebase” _are just two of the many anti-rebase articles you will find in the vast archives of the Internet.&lt;/p&gt;

&lt;p&gt;But rebase isn’t scary, or dangerous, so long as you understand what it does. But before we get into rebasing, I’m going to take a quick digression, because it’s actually much easier to explain rebasing in the context of cherry-picking.&lt;/p&gt;

&lt;h2 id=&quot;cherry-picking&quot;&gt;Cherry-Picking&lt;/h2&gt;

&lt;p&gt;What &lt;code&gt;git cherry-pick&lt;/code&gt; does is take one or more commits, and replay them on top of the current commit. Imagine a repository with the following history graph.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Node graph -- before cherry-pick&quot; src=&quot;/assets/cherry-pick-before.png&quot; srcset=&quot;/assets/resized/cherry-pick-before-290x114.png 290w, /assets/resized/cherry-pick-before-315x123.png 315w,  /assets/cherry-pick-before.png 467w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Node graph -- before cherry-pick
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;If you are on commit &lt;strong&gt;D&lt;/strong&gt; and you run &lt;code&gt;git cherry-pick F&lt;/code&gt;, Git will take the changes that were introduced in commit &lt;strong&gt;F&lt;/strong&gt; and replay them &lt;em&gt;as a new commit&lt;/em&gt; (shown as &lt;strong&gt;F’&lt;/strong&gt;) on top of commit &lt;strong&gt;D.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Node graph -- after cherry-pick&quot; src=&quot;/assets/cherry-pick-after.png&quot; srcset=&quot;/assets/resized/cherry-pick-after-290x89.png 290w, /assets/resized/cherry-pick-after-315x96.png 315w,  /assets/cherry-pick-after.png 555w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Node graph -- after cherry-pick
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;The reason you end up with a &lt;em&gt;copy&lt;/em&gt; of commit &lt;strong&gt;F&lt;/strong&gt; rather than commit &lt;strong&gt;F&lt;/strong&gt; itself is due to the way commits are constructed. Recall that the parent commit is part of a commit’s hash. So despite containing the exact same changes, author information and timestamp; &lt;strong&gt;F’&lt;/strong&gt; will have a different parent to &lt;strong&gt;F&lt;/strong&gt;, giving it a different hash.&lt;/p&gt;

&lt;p&gt;A common workflow in Git is to develop features on small branches, and merge the features one at a time into the master branch. Let’s recreate this scenario by adding some branch labels to the graphs.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Node graph -- with branch labels&quot; src=&quot;/assets/graph-branch-labels.png&quot; srcset=&quot;/assets/resized/graph-branch-labels-290x81.png 290w, /assets/resized/graph-branch-labels-315x88.png 315w,  /assets/graph-branch-labels.png 623w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Node graph -- with branch labels
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;As you can see, &lt;code&gt;master&lt;/code&gt; has been updated since &lt;code&gt;foo&lt;/code&gt; was created. To avoid potential conflicts when &lt;code&gt;foo&lt;/code&gt; is merged with &lt;code&gt;master&lt;/code&gt;, we want to bring &lt;code&gt;master&lt;/code&gt;’s changes into &lt;code&gt;foo&lt;/code&gt;. Because &lt;code&gt;master&lt;/code&gt; is the &lt;em&gt;base&lt;/em&gt; branch, we want to play &lt;code&gt;foo&lt;/code&gt;’s commits &lt;em&gt;on top&lt;/em&gt; of &lt;code&gt;master&lt;/code&gt;. Essentially, we want to change commit &lt;strong&gt;C&lt;/strong&gt;’s parent from &lt;strong&gt;B&lt;/strong&gt; to &lt;strong&gt;F&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s not going to be easy, but we can achieve this with &lt;code&gt;git cherry-pick&lt;/code&gt;. First, we need to create a temporary branch at commit &lt;em&gt;F&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
$ git checkout -b foo-tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Node graph -- after creating foo-tmp&quot; src=&quot;/assets/foo-tmp.png&quot; srcset=&quot;/assets/resized/foo-tmp-290x81.png 290w, /assets/resized/foo-tmp-315x88.png 315w,  /assets/foo-tmp.png 623w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Node graph -- after creating foo-tmp
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Now that we have a base on commit &lt;em&gt;F&lt;/em&gt;, we can &lt;code&gt;cherry-pick&lt;/code&gt; all of &lt;code&gt;foo&lt;/code&gt;’s commits on top of it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git cherry-pick C D
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Node graph -- after cherry-picking C and D&quot; src=&quot;/assets/cherry-pick-c-d.png&quot; srcset=&quot;/assets/resized/cherry-pick-c-d-290x92.png 290w, /assets/resized/cherry-pick-c-d-315x100.png 315w, /assets/resized/cherry-pick-c-d-720x229.png 720w,  /assets/cherry-pick-c-d.png 744w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Node graph -- after cherry-picking C and D
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Now all that’s left to do is point &lt;code&gt;foo&lt;/code&gt; at commit &lt;strong&gt;D’&lt;/strong&gt;, and delete the temporary branch &lt;code&gt;foo-tmp&lt;/code&gt;. We do this with the &lt;code&gt;reset&lt;/code&gt; command, which points &lt;code&gt;HEAD&lt;/code&gt; (and therefore the current branch) at a specified commit. The &lt;code&gt;--hard&lt;/code&gt; flag ensures our working tree is updated as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout foo
$ git reset --hard foo-tmp
$ git branch -D foo-tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives the desired result of &lt;code&gt;foo&lt;/code&gt;’s commits being upstream of &lt;code&gt;master&lt;/code&gt;. Note that the original &lt;strong&gt;C&lt;/strong&gt; and &lt;strong&gt;D&lt;/strong&gt; commits are no longer reachable because no branch points to them.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Node graph -- after resetting foo&quot; src=&quot;/assets/cherry-pick-final.png&quot; srcset=&quot;/assets/resized/cherry-pick-final-290x58.png 290w, /assets/resized/cherry-pick-final-315x62.png 315w, /assets/resized/cherry-pick-final-720x143.png 720w,  /assets/cherry-pick-final.png 751w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Node graph -- after resetting foo
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h2 id=&quot;rebasing-continued&quot;&gt;Rebasing (Continued)&lt;/h2&gt;

&lt;p&gt;While the example in &lt;em&gt;Cherry-Picking&lt;/em&gt; worked, it’s not practical. In Git, rebasing allows us to replace our verbose cherry-pick workflow…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
$ git checkout -b foo-tmp
$ git cherry-pick C D
$ git checkout foo
$ git reset --hard foo-tmp
$ git branch -D foo-tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…With a single command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase master foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the format &lt;code&gt;git rebase &amp;lt;base&amp;gt; &amp;lt;target&amp;gt;&lt;/code&gt;, the &lt;code&gt;rebase&lt;/code&gt; command will take all of the commits from &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; and play them on top of &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; one by one. It does this without actually modifying &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;, so the end result is a linear history in which &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; can be fast-forwarded to &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a sense, performing a rebase is like telling Git, &lt;strong&gt;“Hey, I want to pretend that &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; was actually branched from &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;. Take all of the commits from &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;, and pretend that they happened &lt;em&gt;after&lt;/em&gt; &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;“&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look again at the example graph from &lt;em&gt;Merging&lt;/em&gt; to see how rebasing can prevent us from having to do a non-fast-forward merge.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Branching -- after merging hotfix&quot; src=&quot;/assets/branch-merge-hotfix.png&quot; srcset=&quot;/assets/resized/branch-merge-hotfix-290x124.png 290w, /assets/resized/branch-merge-hotfix-315x134.png 315w,  /assets/branch-merge-hotfix.png 631w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Branching -- after merging hotfix
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;All we have to do to enable a fast-forward merge of &lt;code&gt;feature-branch&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt; is run &lt;code&gt;git rebase master feature-branch&lt;/code&gt; before performing the merge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase master feature-branch
First, rewinding head to replay your work on top of it...
Applying: Finished the new feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has brought &lt;code&gt;feature-branch&lt;/code&gt; directly upstream of &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Rebasing -- rebase feature-branch with master&quot; src=&quot;/assets/rebase-feature.png&quot; srcset=&quot;/assets/resized/rebase-feature-290x81.png 290w, /assets/resized/rebase-feature-315x88.png 315w,  /assets/rebase-feature.png 680w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Rebasing -- rebase feature-branch with master
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Git is now able to perform a fast-forward merge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
$ git merge feature-branch
Updating 40837f1..2a534dd
Fast-forward
 feature.html | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;remotes&quot;&gt;Remotes&lt;/h2&gt;

&lt;p&gt;In order to collaborate on any Git project, you need to utilise at least one remote repository. Unlike centralised VCS which require a dedicated server daemon, a Git remote is simply another Git repository. In order to demonstrate this, we first need to understand the concept of a &lt;em&gt;bare&lt;/em&gt; repository.&lt;/p&gt;

&lt;p&gt;Recall that Git stores the entire repository inside the &lt;code&gt;.git&lt;/code&gt; directory. Inside this directory are blobs and tree objects which can be traversed to build a snapshot of the entire project. This means that Git doesn’t actually &lt;em&gt;need&lt;/em&gt; a working tree – it only uses the working tree to figure out what changes have been made since the last commit. This is easily demonstrated if you delete a file from a repository, and then run &lt;code&gt;git checkout &amp;lt;file&amp;gt;&lt;/code&gt;. Despite being removed from the file system, Git can still restore the file because it has previously stored it in the repository. You can do the same thing with entire directories and Git will still be able to restore everything by traversing its tree objects.&lt;/p&gt;

&lt;p&gt;It is therefore possible to have a repository which can store your project’s history without actually having a working tree. This is called a &lt;em&gt;bare&lt;/em&gt; repository. Bare repositories are most commonly used as a “central” repository where collaborators can share changes. The mechanism for sharing these changes will be explained in detail in the &lt;em&gt;Pushing&lt;/em&gt; and &lt;em&gt;Pulling&lt;/em&gt; sections. For now, let’s look at creating a bare repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init --bare
Initialised empty Git repository in /home/demo/bare-repo/
$ ls -l
total 12
drwxrwxr-x 1 demo demo   0 May 31 12:58 branches
-rw-rw-r-- 1 demo demo  66 May 31 12:58 config
-rw-rw-r-- 1 demo demo  73 May 31 12:58 description
-rw-rw-r-- 1 demo demo  23 May 31 12:58 HEAD
drwxrwxr-x 1 demo demo 328 May 31 12:58 hooks
drwxrwxr-x 1 demo demo  14 May 31 12:58 info
drwxrwxr-x 1 demo demo  16 May 31 12:58 objects
drwxrwxr-x 1 demo demo  18 May 31 12:58 refs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how rather than creating a &lt;code&gt;.git&lt;/code&gt; directory for the repository, &lt;code&gt;git init --bare&lt;/code&gt; simply treats the current directory as the &lt;code&gt;.git&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;There’s really not much to this repository. The only interesting things it contains are a &lt;code&gt;HEAD&lt;/code&gt; reference which points to the &lt;code&gt;master&lt;/code&gt; branch (which doesn’t exist yet), and a &lt;code&gt;config&lt;/code&gt; file which has the &lt;code&gt;bare&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;. The other files aren’t of much interest to us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find . -type f
./info/exclude
./hooks/commit-msg.sample
./hooks/pre-commit.sample
./hooks/pre-push.sample
./hooks/pre-rebase.sample
./hooks/pre-applypatch.sample
./hooks/applypatch-msg.sample
./hooks/post-update.sample
./hooks/prepare-commit-msg.sample
./hooks/update.sample
./description
./HEAD
./config

$ cat HEAD
ref: refs/heads/master
$ cat config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = true

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what can we do with this repository? Well, nothing much right now. Git won’t let us modify the repository because it doesn’t have a working tree to modify. (Note: this isn’t strictly true. We could painstakingly use Git’s low-level commands to manually create and store objects in Git’s data store, but that is beyond the scope of this guide. If you’re &lt;em&gt;really&lt;/em&gt; interested, read &lt;a href=&quot;http://git-scm.com/book/en/Git-Internals-Git-Objects&quot;&gt;&lt;em&gt;Git Internals - Git Objects&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch README
$ git add README
fatal: This operation must be run in a work tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The intended use of this repository is for other collaborators to &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;pull&lt;/code&gt; changes from, as well as &lt;code&gt;push&lt;/code&gt; their own changes to.&lt;/p&gt;

&lt;h3 id=&quot;cloning&quot;&gt;Cloning&lt;/h3&gt;

&lt;p&gt;Now that we’ve set up a bare repository, let’s look at the concept of &lt;em&gt;cloning&lt;/em&gt; a repository.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;git clone&lt;/code&gt; command is really just a shortcut which does a few things for you. With its default configuration, it will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create remote-tracking branches for each branch in the remote.&lt;/li&gt;
  &lt;li&gt;Check out the branch which is currently active (&lt;code&gt;HEAD&lt;/code&gt;) on the remote.&lt;/li&gt;
  &lt;li&gt;Perform a &lt;code&gt;git fetch&lt;/code&gt; to update all remote-tracking branches.&lt;/li&gt;
  &lt;li&gt;Perform a &lt;code&gt;git pull&lt;/code&gt; to bring the current branch and working tree up-to-date with the remote.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;clone&lt;/code&gt; command takes a URL and supports a number of transport protocols including HTTP, SSH, and Git’s own protocol. It also supports plain old file paths, which is what we’ll use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ..
$ git clone bare-repo/ clone-of-bare-repo
Cloning into &#39;clone-of-bare-repo&#39;...
warning: You appear to have cloned an empty repository.
done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s inspect this cloned repository to see how Git has set it up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd clone-of-bare-repo/
$ find . -type f
./.git/info/exclude
./.git/hooks/commit-msg.sample
./.git/hooks/pre-commit.sample
./.git/hooks/pre-push.sample
./.git/hooks/pre-rebase.sample
./.git/hooks/pre-applypatch.sample
./.git/hooks/applypatch-msg.sample
./.git/hooks/post-update.sample
./.git/hooks/prepare-commit-msg.sample
./.git/hooks/update.sample
./.git/description
./.git/HEAD
./.git/config

$ cat .git/HEAD
ref: refs/heads/master
$ ls -l .git/refs/heads/
total 0
$ cat .git/config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote &quot;origin&quot;]
    url = /home/demo/bare-repo/
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is quite literally a clone of &lt;code&gt;bare-repo&lt;/code&gt;. The only difference is that this repository contains a few extra lines in &lt;code&gt;.git/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, it contains a &lt;code&gt;remote&lt;/code&gt; listing for “origin”, which is the default name given to a repository’s main remote. This tells Git the URL of the repository, and which references it should retrieve when performing a &lt;code&gt;git fetch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below that is a &lt;code&gt;branch&lt;/code&gt; listing. This is the configuration for a &lt;em&gt;remote-tracking branch&lt;/em&gt;. But before we get into that, let’s store some data in the remote repository.&lt;/p&gt;

&lt;h3 id=&quot;pushing&quot;&gt;Pushing&lt;/h3&gt;

&lt;p&gt;We’ve just cloned a completely empty repository, and we want to start working on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;Project v1.0&#39; &amp;gt; README
$ git add README
$ git commit -m &quot;Add readme&quot;
[master (root-commit) 5d591d5] Add readme
 1 file changed, 1 insertion(+)
 create mode 100644 README
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that even though it didn’t &lt;em&gt;technically&lt;/em&gt; exist (there was nothing in &lt;code&gt;.git/refs/heads&lt;/code&gt;), this commit has been made to the &lt;code&gt;master&lt;/code&gt; branch. That’s because the &lt;code&gt;HEAD&lt;/code&gt; of this repository pointed to &lt;code&gt;master&lt;/code&gt;, so Git has gone ahead and created the branch for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/refs/heads/master
5d591d5fafd538610291f45bec470d1b4e77891e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve completed some work, we need to share this with our collaborators who have also cloned this repository. Git makes this really easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 231 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To /home/demo/bare-repo/
 * [new branch] master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we specified both the remote (&lt;code&gt;origin&lt;/code&gt;) and the branch (&lt;code&gt;master&lt;/code&gt;) that we want Git to push. It &lt;em&gt;is&lt;/em&gt; possible to simply run &lt;code&gt;git push&lt;/code&gt;, but this can be dangerous and is generally advised against. Running &lt;code&gt;git push&lt;/code&gt; without any arguments can (depending on your configuration) push all remote-tracking branches. This is usually okay, but it can result in you pushing changes which you don’t want collaborators to pull. In the worst case, you can destroy other collaborators’ changes if you specify the &lt;code&gt;--force&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;So, let’s take a look at the remote repository to see what happened.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ../bare-repo/
$ cat refs/heads/master
5d591d5fafd538610291f45bec470d1b4e77891e

$ git show 5d591d5
commit 5d591d5fafd538610291f45bec470d1b4e77891e
Author: Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt;
Date: Sat May 31 14:08:34 2014 +0100

 Add readme

diff --git a/README b/README
new file mode 100644
index 0000000..5cecdfb
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+Project v1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we expected, the remote repository now contains a &lt;code&gt;master&lt;/code&gt; branch which points to the commit that we just created.&lt;/p&gt;

&lt;p&gt;Essentially what happened when we ran &lt;code&gt;git push&lt;/code&gt;, is Git updated the remote’s references, and sent it any objects required to build those references. In this case, &lt;code&gt;git push&lt;/code&gt; updated the remote’s &lt;code&gt;master&lt;/code&gt; to point at &lt;code&gt;5d591d5&lt;/code&gt;, and sent it the &lt;code&gt;5d591d5&lt;/code&gt; commit object as well as any tree and blob objects related to that commit.&lt;/p&gt;

&lt;h3 id=&quot;remote-tracking-branches&quot;&gt;Remote-Tracking Branches&lt;/h3&gt;

&lt;p&gt;As we saw in &lt;em&gt;Cloning&lt;/em&gt;, a remote-tracking branch is essentially just a few lines in &lt;code&gt;.git/config&lt;/code&gt;. Let’s take a look at those lines again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The line &lt;code&gt;[branch &quot;master&quot;]&lt;/code&gt; denotes that the following configuration applies to the &lt;em&gt;local&lt;/em&gt; &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;The rest of the configuration specifies that when this remote-tracking branch is fetched, Git should fetch the &lt;code&gt;master&lt;/code&gt; branch from the &lt;code&gt;origin&lt;/code&gt; remote.&lt;/p&gt;

&lt;p&gt;Besides storing this configuration, Git also stores a local copy of the remote branch. This is simply stored as a reference in &lt;code&gt;.git/refs/remotes/&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt;. We’ll see more about how this works in &lt;em&gt;Fetching&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fetching&quot;&gt;Fetching&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;git fetch&lt;/code&gt; command is fairly simple. It takes the name of a remote (unless used with the &lt;code&gt;--all&lt;/code&gt; flag, which fetches all remotes), and retrieves any new references and all objects necessary to complete them.&lt;/p&gt;

&lt;p&gt;Recall what a remote’s configuration looks like.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[remote &quot;origin&quot;]
    url = /home/demo/bare-repo/
    fetch = +refs/heads/*:refs/remotes/origin/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; parameter here specifies a mapping of &lt;code&gt;&amp;lt;remote-refs&amp;gt;:&amp;lt;local-refs&amp;gt;&lt;/code&gt;. The example above simply states that the references found in origin’s &lt;code&gt;refs/heads/*&lt;/code&gt; should be stored locally in &lt;code&gt;refs/remotes/origin/*&lt;/code&gt;. We can see this in the repository that we cloned earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l .git/refs/remotes/origin/
total 4
-rw-rw-r-- 1 demo demo 41 May 31 14:12 master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s see a fetch in action to get a better idea of what happens. First, we’ll create a new branch on the remote repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ../bare-repo/
$ git branch feature-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’ll run &lt;code&gt;git fetch&lt;/code&gt; from the clone.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ../clone-of-bare-repo/
$ git fetch origin
From /home/demo/bare-repo
 * [new branch] feature-branch -&amp;gt; origin/feature-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has done a couple of things. First, it has created a reference for the remote branch in &lt;code&gt;.git/refs/remotes/origin&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/refs/remotes/origin/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It has also updated a special file, &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; with some important information. We’ll talk about this file in more detail soon.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/FETCH_HEAD
5d591d5fafd538610291f45bec470d1b4e77891e branch &#39;master&#39; of /home/demo/bare-repo
5d591d5fafd538610291f45bec470d1b4e77891e not-for-merge branch &#39;feature-branch&#39; of /home/demo/bare-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is &lt;em&gt;hasn’t&lt;/em&gt; done is created a local branch. This is because Git understands that even though the remote has a &lt;code&gt;feature-branch&lt;/code&gt;, you might not want it in your local repository.&lt;/p&gt;

&lt;p&gt;But what if we &lt;em&gt;do&lt;/em&gt; want a local branch which tracks the remote &lt;code&gt;feature-branch&lt;/code&gt;? Git makes this easy. If we run &lt;code&gt;git checkout feature-branch&lt;/code&gt;, rather than failing because no local &lt;code&gt;feature-branch&lt;/code&gt; exists, Git will see that there is a remote &lt;code&gt;feature-branch&lt;/code&gt; available and create a local branch for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout feature-branch

Branch feature-branch set up to track remote branch feature-branch from origin.
Switched to a new branch &#39;feature-branch&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git has done a couple of things for us here. First, it has created a local &lt;code&gt;feature-branch&lt;/code&gt; reference which points to the same commit as the remote &lt;code&gt;feature-branch&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/refs/remotes/origin/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
$ cat .git/refs/heads/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It has also created a remote-tracking branch entry in &lt;code&gt;.git/config&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote &quot;origin&quot;]
    url = /home/demo/bare-repo/
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
[branch &quot;feature-branch&quot;]
    remote = origin
    merge = refs/heads/feature-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;pulling&quot;&gt;Pulling&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;git pull&lt;/code&gt; command is, like &lt;code&gt;git clone&lt;/code&gt;, a nice shortcut which essentially just runs a few lower-level commands. In short, with the format &lt;code&gt;git pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;, the &lt;code&gt;git pull&lt;/code&gt; command does the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Runs &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Reads &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; to figure out if &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; has a remote-tracking branch which should be merged.&lt;/li&gt;
  &lt;li&gt;Runs &lt;code&gt;git merge&lt;/code&gt; if required, otherwise quits with an appropriate message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, it helps to understand Git’s &lt;code&gt;FETCH_HEAD&lt;/code&gt;. Every time you run &lt;code&gt;git fetch&lt;/code&gt;, Git stores information about the fetched branches in &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt;. This is referred to as a &lt;em&gt;short-lived reference&lt;/em&gt;, because by default Git will override the contents of &lt;code&gt;FETCH_HEAD&lt;/code&gt; every time you run &lt;code&gt;git fetch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s introduce some new commits to our remote repository so that we can see this in practice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone bare-repo/ new-clone-of-bare-repo
Cloning into &#39;new-clone-of-bare-repo&#39;...
done.

$ cd new-clone-of-bare-repo/
$ git checkout feature-branch
Branch feature-branch set up to track remote branch feature-branch from origin.
Switched to a new branch &#39;feature-branch&#39;

$ echo &#39;Some more information.&#39; &amp;gt;&amp;gt; README
$ git commit -am &quot;Add more information to readme&quot;
[feature-branch 7cd83c2] Add more information to readme
 1 file changed, 1 insertion(+)
$ git push origin feature-branch
Counting objects: 5, done.
Writing objects: 100% (3/3), 298 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To /home/demo/bare-repo/
   5d591d5..7cd83c2  feature-branch -&amp;gt; feature-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, using the steps outlined earlier, let’s manually perform a &lt;code&gt;git pull&lt;/code&gt; on the other clone to pull in the changes we just introduced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ../clone-of-bare-repo/
$ git fetch origin
remote: Counting objects: 5, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /home/demo/bare-repo
   5d591d5..7cd83c2  feature-branch -&amp;gt; origin/feature-branch
$ cat .git/FETCH_HEAD
7cd83c29d7360dfc432d556fdbf03eb83ec5158d        branch &#39;feature-branch&#39; of /home/demo/bare-repo
5d591d5fafd538610291f45bec470d1b4e77891e    not-for-merge   branch &#39;master&#39; of /home/demo/bare-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, Git has updated our local copy of the remote branch, and updated the information in &lt;code&gt;FETCH_HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .git/refs/heads/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
$ cat .git/refs/remotes/origin/feature-branch
7cd83c29d7360dfc432d556fdbf03eb83ec5158d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We know from &lt;code&gt;FETCH_HEAD&lt;/code&gt; that the fetch introduced some changes to &lt;code&gt;feature-branch&lt;/code&gt;. So all that’s left to do to complete the “pull” is perform a merge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge FETCH_HEAD
Updating 5d591d5..7cd83c2
Fast-forward
 README | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it – we’ve just performed a &lt;code&gt;git pull&lt;/code&gt; without actually running &lt;code&gt;git pull&lt;/code&gt;. Of course, it is much easier to let Git take care of these details. Just to be sure that the outcome is the same, we can run &lt;code&gt;git pull&lt;/code&gt; as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset --hard HEAD^1
HEAD is now at 5d591d5 Add readme
$ git pull origin feature-branch
From /home/demo/bare-repo
 * branch            feature-branch -&amp;gt; FETCH_HEAD
Updating 5d591d5..7cd83c2
Fast-forward
 README | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;toolkit&quot;&gt;Toolkit&lt;/h2&gt;

&lt;p&gt;With a solid understanding of Git’s inner workings, some of the more advanced Git tools start to make more sense.&lt;/p&gt;

&lt;h3 id=&quot;git-reflog&quot;&gt;git-reflog&lt;/h3&gt;

&lt;p&gt;Whenever you make a change in Git that affects the tip of a branch, Git records information about that change in what’s called the reflog. Usually you shouldn’t need to look at these logs, but sometimes they can come in &lt;em&gt;very&lt;/em&gt; handy.&lt;/p&gt;

&lt;p&gt;Let’s say you have a repository with a few commits.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --oneline
d6f2a84 Add empty LICENSE file
51c4b49 Add some actual content to readme
3413f46 Add TODO note to readme
322c826 Add empty readme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You decide, for some reason, to perform a destructive action on your &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset --hard 3413f46
HEAD is now at 3413f46 Add TODO note to readme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since performing this action, you’ve realised that you lost some commits and you have no idea what their hashes were. You never pushed the changes; they were only in your local repository. &lt;code&gt;git log&lt;/code&gt; is no help, since the commits are no longer reachable from &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --oneline
3413f46 Add TODO note to readme
322c826 Add empty readme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where &lt;code&gt;git reflog&lt;/code&gt; can be useful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reflog
3413f46 HEAD@{0}: reset: moving to 3413f46
d6f2a84 HEAD@{1}: commit: Add empty LICENSE file
51c4b49 HEAD@{2}: commit: Add some actual content to readme
3413f46 HEAD@{3}: commit: Add TODO note to readme
322c826 HEAD@{4}: commit (initial): Add empty readme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reflog shows a list of all changes to &lt;code&gt;HEAD&lt;/code&gt; in reverse chronological order. The hash in the first column is the value of &lt;code&gt;HEAD&lt;/code&gt; &lt;em&gt;after the action on the right was performed&lt;/em&gt;. We can see, therefore, that we were at commit &lt;code&gt;d6f2a84&lt;/code&gt; before the destructive change.&lt;/p&gt;

&lt;p&gt;How you want to recover commits depends on the situation. In this particular example, we can simply do a &lt;code&gt;git reset --hard d6f2a84&lt;/code&gt; to restore &lt;code&gt;HEAD&lt;/code&gt; to its original position. However if we have introduced new commits since the destructive change, we may need to do something like &lt;code&gt;cherry-pick&lt;/code&gt; all the commits that were lost.&lt;/p&gt;

&lt;p&gt;Note that Git’s reflog is only a record of changes &lt;strong&gt;for your local repository&lt;/strong&gt;. If your local repository becomes corrupt or is deleted, the reflog won’t be of any use (if the repository is deleted the reflog won’t exist at all!)&lt;/p&gt;

&lt;p&gt;Depending on the situation, you may find &lt;code&gt;git fsck&lt;/code&gt; more suitable for recovering lost commits.&lt;/p&gt;

&lt;h3 id=&quot;git-fsck&quot;&gt;git-fsck&lt;/h3&gt;

&lt;p&gt;In a way, Git’s object storage works like a primitive file system – objects are like files on a hard drive, and their hashes are the objects’ physical address on the disk. The Git index is exactly like the index of a file system, in that it contains references which point at an object’s physical location.&lt;/p&gt;

&lt;p&gt;By this analogy, &lt;code&gt;git fsck&lt;/code&gt; is aptly named after &lt;code&gt;fsck&lt;/code&gt; (“file system check”). This tool is able to check Git’s database and verify the validity and reachability of every object that it finds.&lt;/p&gt;

&lt;p&gt;When a reference (like a branch) is deleted from Git’s index, the object(s) they refer to usually aren’t deleted, even if they are no longer reachable by any other references. Using a simple example, we can see this in practice. Here we have a branch, &lt;code&gt;feature-branch&lt;/code&gt;, which points at &lt;code&gt;f71bb43&lt;/code&gt;. If we delete &lt;code&gt;feature-branch&lt;/code&gt;, the commit will no longer be reachable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch
  feature-branch
* master
$ git rev-parse --short feature-branch
f71bb43
$ git branch -D feature-branch
Deleted branch feature-branch (was f71bb43).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, commit &lt;code&gt;f71bb43&lt;/code&gt; still exists in our repository, but there are no references pointing to it. By searching through the database, &lt;code&gt;git fsck&lt;/code&gt; is able to find it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fsck --lost-found
Checking object directories: 100% (256/256), done.
dangling commit f71bb43907bffe0bce2967504341a0ece7a8cb68
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For simple cases, &lt;code&gt;git reflog&lt;/code&gt; may be preferred. Where &lt;code&gt;git fsck&lt;/code&gt; excels over &lt;code&gt;git reflog&lt;/code&gt;, though, is when you need to find objects which you never referenced in your local repository (and therefore would not be in your reflog). An example of this is when you delete a remote branch through an interface like GitHub. Assuming the objects haven’t been garbage-collected, you can clone the remote repository and use &lt;code&gt;git fsck&lt;/code&gt; to recover the deleted branch.&lt;/p&gt;

&lt;h3 id=&quot;git-stash&quot;&gt;git-stash&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; takes all changes to your working tree and index, and “stashes” them away, giving you a clean working tree. You can then retrieve those changes from your stash and re-apply them to the working tree at any time with &lt;code&gt;git stash apply&lt;/code&gt;. A common use for the &lt;code&gt;stash&lt;/code&gt; command is to save some half-finished changes in order to checkout another branch.&lt;/p&gt;

&lt;p&gt;This seems fairly simple at first, but the mechanism behind the &lt;code&gt;stash&lt;/code&gt; command is actually quite complex. Let’s build a simple repository to see how it works.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
Initialised empty Git repository in /home/demo/demo-repo/.git/
$ echo &#39;Foo&#39; &amp;gt; test.txt
$ git add test.txt
$ git commit -m &quot;Initial commit&quot;
[master (root-commit) 2522332] Initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s make some changes, and stash them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;Bar&#39; &amp;gt;&amp;gt; test.txt
$ git stash
Saved working directory and index state WIP on master: 2522332 Initial commit
HEAD is now at 2522332 Initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stashes in Git are put onto a stack, with the most recently-stashed on top. You can list all current stashes with &lt;code&gt;git stash list&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git stash list
stash@{0}: WIP on master: 2522332 Initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right now we only have one stash: &lt;code&gt;stash@{0}&lt;/code&gt;. This is actually a reference, which we can inspect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show stash@{0}
commit f949b46a417a4f1595a9d12773c89cce4454a958
Merge: 2522332 1fbe1cc
Author: Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt;
Date:   Sat Jul 5 00:15:51 2014 +0100

    WIP on master: 2522332 Initial commit

diff --cc test.txt
index bc56c4d,bc56c4d..3b71d5b
--- a/test.txt
+++ b/test.txt
@@@ -1,1 -1,1 +1,2 @@@
  Foo
++Bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this we can see that the stash is pointing to a commit object. What’s interesting is that the stash commit is a &lt;strong&gt;merge commit&lt;/strong&gt;. We’ll look into that in a bit, but first: where &lt;em&gt;is&lt;/em&gt; this commit?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --oneline
2522332 Initial commit

$ git branch
* master

$ git fsck --lost-found
Checking object directories: 100% (256/256), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s not in the current branch, and there are no other branches it could be in. &lt;code&gt;git-fsck&lt;/code&gt; hasn’t found any dangling commits, so it must be referenced somewhere. But &lt;em&gt;where&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The answer is simple: Git creates a special reference for the stash which isn’t seen by commands like &lt;code&gt;git branch&lt;/code&gt; and &lt;code&gt;git tag&lt;/code&gt;. This reference lives in &lt;code&gt;.git/refs/stash&lt;/code&gt;. We can verify this with &lt;code&gt;git show-ref&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show-ref
25223321ec2fbcb718b7fbf99485f1cb4d2f2042 refs/heads/master
f949b46a417a4f1595a9d12773c89cce4454a958 refs/stash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So why does Git create a merge commit for a stash? The answer is relatively simple: as well as recording the state of the working tree, &lt;code&gt;git stash&lt;/code&gt; also records the state of the index (also known as the “staging area”). Since it’s possible for the index and the working tree to contain changes to the same file, Git needs to store the states separately.&lt;/p&gt;

&lt;p&gt;This gives us a history that looks a little like this:&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Stashing&quot; src=&quot;/assets/stash.png&quot; srcset=&quot;/assets/resized/stash-290x153.png 290w, /assets/resized/stash-315x166.png 315w,  /assets/stash.png 504w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Stashing
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;In this history graph, the tree of commit &lt;strong&gt;C&lt;/strong&gt; contains the changes to the working tree. Commit &lt;strong&gt;C&lt;/strong&gt;’s first parent is the commit that &lt;code&gt;HEAD&lt;/code&gt; pointed to when the stash was created (commit &lt;strong&gt;A&lt;/strong&gt;). The second parent (commit &lt;strong&gt;B&lt;/strong&gt;) contains the changes to the index. It is with these two commits that Git is able to re-apply your stashed changes.&lt;/p&gt;

&lt;h3 id=&quot;git-describe&quot;&gt;git-describe&lt;/h3&gt;

&lt;p&gt;Git’s &lt;code&gt;describe&lt;/code&gt; command is summed up pretty neatly in the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git-describe - Show the most recent tag that is reachable from a commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can be helpful for things like build and release scripts, as well as figuring out which version a change was introduced in.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git describe&lt;/code&gt; will take any reference or commit hash, and return the name of the most recent tag. If the tag points at the commit you gave it, &lt;code&gt;git describe&lt;/code&gt; will return only the tag name. Otherwise, it will suffix the tag name with some information including the number of commits since the tag and an abbreviation of the commit hash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git describe v1.2.15
v1.2.15
$ git describe 2db66f
v1.2.15-80-g2db66f5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to ensure that only the tag name is returned, you can force Git to remove the suffix by passing &lt;code&gt;--abbrev=0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git describe --abbrev=0 2db66f
v1.2.15
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;git-rev-parse&quot;&gt;git-rev-parse&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git rev-parse&lt;/code&gt; is an ancillary plumbing command which takes a wide range of inputs and returns one or more commit hashes. The most common use case is figuring out which commit a tag or branch points to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rev-parse v1.2.15
2a46f5e2fbe83ccb47a1cd42b81f815f2f36ee9d
$ git rev-parse --short v1.2.15
2a46f5e
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;git-bisect&quot;&gt;git-bisect&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git bisect&lt;/code&gt; is an indispensable tool when you need to figure out which commit introduced a breaking change. The &lt;code&gt;bisect&lt;/code&gt; command does a binary search through your commit history to help you find the breaking change as quickly as possible. To get started, simply run &lt;code&gt;git bisect start&lt;/code&gt;, and tell Git that the commit you’re currently on is broken with &lt;code&gt;git bisect bad&lt;/code&gt;. Then, you can give Git a commit that you know is working with &lt;code&gt;git bisect good &amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect start
$ git bisect bad
$ git bisect good v1.2.15
Bisecting: 41 revisions left to test after this (roughly 5 steps)
[b87713687ecaa7a873eeb3b83952ebf95afdd853] docs(misc/index): add header; general links
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git will then checkout a commit and ask you to test whether it’s broken or not. If the commit is broken, run &lt;code&gt;git bisect bad&lt;/code&gt;. If the commit is fine, run &lt;code&gt;git bisect good&lt;/code&gt;. After doing this a few times, Git will be able to pinpoint the commit which first introduced the breaking change.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect bad
e145a8df72f309d5fb80eaa6469a6148b532c821 is the first bad commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the &lt;code&gt;bisect&lt;/code&gt; is finished (or when you want to abort it), be sure to run &lt;code&gt;git bisect reset&lt;/code&gt; to reset &lt;code&gt;HEAD&lt;/code&gt; to where it was before the &lt;code&gt;bisect&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 May 2014 17:12:22 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/a-hackers-guide-to-git</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/a-hackers-guide-to-git</guid>
        
        <category>git</category>
        
        <category>merge</category>
        
        <category>rebase</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Understanding JavaScript: Inheritance and the prototype chain</title>
        <description>&lt;p&gt;&lt;em&gt;This is the first post in a series on JavaScript. In this post I’m going to explain how JavaScript’s prototype chain works, and how you can use it to achieve inheritance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, it’s important to understand that while JavaScript is an object-oriented language, it is prototype-based and does not implement a traditional class system. Keep in mind that when I mention a &lt;em&gt;class&lt;/em&gt; in this post, I am simply referring to JavaScript objects and the prototype chain – more on this in a bit.&lt;/p&gt;

&lt;p&gt;Almost everything in JavaScript is an object, which you can think of as sort of like associative arrays - objects contain named properties which can be accessed with &lt;code&gt;obj.propName&lt;/code&gt; or &lt;code&gt;obj[&#39;propName&#39;]&lt;/code&gt;. Each object has an internal property called &lt;em&gt;prototype&lt;/em&gt;, which links to another object. The prototype object has a prototype object of its own, and so on – this is referred to as the &lt;em&gt;prototype chain&lt;/em&gt;. If you follow an object’s prototype chain, you will eventually reach the core &lt;code&gt;Object&lt;/code&gt; prototype whose prototype is &lt;code&gt;null&lt;/code&gt;, signalling the end of the chain.&lt;/p&gt;

&lt;p&gt;So what is the prototype chain used for? When you request a property which the object does not contain, JavaScript will look down the prototype chain until it either finds the requested property, or until it reaches the end of the chain. This behaviour is what allows us to create “classes”, and implement inheritance.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Don’t worry if this doesn’t make sense yet. To see prototypes in action, let’s take a look at the simplest example of a “class” within JavaScript, which is created with a function object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Animal() {}

var animal = new Animal();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add properties to the &lt;code&gt;Animal&lt;/code&gt; class in two ways: either by setting them as &lt;em&gt;instance properties&lt;/em&gt;, or by adding them to the &lt;code&gt;Animal&lt;/code&gt; prototype.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Animal(name) {
    // Instance properties can be set on each instance of the class
    this.name = name;
}

// Prototype properties are shared across all instances of the class. However, they can still be overwritten on a per-instance basis with the `this` keyword.
Animal.prototype.speak = function() {
    console.log(&quot;My name is &quot; + this.name);
};

var animal = new Animal(&#39;Monty&#39;);
animal.speak(); // My name is Monty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The structure of the &lt;code&gt;Animal&lt;/code&gt; object becomes clear when we inspect it in the console. We can see that the &lt;code&gt;name&lt;/code&gt; property belongs to the object itself, while &lt;code&gt;speak&lt;/code&gt; is part of the &lt;code&gt;Animal&lt;/code&gt; prototype.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Animal Prototype&quot; src=&quot;/assets/Animal.png&quot; srcset=&quot;/assets/resized/Animal-290x71.png 290w, /assets/resized/Animal-315x78.png 315w,  /assets/Animal.png 430w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Animal Prototype
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Now let’s look at how we can extend the &lt;code&gt;Animal&lt;/code&gt; class to create a &lt;code&gt;Cat&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Cat(name) {
    Animal.call(this, name);
}

Cat.prototype = new Animal();

var cat = new Cat(&#39;Monty&#39;);
cat.speak(); // My name is Monty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we are doing here is setting &lt;code&gt;Cat&lt;/code&gt;’s prototype to an instance of &lt;code&gt;Animal&lt;/code&gt;, so that &lt;code&gt;Cat&lt;/code&gt; inherits all of &lt;code&gt;Animal&#39;s&lt;/code&gt; properties. We’re also using &lt;code&gt;Animal.call&lt;/code&gt; to inherit the &lt;code&gt;Animal&lt;/code&gt; constructor (sort of like &lt;code&gt;parent&lt;/code&gt; or &lt;code&gt;super&lt;/code&gt; in other languages). &lt;code&gt;call&lt;/code&gt; is a special function which lets us call a function and specify the value of &lt;code&gt;this&lt;/code&gt; &lt;em&gt;within that function&lt;/em&gt;. So when &lt;code&gt;this.name&lt;/code&gt; is set inside the &lt;code&gt;Animal&lt;/code&gt; constructor, it’s the &lt;code&gt;Cat&lt;/code&gt;’s name property being set, not the &lt;code&gt;Animal&lt;/code&gt;’s.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the &lt;code&gt;Cat&lt;/code&gt; object to get a better view of what’s going on.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Cat&quot; src=&quot;/assets/Cat.png&quot; srcset=&quot;/assets/resized/Cat-290x90.png 290w, /assets/resized/Cat-315x98.png 315w,  /assets/Cat.png 430w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Cat
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Cat&lt;/code&gt; object has its own &lt;code&gt;name&lt;/code&gt; instance property, like we expected. When we look at the object’s prototype we see that it has also inherited &lt;code&gt;Animal&lt;/code&gt;’s &lt;code&gt;name&lt;/code&gt; instance property as well as the &lt;code&gt;speak&lt;/code&gt; prototype property. This is where the prototype chain comes in – when we request &lt;code&gt;cat.name&lt;/code&gt;, JavaScript finds the &lt;code&gt;name&lt;/code&gt; instance property and doesn’t bother going down the prototype chain. However when we request &lt;code&gt;cat.speak&lt;/code&gt;, JavaScript has to travel down the prototype chain until it finds the &lt;code&gt;speak&lt;/code&gt; property inherited from &lt;code&gt;Animal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point I would recommend going through a few slides of &lt;a href=&quot;http://ejohn.org/apps/learn/#64&quot;&gt;John Resig’s JavaScript Ninja&lt;/a&gt; as they go into more detail about how JavaScript prototypes work, and provide some good interactive examples.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 May 2014 22:43:39 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/understanding-javascript-inheritance-and-the-prototype-chain</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/understanding-javascript-inheritance-and-the-prototype-chain</guid>
        
        <category>classes</category>
        
        <category>inheritance</category>
        
        <category>javascript</category>
        
        <category>prototype</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Defining readable code</title>
        <description>&lt;p&gt;Code readability is something that I often bring up during code reviews, but I often have trouble explaining &lt;em&gt;why&lt;/em&gt; I find a piece of code to be easy or difficult to read.&lt;/p&gt;

&lt;p&gt;When you ask programmers how to make code easier to read, many of them will mention things like coding standards, descriptive naming, and decomposition. These things actually aid in making code easier to &lt;em&gt;comprehend&lt;/em&gt; rather than easier to &lt;em&gt;read&lt;/em&gt;. For me, _readability _is at a lower level, somewhere between legibility and comprehension.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Legibility - Readability - Comprehension&quot; src=&quot;/assets/legibility-readability-comprehension.png&quot; srcset=&quot;/assets/resized/legibility-readability-comprehension-290x251.png 290w, /assets/resized/legibility-readability-comprehension-315x273.png 315w,  /assets/legibility-readability-comprehension.png 508w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Legibility - Readability - Comprehension
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;At the lowest level is legibility. This is how easily individual characters can be distinguished from each other, and can usually be boiled down to the choice of font, as well as the foreground &amp;amp; background colours.&lt;/p&gt;

&lt;p&gt;At the highest level is comprehension, which is the ease in which a block of code can be fully understood. Decomposition, naming conventions and comments are just a few of the many ways to improve comprehension.&lt;/p&gt;

&lt;p&gt;Readability sits between these two. This level is a little harder to define, but I believe it comes down to two main factors: &lt;strong&gt;structure&lt;/strong&gt; and &lt;strong&gt;line density&lt;/strong&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;

&lt;p&gt;Our brains are very good at identifying structure and patterns; we find them pleasing. In the same sense, many people find a lack of structure to be quite displeasing. The effect of structure on readability can be easily demonstrated using an excerpt from this BBC article &lt;a href=&quot;http://www.bbc.co.uk/news/science-environment-25163113&quot;&gt;&lt;em&gt;Indian probe begins journey to Mars&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;India’s mission to Mars has embarked on its 300-day journey to the Red Planet. Early on Sunday the spacecraft fired its main engine for more than 20 minutes, giving it the correct velocity to leave Earth’s orbit. It will now cruise for 680m km (422m miles), setting up an encounter with its target on 24 September 2014.&lt;br /&gt;
India’s mission to Mars has embarked on its 300-day journey to the Red Planet.&lt;/p&gt;

  &lt;p&gt;Early on Sunday the spacecraft fired its main engine for more than 20 minutes, giving it the correct velocity to leave Earth’s orbit.&lt;/p&gt;

  &lt;p&gt;It will now cruise for 680m km (422m miles), setting up an encounter with its target on 24 September 2014.&lt;br /&gt;
&amp;lt;div style=&quot;clear: both;&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without even reading the content, the version on the right should appear more pleasant. The line breaks should give you a visual cue that each paragraph, while relevant, is not directly related to its neighbours. This is important because it lets you digest the text in smaller chunks which are much easier to comprehend by themselves than one big wall of text.&lt;/p&gt;

&lt;p&gt;Breaking up large amounts of text into paragraphs is common practice in modern writing. Unfortunately, this practice doesn’t seem to have been adopted by programmers. It’s not uncommon to see code with no more than one sequential line break.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;while(index--) {
  digit = uid[index].charCodeAt(0);
  if (digit == 57 /*&#39;9&#39;*/) {
    uid[index] = &#39;A&#39;;
    return uid.join(&#39;&#39;);
  }
  if (digit == 90  /*&#39;Z&#39;*/) {
    uid[index] = &#39;0&#39;;
  } else {
    uid[index] = String.fromCharCode(digit + 1);
    return uid.join(&#39;&#39;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is an excerpt from the &lt;a href=&quot;https://github.com/mozilla/persona&quot;&gt;Mozilla Persona&lt;/a&gt; source code. It’s only 14 lines long, but you need to really engage your brain to read and understand it. Without some sort of paragraph structure, we have no way of knowing which lines are related, so we’re forced to digest all 14 lines at once.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;while(index--) {
  digit = uid[index].charCodeAt(0);

  if (digit == 57 /*&#39;9&#39;*/) {
    uid[index] = &#39;A&#39;;
    return uid.join(&#39;&#39;);
  }

  if (digit == 90  /*&#39;Z&#39;*/) {
    uid[index] = &#39;0&#39;;
  } else {
    uid[index] = String.fromCharCode(digit + 1);
    return uid.join(&#39;&#39;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With only 2 extra line breaks, the code has been changed from a single 14-line block to three distinct blocks, with the largest being only 6 lines. With this added structure, it’s much easier to figure out what each block does: Block #1 sets the value of &lt;code&gt;digit&lt;/code&gt;. Block #2 handles the case of &lt;code&gt;digit&lt;/code&gt; being 57. Block #3 handles the case of &lt;code&gt;digit&lt;/code&gt; being 90, and every other case as well. The difference may be trivial in this example, but applied to larger blocks of code this technique can save hours of time trying to read code.&lt;/p&gt;

&lt;p&gt;There aren’t any solid rules on when to separate blocks of code. Usually you should trust your gut and split code into blocks of related lines. As a guideline though, I tend to treat the following as separate blocks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialization &amp;amp; assignment&lt;/li&gt;
  &lt;li&gt;Control flow&lt;/li&gt;
  &lt;li&gt;Data transformations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;line-density&quot;&gt;Line density&lt;/h2&gt;

&lt;p&gt;Writers will often use &lt;a href=&quot;http://en.wikipedia.org/wiki/Plain_language&quot;&gt;plain language&lt;/a&gt; to reduce the &lt;em&gt;idea density&lt;/em&gt; of their text. This enables readers to quickly skim over text rather than making an effort to understand complex language. Programmers can use similar techniques to reduce what I call the &lt;em&gt;line density&lt;/em&gt; of code. Lines become dense when they contain too much logic. A good example is a complex if-statement.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (x == 10 || x == 20 &amp;amp;amp;&amp;amp;amp; y == 2 || y == 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the reader must make a significant effort to determine that there are 3 possible “truth” conditions. The reason this requires so much effort is because we are required to read the line character-by-character until we find the &lt;code&gt;||&lt;/code&gt;, which we know separates each condition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  x == 10 ||
  x == 20 &amp;amp;amp;&amp;amp;amp; y == 2 ||
  y == 5
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By moving each condition onto its own line, the overall line density is reduced, thereby reducing the mental effort required to identify the conditions.&lt;/p&gt;

&lt;p&gt;Line density also applies to function calls which take a large number of arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;doSomething(longVariableName, process(anotherVariable), [&#39;array&#39;, &#39;of&#39;, &#39;things&#39;], getSomethingFrom(SOME_CONSTANT))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be made more readable by moving each argument onto a separate line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;doSomething(
  longVariableName,
  process(anotherVariable),
  [&#39;array&#39;, &#39;of&#39;, &#39;things&#39;],
  getSomethingFrom(SOME_CONSTANT)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;other-factors&quot;&gt;Other factors&lt;/h2&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 21px; line-height: 1.6;&quot;&gt;There are plenty of other factors involved in code readability. But as with most things, readability is entirely subjective – it’s important not to confuse it with personal preference.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Programming is an interesting mix of engineering and craft. As well as borrowing precision and discipline from engineering, we need to remember to also borrow style and ergonomics from visual design.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Mar 2014 12:40:55 +0000</pubDate>
        <link>https://wildlyinaccurate.github.io/what-makes-code-readable</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/what-makes-code-readable</guid>
        
        <category>readability</category>
        
        
        <category>programming</category>
        
        <category>thoughts</category>
        
      </item>
    
      <item>
        <title>HTTP status as a service</title>
        <description>&lt;p&gt;Using Node.js* you can run a simple “HTTP status as a service” server. This can be useful for quickly checking whether your application handles various status codes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var http = require(&#39;http&#39;);

http.createServer(function (request, response) {
  var status = request.url.substr(1);

  if ( ! http.STATUS_CODES[status]) {
    status = &#39;404&#39;;
  }

  response.writeHead(status, { &#39;Content-Type&#39;: &#39;text/plain&#39; });
  response.end(http.STATUS_CODES[status]);
}).listen(process.env.PORT || 5000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a server on port 5000, or any port that you specify in the &lt;code&gt;PORT&lt;/code&gt; environment variable. It will respond to &lt;code&gt;/{CODE}&lt;/code&gt; and return the HTTP status that corresponds to &lt;code&gt;{CODE}&lt;/code&gt;. Here’s a couple of examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -i http://127.0.0.1:5000/500
HTTP/1.1 500 Internal Server Error
Content-Type: text/plain
Date: Mon, 30 Sep 2013 14:10:10 GMT
Connection: keep-alive
Transfer-Encoding: chunked

Internal Server Error%
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ curl -i http://127.0.0.1:5000/404
HTTP/1.1 404 Not Found
Content-Type: text/plain
Date: Mon, 30 Sep 2013 14:10:32 GMT
Connection: keep-alive
Transfer-Encoding: chunked

Not Found%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a really simple example, and could easily be extended to let you specify a &lt;code&gt;Location&lt;/code&gt; header value for 30X responses.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;*Well, you could use anything really. I’m just using Node.js since JavaScript is my language of choice.&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Sep 2013 15:13:22 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/http-status-as-a-service</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/http-status-as-a-service</guid>
        
        <category>http status code</category>
        
        <category>node.js</category>
        
        <category>service</category>
        
        
        <category>javascript</category>
        
        <category>web development</category>
        
      </item>
    
      <item>
        <title>Converting Bootswatch themes to SASS/SCSS</title>
        <description>&lt;p&gt;There’s a fairly quick way to convert Bootswatch themes to Sass (which you might want to do if you use something like &lt;a href=&quot;https://github.com/jlong/sass-bootstrap&quot;&gt;sass-bootstrap&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Simply download the theme’s variables.less and run the following find/replace patterns against it:&lt;/p&gt;

&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Find (regex): &lt;code&gt;@([a-zA-Z0-9_-]+)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Replace: &lt;code&gt;\$$1&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;mixins&quot;&gt;Mixins&lt;/h3&gt;

&lt;p&gt;Find: &lt;code&gt;spin(&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Replace: &lt;code&gt;adjust-hue(&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is all I’ve found in the themes that I’ve tried.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Sep 2013 15:24:49 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/converting-bootswatch-themes-to-sass</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/converting-bootswatch-themes-to-sass</guid>
        
        <category>bootstrap</category>
        
        <category>bootswatch</category>
        
        <category>scss</category>
        
        
        <category>web development</category>
        
      </item>
    
      <item>
        <title>Getting Internet Sharing to work on OSX 10.8</title>
        <description>&lt;p&gt;I noticed that the Internet Sharing functionality didn’t work on my Macbook Air (running OSX 10.8 - Mountain Lion). This is because the Air’s DNS server (BIND) isn’t configured correctly.&lt;/p&gt;

&lt;p&gt;For me, the fix was pretty simple. Edit &lt;code&gt;/etc/com.apple.named.proxy.conf&lt;/code&gt; by running &lt;code&gt;sudo nano /etc/com.apple.named.proxy.conf&lt;/code&gt; in a terminal, and change&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forward first;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forward only;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then turn Internet Sharing off and on again.&lt;/p&gt;

&lt;p&gt;The annoying thing is that OSX seems to restore the BIND config the next time you turn Internet Sharing off, so you need to remember to change it each time.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Aug 2013 12:39:55 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/getting-internet-sharing-to-work-on-osx-10-8</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/getting-internet-sharing-to-work-on-osx-10-8</guid>
        
        <category>BIND</category>
        
        <category>DNS</category>
        
        <category>Internet Sharing</category>
        
        <category>OSX</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Force Bower to clone from https:// instead of git://</title>
        <description>&lt;p&gt;Most Bower packages will be fetched using a git:// URL, which connects on port 9418. This can be problematic if you’re behind a firewall which blocks this port.&lt;/p&gt;

&lt;p&gt;You can get around this quite easily by telling Git to always use https:// instead of git://:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global url.https://.insteadOf git://
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 16 Aug 2013 17:09:28 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/force-bower-to-clone-from-https-instead-of-git</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/force-bower-to-clone-from-https-instead-of-git</guid>
        
        <category>bower</category>
        
        <category>git</category>
        
        <category>https</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Dishonest comments</title>
        <description>&lt;p&gt;One of my favourite Ruby Rogues episodes (&lt;a href=&quot;http://rubyrogues.com/what-makes-beautiful-code/&quot;&gt;&lt;em&gt;What Makes Beautiful Code&lt;/em&gt;&lt;/a&gt;) has a short section where the Rogues talk about the concept of &lt;em&gt;dishonest code&lt;/em&gt;. David Brady wrote a &lt;a href=&quot;http://chalain.livejournal.com/39332.html&quot;&gt;really good piece&lt;/a&gt; on this, which I highly recommend reading.&lt;/p&gt;

&lt;p&gt;What I want to talk about is a more specific variant of dishonest code: dishonest comments.&lt;/p&gt;

&lt;p&gt;Take this code, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(&#39;a&#39;).click(function(e) {
    e.stopPropagation();
    e.preventDefault();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re not familiar with JavaScript events, &lt;code&gt;e.stopPropagation()&lt;/code&gt; will stop this event from bubbling up to other event handlers. Now, what if somebody decides that the event &lt;em&gt;should&lt;/em&gt; bubble up? They might do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;--- a/example.js
+++ b/example.js
@@ -1,4 +1,4 @@
 $(&#39;a&#39;).click(function(e) {
+    // Let the event bubble up to the next handler
-    e.stopPropagation();
     e.preventDefault();
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty common practice; a developer will leave a comment so that the next person understands why the &lt;code&gt;e.stopPropagation()&lt;/code&gt; is gone.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;So far this isn’t too bad. But what happens when somebody changes their mind again, and doesn’t want the event to bubble up anymore? Quite often, this is what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;--- a/example.js
+++ b/example.js
@@ -1,4 +1,5 @@
 $(&#39;a&#39;).click(function(e) {
     // Let the event bubble up to the next handler
+    e.stopPropagation();
     e.preventDefault();
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;e.stopPropagation()&lt;/code&gt; call is added back in, right where it was before. You can see the problem here: the comment explaining that the event will bubble up is still there.&lt;/p&gt;

&lt;p&gt;A lot of developers tend to ignore comments in code, especially comments that were written by somebody else. Modern text editors and IDEs are partly to blame for this, since their syntax highlighting tends to de-emphasise comments by greying them out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(&#39;a&#39;).click(function(e) {
    // Let the event bubble up to the next handler
    e.stopPropagation();
    e.preventDefault();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we’ve ended up with is a comment which says one thing, and some code which does something &lt;em&gt;entirely different&lt;/em&gt;. This is surprisingly common – most codebases are absolutely &lt;em&gt;littered&lt;/em&gt; with dishonest comments.&lt;/p&gt;

&lt;p&gt;The example I’ve given above might seem contrived, but this is an entirely real —although somewhat simplified— example of some code that I had to debug recently.&lt;/p&gt;

&lt;p&gt;Dishonest comments can confuse even the most experienced developers, and make debugging much more difficult than it needs to be. Figuring out what one line of code is &lt;em&gt;supposed&lt;/em&gt; to do can turn into an hour of trawling through version control logs and diffs.&lt;/p&gt;

&lt;p&gt;The worst part about dishonest comments is that the problems they cause aren’t immediately obvious. Unit tests won’t pick them up. A full regression test won’t find them. Once they’re committed to the codebase, they remain hidden right up until the point where you realise that they’re lying to you.&lt;/p&gt;

&lt;p&gt;So really, the only way to avoid dishonest comments is to simply &lt;strong&gt;not write them in the first place&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;line-height: 1.6;&quot;&gt;In the Ruby Rogues episode I mentioned at the start of this post, there’s a brief discussion about the idea that comments are a code smell. This idea is &lt;/span&gt;&lt;a href=&quot;http://programmers.stackexchange.com/questions/1/comments-are-a-code-smell&quot;&gt;hotly debated&lt;/a&gt;.&lt;span style=&quot;line-height: 1.6;&quot;&gt; However, I do believe that treating comments as a code smell can help you to identify dishonest comments before they become a problem.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I think this ends up coming back to the way that syntax highlighting hides comments from us. It’s really difficult to spot dishonest comments because we’ve trained our brains to focus on the bright &amp;amp; colourful text, and ignore the dull grey text.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Greyed-out comments&quot; src=&quot;/assets/hidden-comments.png&quot; srcset=&quot;/assets/resized/hidden-comments-290x276.png 290w, /assets/resized/hidden-comments-315x300.png 315w,  /assets/hidden-comments.png 430w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Greyed-out comments
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;If you opened this file to make some changes, chances are you wouldn’t even notice the comments, let alone figure out that they are all lies. But what if the comments stood out more?&lt;/p&gt;

&lt;p&gt;I’m currently experimenting with my own variation of the Monokai colour scheme which draws comments in a bright colour.&lt;/p&gt;

&lt;div class=&quot;thumbnail&quot;&gt;
    &lt;img class=&quot;thumbnail__image&quot; alt=&quot;Bright comments&quot; src=&quot;/assets/bright-comments.png&quot; srcset=&quot;/assets/resized/bright-comments-290x276.png 290w, /assets/resized/bright-comments-315x300.png 315w,  /assets/bright-comments.png 430w&quot; /&gt;

    
    &lt;div class=&quot;thumbnail__caption&quot;&gt;
        Bright comments
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Suddenly the comments stand out. They even stand out more than most of the actual code in this file. To me, this is a good thing because comments should only be there to say something important that the code can’t say by itself. If there is a comment in the code, I want it to stand out because it must be telling me something &lt;strong&gt;really important&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Having the comments stand out more also makes it much more obvious when there are too many comments. Usually, seeing a lot of comments tells me that either:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Most of these comments are unnecessary, or,&lt;/li&gt;
  &lt;li&gt;The code needs to be refactored to be self-documenting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the comments are unnecessary, they can be removed. If the code can be more self-documenting, then the comments that &lt;em&gt;were&lt;/em&gt; documenting it can be removed. Either way, you end up with less comments, and less dishonesty.&lt;/p&gt;

&lt;p&gt;How you deal with dishonest comments in your codebase is up to you. In the end though, it’s down to you and your team to be more thoughtful about the comments that you write. If an honest comment can be turned into a dishonest comment simply by changing the code around it, then you probably need to re-think whether that comment is necessary.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Aug 2013 22:07:02 +0100</pubDate>
        <link>https://wildlyinaccurate.github.io/dishonest-comments</link>
        <guid isPermaLink="true">https://wildlyinaccurate.github.io/dishonest-comments</guid>
        
        <category>comments</category>
        
        
        <category>thoughts</category>
        
      </item>
    
  </channel>
</rss>
