<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wildly Inaccurate</title>
    <description>A collection of guides &amp;amp; opinions about programming and the state of the web, from a developer at BBC News.
</description>
    <link>https://wildlyinaccurate.com/</link>
    <atom:link href="https://wildlyinaccurate.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 04 Apr 2017 21:59:58 +0100</pubDate>
    <lastBuildDate>Tue, 04 Apr 2017 21:59:58 +0100</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Introducing a faster BBC News front page</title>
        <description>&lt;p&gt;Web performance is something I care deeply about both as a developer whose work affects millions of people around the world, and as a user who often accesses the web on slow &amp;amp; unreliable connections. I have regularly and loudly complained that &lt;a href=&quot;/redefining-the-bcc-news-core-experience/&quot;&gt;the BBC News website is unnecessarily slow&lt;/a&gt;, so when I was given the opportunity to help rebuild one of the most visited pages of BBC News —the front page— I jumped at the chance.&lt;/p&gt;

&lt;p&gt;That was April 2016. Now, a whole year later, we’re ready to begin a phased rollout of the new front page. Starting with a small percentage of users in the UK, we will gradually move everybody to the new front page over the course of several weeks. If you’re eager to see it before the rollout is complete, it is available at &lt;a href=&quot;http://www.bbc.co.uk/news/0&quot;&gt;www.bbc.co.uk/news/0&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;quick-facts-about-the-new-front-page&quot;&gt;Quick facts about the new front page&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It is lighter and faster than the old one:
    &lt;ul&gt;
      &lt;li&gt;First meaningful paint happens up to &lt;strong&gt;50% sooner&lt;/strong&gt; on mobile devices&lt;sup&gt;&lt;a href=&quot;#footnotes&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
      &lt;li&gt;Page enhancements like lazy-loaded images load &lt;strong&gt;150% faster&lt;/strong&gt; on mobile, and &lt;strong&gt;70% faster&lt;/strong&gt; on desktop.&lt;/li&gt;
      &lt;li&gt;The total bytes downloaded is &lt;strong&gt;50% less&lt;/strong&gt; on mobile and &lt;strong&gt;75% less&lt;/strong&gt; on desktop.&lt;/li&gt;
      &lt;li&gt;CPU busy time has been reduced by &lt;strong&gt;30%&lt;/strong&gt; on mobile and by &lt;strong&gt;50%&lt;/strong&gt; on desktop.&lt;/li&gt;
      &lt;li&gt;Performance monitoring has been automated with &lt;a href=&quot;https://speedcurve.com/&quot;&gt;SpeedCurve&lt;/a&gt; from the beginning of the project.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It is available over HTTPS, and we have plans to redirect insecure traffic to HTTPS in the not-so-distant future.&lt;/li&gt;
  &lt;li&gt;The page is built from React components that are styled with the BBC’s CSS framework, &lt;a href=&quot;https://github.com/bbc/grandstand&quot;&gt;Grandstand&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Each component is a horizontal “slice” of the page that fetches its own data. This makes it easy for us to reuse slices on any page.&lt;/li&gt;
  &lt;li&gt;The React components are individually rendered by the BBC’s React-component-as-an-API-endpoint service and assembled into a page by our &lt;a href=&quot;/how-we-assemble-web-pages-at-bbc-news/&quot;&gt;page-assembly-as-a-service system&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;React is only used on the server. We do not load it in the browser&lt;sup&gt;&lt;a href=&quot;#footnotes&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;The development team consists of 5 developers and 1 tester, but we have collaborated with over 60 other developers and testers from all around the BBC to build this page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;The version of the front page we’re rolling out is an MVP, a &lt;em&gt;phase one&lt;/em&gt;. We will be changing it considerably over the next several months. Here’s an idea of what you can expect to see:&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;performance-improvements&quot;&gt;Performance improvements&lt;/h3&gt;

&lt;p&gt;While we have managed to improve the performance of the front page considerably, there is still a lot of work to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first meaningful paint time is still too high. We can improve it by loading the core CSS sooner.&lt;/li&gt;
  &lt;li&gt;We still send too many bytes to the client. A good portion of this is from inline styles that are only used on IE8. (Update: We already have a pull request open to drop the IE8-only styles, which should reduce the amount of inline styles by about a third).&lt;/li&gt;
  &lt;li&gt;Style recalculations and layouts take too long on low-powered devices. This still needs some investigation.&lt;/li&gt;
  &lt;li&gt;We are essentially hamstrung by the “white BBC bar” at the top of the page. This bar contains components from other parts of the BBC like Search, Notifications, and BBC ID. All of these components load their own blocking CSS &amp;amp; JavaScript before any of the BBC News assets. While this is unlikely to change in the short term, we’re hoping to work with the teams that own these components to reduce their impact.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design-enhancements&quot;&gt;Design enhancements&lt;/h3&gt;

&lt;p&gt;In order to ship the new front page sooner, we made a lot of compromises with both the UX and editorial teams around the design of the page. Once we’re finished with the rollout, we will be improving the visual treatment of story cards (promos) to highlight correspondent stories and feature pieces. The current designs look something like this:&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;The plain promo design for the MVP launch&quot; src=&quot;/assets/news-front-page-promo-current.png&quot; srcset=&quot;/assets/r/320/news-front-page-promo-current.png 320w, /assets/r/380/news-front-page-promo-current.png 380w, /assets/r/420/news-front-page-promo-current.png 420w, /assets/r/640/news-front-page-promo-current.png 640w, /assets/r/768/news-front-page-promo-current.png 768w, /assets/r/1024/news-front-page-promo-current.png 1024w, /assets/r/510/news-front-page-promo-current.png 510w, /assets/r/690/news-front-page-promo-current.png 690w, /assets/r/930/news-front-page-promo-current.png 930w, /assets/r/1110/news-front-page-promo-current.png 1110w,  /assets/news-front-page-promo-current.png 1267w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The plain promo design for the MVP launch&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;And below is one of the proposals for how we might display other types of promo:&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;An example of potential visual treatments for special types of promo&quot; src=&quot;/assets/news-front-page-promo-variation.png&quot; srcset=&quot;/assets/r/320/news-front-page-promo-variation.png 320w, /assets/r/380/news-front-page-promo-variation.png 380w, /assets/r/420/news-front-page-promo-variation.png 420w, /assets/r/640/news-front-page-promo-variation.png 640w, /assets/r/768/news-front-page-promo-variation.png 768w, /assets/r/1024/news-front-page-promo-variation.png 1024w, /assets/r/510/news-front-page-promo-variation.png 510w, /assets/r/690/news-front-page-promo-variation.png 690w, /assets/r/930/news-front-page-promo-variation.png 930w, /assets/r/1110/news-front-page-promo-variation.png 1110w,  /assets/news-front-page-promo-variation.png 1264w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;An example of potential visual treatments for special types of promo&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;react-in-the-browser&quot;&gt;React in the browser&lt;/h3&gt;

&lt;p&gt;We decided early on in the project that using React in the browser was overkill for a page that is predominantly static text and images. The performance impact of bundling so much JavaScript and executing it in the browser is also unacceptably high: Even making use of server-side rendering, emulated mobile devices spend nearly 4 times as long executing scripts and performing layouts &amp;amp; paints when React was run on the page.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;A timeline of the server side rendered page without React in the browser&quot; src=&quot;/assets/news-front-page-timeline-static.png&quot; width=&quot;636&quot; srcset=&quot;/assets/r/320/news-front-page-timeline-static.png 320w, /assets/r/380/news-front-page-timeline-static.png 380w, /assets/r/420/news-front-page-timeline-static.png 420w, /assets/r/510/news-front-page-timeline-static.png 510w,  /assets/news-front-page-timeline-static.png 636w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;A timeline of the server side rendered page without React in the browser&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;A timeline showing the impact of running React in the browser&quot; src=&quot;/assets/news-front-page-timeline-react.png&quot; width=&quot;636&quot; srcset=&quot;/assets/r/320/news-front-page-timeline-react.png 320w, /assets/r/380/news-front-page-timeline-react.png 380w, /assets/r/420/news-front-page-timeline-react.png 420w, /assets/r/510/news-front-page-timeline-react.png 510w,  /assets/news-front-page-timeline-react.png 636w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;A timeline showing the impact of running React in the browser&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Our current approach to running JavaScript in the browser is to build a good ol’ fashioned bundle, completely separate from the React components. However, we realise that this isn’t going to scale for very long, and that eventually we will have to find a way to run our React components in the browser without impacting the user experience. Solutions that we’re looking into include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://preactjs.com/&quot;&gt;Preact&lt;/a&gt; in place of React.&lt;/li&gt;
  &lt;li&gt;Converting our components to &lt;a href=&quot;https://preactjs.com/guide/types-of-components#stateless-functional-components&quot;&gt;stateless functional components&lt;/a&gt; where possible to reduce their size.&lt;/li&gt;
  &lt;li&gt;Smarter &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;code splitting&lt;/a&gt; so that we can load non-essential code on-demand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Firstly, to everybody involved: &lt;strong&gt;thank you&lt;/strong&gt;. Rarely have I had the chance to work with so many talented, patient, dedicated, and caring people. From documentation tweaks to requirements gathering, from bug fixes to building entire components; regardless of the size of your contribution, we wouldn’t have reached this point without you. So again: thank you, and congratulations on reaching this milestone.&lt;/p&gt;

&lt;p&gt;To the design team and editorial staff: thank you for helping us find a balance between perfection and a fast launch.&lt;/p&gt;

&lt;p&gt;To the project managers, business analysts, and product owners: I don’t think you get enough credit. Thank you for working extraordinarily hard to smooth out all of the bumps in this project, and for providing the development team with a clear path.&lt;/p&gt;

&lt;p&gt;And finally, to my team: You are amazing. I’m so proud of what we’ve built together. On a more personal level, you’ve made coming into work feel like coming home to a second family, and I’m eternally grateful for that. The donuts are on me 💜.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Mobile device testing was performed using the “Mobile - Emerging Markets” setting on &lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPagetest&lt;/a&gt; (&lt;em&gt;Chrome Beta on a Motorola G (gen 4) tested from Dulles, Virginia on a 400 Kbps 3G connection with 400ms of latency&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;BBC News does not load React in the browser, but some other page components (like the BBC-wide search bar in the top-right) do load React.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 04 Apr 2017 00:00:00 +0100</pubDate>
        <link>https://wildlyinaccurate.com/introducing-a-faster-bbc-news-front-page/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/introducing-a-faster-bbc-news-front-page/</guid>
        
        <category>bbc news</category>
        
        <category>performance</category>
        
        
        <category>BBC News</category>
        
      </item>
    
      <item>
        <title>Web development technologies to adopt in 2017</title>
        <description>&lt;p&gt;I started 2016 feeling quite overwhelmed by the sheer number of new technologies that were being introduced. This year I feel like many of those technologies have matured, so I have collated a list of the ones that I think deserve your attention. My focus for the last couple of years has been on performance, so I’ve made an effort to ensure that all of the technologies mentioned are either “performance-friendly” or are directly related to performance.&lt;/p&gt;

&lt;h3 id=&quot;preact--preactjscom&quot;&gt;Preact — &lt;a href=&quot;https://preactjs.com/&quot;&gt;preactjs.com&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A fast 3kB alternative to React with the same ES6 API. For projects that use React’s other APIs, &lt;a href=&quot;https://github.com/developit/preact-compat&quot;&gt;preact-compat&lt;/a&gt; exists as a compatibility layer allowing Preact to be a complete drop-in replacement for React.&lt;/p&gt;

&lt;p&gt;As well as being smaller than React, Preact is also much faster. I measured the impact of migrating to Preact in three projects and saw a 3-4x reduction in JavaScript execution times in all of them &lt;small&gt;(&lt;a href=&quot;https://github.com/wildlyinaccurate/resume/pull/4&quot;&gt;some data and profiler screenshots for one project&lt;/a&gt;)&lt;/small&gt;.&lt;/p&gt;

&lt;h3 id=&quot;webpack--webpackjsorg&quot;&gt;Webpack — &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack.js.org&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Bundle your scripts, images, styles, assets… I was initially put off Webpack because I thought it did too much. With the help of &lt;a href=&quot;https://github.com/petehunt/webpack-howto&quot;&gt;Pete Hunt’s webpack-howto&lt;/a&gt; I realised that Webpack can be as simple or as complex as you want it to be.&lt;/p&gt;

&lt;p&gt;These days I recommend that people use Webpack even for trivial projects because it’s easy to set up, the defaults are good, and it opens up a huge number of possibilities for optimising your application.&lt;/p&gt;

&lt;h3 id=&quot;offline-plugin--githubcomnekroffline-plugin&quot;&gt;offline-plugin — &lt;a href=&quot;https://github.com/NekR/offline-plugin&quot;&gt;github.com/NekR/offline-plugin&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A highly-configurable Webpack plugin that provides an offline experience for your application using ServiceWorker, with AppCache as a fallback.&lt;/p&gt;

&lt;p&gt;If there’s one thing on this list that you consider adopting, it should be this. The number of people around the world whose sole means of accessing the Internet on a mobile phone is &lt;em&gt;increasing&lt;/em&gt;. We can improve their experience on the web immeasurably by utilising technologies like ServiceWorker &amp;amp; AppCache, and this plugin is a ridiculously easy way to do that.&lt;/p&gt;

&lt;h3 id=&quot;tachyons--tachyonsio&quot;&gt;Tachyons — &lt;a href=&quot;http://tachyons.io/&quot;&gt;tachyons.io&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Functional CSS for humans. Tachyons is a mobile-first responsive CSS framework with a focus on accessibility. Its single-purpose class structure is scalable and practically removes the need to write any custom CSS.&lt;/p&gt;

&lt;p&gt;Tachyons has a relatively small footprint, and is extremely modular so you can easily include only what you need. It’s a good, powerful alternative to heavier frameworks like Bootstrap or Foundation.&lt;/p&gt;

&lt;h3 id=&quot;lighthouse--githubcomgooglechromelighthouse&quot;&gt;Lighthouse — &lt;a href=&quot;https://github.com/GoogleChrome/lighthouse&quot;&gt;github.com/GoogleChrome/lighthouse&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Built by some of the industry’s foremost web performance evangelists, Lighthouse is an automated tool for analysing your web application’s performance and providing insights on developer best practices.&lt;/p&gt;

&lt;p&gt;As well as using it as a once-in-a-while test, I also recommend running Lighthouse on a regular basis — perhaps part of a daily build. Its insights are broad enough to cover a wide range of issues from accessibility to performance, but specific enough that any issues are easily actionable.&lt;/p&gt;

</description>
        <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
        <link>https://wildlyinaccurate.com/web-development-technologies-to-adopt-in-2017/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/web-development-technologies-to-adopt-in-2017/</guid>
        
        <category>preact</category>
        
        <category>react</category>
        
        <category>webpack</category>
        
        <category>service worker</category>
        
        <category>performance</category>
        
        
        <category>Web Development</category>
        
      </item>
    
      <item>
        <title>How we assemble web pages at BBC News</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This post is about the Web Application Framework in use by some teams at the BBC. It is not strictly a framework in that it specifies the contracts between components, rather than providing concrete implementations of the components. For this reason, I prefer to think of it as the Web Application &lt;em&gt;Specification&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the beginning of 2015, a group of developers and technical architects from around the BBC got together with the goal of designing a system for sharing web page components between teams. This came from an acceptance that most of the BBC’s public-facing web products have a similar look &amp;amp; feel, and a desire to improve efficiency through sharing rather than building similar things over and over again.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;Cards or 'promos' from BBC Programmes, BBC Sport, BBC News, and CBBC.&quot; src=&quot;/assets/bbc-promo-similarities.png&quot; srcset=&quot;/assets/r/320/bbc-promo-similarities.png 320w, /assets/r/380/bbc-promo-similarities.png 380w, /assets/r/420/bbc-promo-similarities.png 420w, /assets/r/640/bbc-promo-similarities.png 640w, /assets/r/768/bbc-promo-similarities.png 768w, /assets/r/510/bbc-promo-similarities.png 510w, /assets/r/690/bbc-promo-similarities.png 690w, /assets/r/930/bbc-promo-similarities.png 930w,  /assets/bbc-promo-similarities.png 961w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;Cards or 'promos' from BBC Programmes, BBC Sport, BBC News, and CBBC.&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;In some organisations, technologies are standardised which makes sharing components between teams a trivial task. At the BBC, teams are free to use whichever technologies they like. This means that any component-sharing solution we come up with can’t be tied to a template language, data structure, build system, or even a CSS preprocessor. This meant that building a component library like &lt;a href=&quot;http://rizzo.lonelyplanet.com/styleguide/ui-components&quot;&gt;Lonely Planet’s Rizzo&lt;/a&gt; or &lt;a href=&quot;https://cloudflare.github.io/cf-ui/&quot;&gt;CloudFlare’s CFUI&lt;/a&gt; was out of the picture. We also felt that something like &lt;a href=&quot;http://registry.origami.ft.com/components&quot;&gt;the FT’s Origami&lt;/a&gt; would require too much effort on the users of the components.&lt;/p&gt;

&lt;p&gt;We ended up going back to basics and designed a solution that is based on two premises:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All of our web pages are built out of HTML, CSS, and JavaScript.&lt;/li&gt;
  &lt;li&gt;Most pages have three main parts: the head, which contains metadata and styling; the body, which contains content; and the part at the end of the body, which contains JavaScript.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What we came up with is called the WAF, or &lt;em&gt;Web Application Framework&lt;/em&gt;. It’s a surprisingly simple framework, and is built on top of three core principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Components as endpoints&lt;/li&gt;
  &lt;li&gt;The envelope contract&lt;/li&gt;
  &lt;li&gt;Page composition
&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;components-as-endpoints&quot;&gt;Components as endpoints&lt;/h2&gt;

&lt;p&gt;For components to be shared successfully, they need to be easy to distribute, easy to install, and easy to use. For this, we turned to a delivery mechanism that most developers are familiar with: the web.&lt;/p&gt;

&lt;p&gt;Every component is available at an HTTP endpoint. How that endpoint is built is unimportant, and varies from team to team. Some teams deploy dedicated applications that render specific components. Others make use of an internal component-as-an-endpoint service. Regardless of the implementation, to integrate successfully into the WAF, every component endpoint must to respond to an HTTP GET request with a rendered component that is ready to be inserted into a page.&lt;/p&gt;

&lt;h2 id=&quot;the-envelope-contract&quot;&gt;The envelope contract&lt;/h2&gt;

&lt;p&gt;Having components as endpoints only works if all of the components are returned in the same format. To solve this, we designed the envelope format which imposes a contract on both the component endpoints and the consumers of those endpoints. The contract for component endpoints is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Component endpoints MAY accept parameters which vary the output.&lt;/li&gt;
  &lt;li&gt;Component endpoints MUST return a JSON object with the following properties:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; — an array of strings intended to be inserted into the document &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element. Usually stylesheets, metadata, and blocking scripts.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bodyInline&lt;/code&gt; — a string intended to be inserted somewhere in the document &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bodyLast&lt;/code&gt; — an array of strings intended to be inserted at the end of the document &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. Usually non-blocking scripts.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Component endpoints SHOULD atomise the &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bodyLast&lt;/code&gt; values as much as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example envelope response:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;head&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;link rel=\&quot;stylesheet\&quot; href=\&quot;https://m.files.bbci.co.uk/framework.css\&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;style&amp;gt;.nw-c-top-stories{padding-bottom:2rem}&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bodyInline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;div class=\&quot;nw-c-top-stories\&quot;&amp;gt;[... lots of markup ...]&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bodyLast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;script async defer src=\&quot;https://m.files.bbci.co.uk/modules/bbc-news-front-page/2.0.8/init.js\&quot;&amp;gt;&amp;lt;/script&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;page-composition&quot;&gt;Page composition&lt;/h2&gt;

&lt;p&gt;Now that we have web page components available in a standardised format over HTTP, we need a way to assemble the components into a page. To this end, there is a contract for systems that receive envelopes, which we call &lt;em&gt;page composition&lt;/em&gt; systems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Page composition systems MUST render components in the order they are specified.&lt;/li&gt;
  &lt;li&gt;Page composition systems MUST de-duplicate all &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bodyLast&lt;/code&gt; values.&lt;/li&gt;
  &lt;li&gt;Page composition systems SHOULD fetch components in parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The de-duplicating aspect of a page composition system is important, because page components may share many of the same dependencies. For example, if many components were built using the Bootstrap CSS framework, they would all return a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.css&lt;/code&gt; in their &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;. Rather than render several redundant references to this CSS, the page composition system must ensure that it is rendered only once.&lt;/p&gt;

&lt;p&gt;Many BBC teams have implemented their own page composition systems within their existing web applications. BBC News have developed a page composition service called Mozart which provides a simple configuration-driven way to assemble pages while transparently handling the difficult problems like scaling, logging, and monitoring.&lt;/p&gt;

&lt;h2 id=&quot;piecing-it-all-together&quot;&gt;Piecing it all together&lt;/h2&gt;

&lt;p&gt;This method of assembling web pages is being used successfully in production by several teams at the BBC. The most-used component is a live-updating news feed, initially built for live coverage of sports events on BBC Sport, but now used for live reporting pages on &lt;a href=&quot;http://www.bbc.co.uk/news/live/uk-england-manchester-38860956&quot;&gt;BBC News&lt;/a&gt;, and the &lt;a href=&quot;http://www.bbc.com/persian/live/institutional-38891510&quot;&gt;World Service&lt;/a&gt;. It has also seen some use as a way to display long feeds of content like on the &lt;a href=&quot;http://www.bbc.co.uk/news/topics/8abd564a-2b8e-401c-9916-34982cb67b55/womens-rights&quot;&gt;BBC News topic pages&lt;/a&gt;. Soon BBC News will roll out their new front page using the WAF, which is a good opportunity for us to stress-test the framework and expand it if necessary.&lt;/p&gt;

&lt;p&gt;One of the expansions we’re currently looking at is a mechanism for components to declare their cacheability. This will help to reduce the load on component endpoints and on page composition systems as well.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
        <link>https://wildlyinaccurate.com/how-we-assemble-web-pages-at-bbc-news/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/how-we-assemble-web-pages-at-bbc-news/</guid>
        
        <category>bbc news</category>
        
        
        <category>BBC News</category>
        
      </item>
    
      <item>
        <title>What it's like to work as a developer at BBC News</title>
        <description>&lt;p&gt;The BBC is a pretty large organisation. Today it employs around 20,000 people (actually around 35,000 when you include part-time and fixed-term contract employees) across a huge number of divisions. The &lt;a href=&quot;http://careerssearch.bbc.co.uk/&quot;&gt;BBC Careers website&lt;/a&gt; typically has over 100 vacancies posted on any given day. Before I joined the BBC, I found the sheer scale of it a bit intimidating. Usually I can get an idea of what it’s like to work for a company by reading their job advertisements and their engineering blogs, but with the BBC I was almost completely clueless. In this post I hope to shed some light on what it’s like to work as a developer or tester for BBC News.&lt;/p&gt;

&lt;p&gt;Just a small disclaimer first: from an engineering perspective, the BBC is not like most other companies — it’s more like dozens of smaller companies, each with their own engineering department, working towards a common goal. &lt;a href=&quot;http://www.bbc.com/news&quot;&gt;News&lt;/a&gt;, &lt;a href=&quot;http://www.bbc.com/sport&quot;&gt;Sport&lt;/a&gt;, &lt;a href=&quot;http://www.bbc.co.uk/programmes&quot;&gt;Programmes&lt;/a&gt;, &lt;a href=&quot;http://www.bbc.co.uk/iplayer&quot;&gt;iPlayer&lt;/a&gt;, &lt;a href=&quot;http://www.bbc.co.uk/radio&quot;&gt;Radio&lt;/a&gt;… As digital products, these are all built mostly independently of each other. I work for BBC News, so a lot of what I’ve written may not apply outside of BBC News.&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#teams--projects&quot; id=&quot;markdown-toc-teams--projects&quot;&gt;Teams &amp;amp; projects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#learning--personal-development&quot; id=&quot;markdown-toc-learning--personal-development&quot;&gt;Learning &amp;amp; personal development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#working-hours--annual-leave&quot; id=&quot;markdown-toc-working-hours--annual-leave&quot;&gt;Working hours &amp;amp; annual leave&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#working-environment&quot; id=&quot;markdown-toc-working-environment&quot;&gt;Working environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technologies&quot; id=&quot;markdown-toc-technologies&quot;&gt;Technologies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-perks--local-discounts&quot; id=&quot;markdown-toc-other-perks--local-discounts&quot;&gt;Other perks &amp;amp; local discounts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-joel-test&quot; id=&quot;markdown-toc-the-joel-test&quot;&gt;The Joel Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;teams--projects&quot;&gt;Teams &amp;amp; projects&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: When I say “BBC News”, I mean “BBC News and BBC World Service”. The &lt;a href=&quot;http://www.bbc.co.uk/ws/languages&quot;&gt;30 or so World Service sites&lt;/a&gt; run on the same &lt;strong&gt;Responsive News&lt;/strong&gt; codebase as BBC News. For this reason, the World Service and News teams consider themselves to be part of the same overarching team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are about 6 BBC News development teams at any one time. Teams tend to form around projects which can last anywhere between a month (building a small routing service for the BBC’s RSS feeds) to 9 months (rebuilding the BBC News front page with a new technology stack). As well as developers, each team typically also has a dedicated tester, business analyst, project manager, and product owner.&lt;/p&gt;

&lt;p&gt;In the past, teams were relatively static and people didn’t move around much between projects. More recently though, the teams have been shuffling a lot more. We don’t have a formal team rotation system in place at the moment, but it’s easy to move between teams if you want to work on something new. I’ve worked on 3 different teams over the last two years.&lt;/p&gt;

&lt;p&gt;As well as collaboration between these BBC News teams, we also regularly collaborate with teams from all around the BBC. In the last 3 months alone, my team has worked with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Local News team in Cardiff.&lt;/li&gt;
  &lt;li&gt;The Sport and Live teams, and the Accessibility Champions group in Manchester.&lt;/li&gt;
  &lt;li&gt;The Worldwide team in West London.&lt;/li&gt;
  &lt;li&gt;The Weather, Programmes, and Radio teams in Central London.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;learning--personal-development&quot;&gt;Learning &amp;amp; personal development&lt;/h2&gt;

&lt;p&gt;BBC staff can attend &lt;a href=&quot;http://www.bbc.co.uk/academy&quot;&gt;BBC Academy&lt;/a&gt; courses for free. There are &lt;em&gt;so many&lt;/em&gt; courses available covering subjects across journalism, broadcasting, technology, management, and personal development — just to name a few. You can even earn a MSCS (Masters of Science in Computer Science) by completing Academy courses over a 22-month period.&lt;/p&gt;

&lt;p&gt;We give a &lt;a href=&quot;https://www.pluralsight.com/&quot;&gt;Pluralsight&lt;/a&gt; license to every new starter.&lt;/p&gt;

&lt;p&gt;We have an office library, and an annual budget for purchasing new books.&lt;/p&gt;

&lt;p&gt;We run a &lt;em&gt;developer gathering&lt;/em&gt; every month where developers and testers from BBC News and other teams around the BBC give technical talks and open the floor to discussions.&lt;/p&gt;

&lt;p&gt;We run a similar but less technical &lt;em&gt;town hall&lt;/em&gt; every fortnight where people from all around BBC News (including editorial staff) give 5 minute lightning talks about what’s going on in their world.&lt;/p&gt;

&lt;p&gt;There is a budget for attending external events &amp;amp; conferences.&lt;/p&gt;

&lt;p&gt;Most teams have at least one dedicated &lt;em&gt;learning day&lt;/em&gt; every two weeks where everybody is encouraged to spend their time learning something new.&lt;/p&gt;

&lt;p&gt;On top of learning days, we encourage everybody to dedicate a couple of days each month to personal development.&lt;/p&gt;

&lt;p&gt;We have regular personal development reviews to make sure everybody has what they need to achieve their personal goals.&lt;/p&gt;

&lt;h2 id=&quot;working-hours--annual-leave&quot;&gt;Working hours &amp;amp; annual leave&lt;/h2&gt;

&lt;p&gt;The BBC has a “core hours” system where you are required to work between 10am and 4pm. Other than that, you can pretty much work whichever hours you like so long as you work all of your contracted hours (usually 35 hours per week). I come in at 8am every day and leave at 4pm. Some of my colleagues come in at 10am and leave at 6pm.&lt;/p&gt;

&lt;p&gt;Working from home is common, and is done at your manager’s discretion. Many people work from home one day each week.&lt;/p&gt;

&lt;p&gt;Overtime is actively discouraged. No project is more important than your well-being!&lt;/p&gt;

&lt;p&gt;Taking annual leave is encouraged, with enough notice. If you work on a project with a hard deadline like an election or sporting event, your manager might ask you to avoid taking leave in the weeks leading up to the deadline, but this is not mandatory.&lt;/p&gt;

&lt;h2 id=&quot;working-environment&quot;&gt;Working environment&lt;/h2&gt;

&lt;p&gt;All BBC News engineering staff are located in &lt;a href=&quot;http://www.bbc.co.uk/broadcastinghouse/&quot;&gt;New Broadcasting House&lt;/a&gt;. The entire building is accessible, and has the usual amenities including showers, toilets, and tea points, which are all also accessible.&lt;/p&gt;

&lt;p&gt;The engineering teams work in open plan spaces shared with a variety of other teams including journalists. They are currently spread out across two floors of the building which, if anything, acts as motivation to leave your desk and stretch your muscles out.&lt;/p&gt;

&lt;p&gt;If you find open spaces are detrimental to your productivity, then there are many quiet spaces available throughout the building which can be used at any time. Private rooms can also be booked.&lt;/p&gt;

&lt;h2 id=&quot;technologies&quot;&gt;Technologies&lt;/h2&gt;

&lt;p&gt;Most of our products are web-based and are written in Ruby, JavaScript, and PHP alongside the usual HTML &amp;amp; CSS (usually Sass). We also have some non-web projects which tend to be written in Java and Scala. Teams have the freedom to use whichever technologies they like, provided there is sufficient justification. Here’s a sample of technologies which I’ve personally worked with so far at BBC News:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Responsive News is PHP application which uses &lt;a href=&quot;http://responsivenews.co.uk/post/123104512468/13-tips-for-making-responsive-web-design&quot;&gt;a range of interesting techniques&lt;/a&gt; to support all of the World Service languages and scripts.&lt;/li&gt;
  &lt;li&gt;The BBC News &lt;a href=&quot;https://www.ampproject.org/&quot;&gt;AMP project&lt;/a&gt; and many of the worldwide elections components are powered by an open-source &lt;a href=&quot;https://en.wikipedia.org/wiki/Broker_Pattern&quot;&gt;broker-renderer&lt;/a&gt; Ruby framework called &lt;a href=&quot;https://github.com/BBC-News/alephant&quot;&gt;Alephant&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The BBC News front page is being rebuilt using React and Node.js on a platform developed by BBC Sport.&lt;/li&gt;
  &lt;li&gt;One of our page composition systems is powered by services written in Ruby and Go.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-perks--local-discounts&quot;&gt;Other perks &amp;amp; local discounts&lt;/h2&gt;

&lt;p&gt;Being just down the road from Oxford Circus puts us somewhat dangerously close to dozens of really great shops, restaurants, cafés, and bars. Many of them offer a discount to BBC employees.&lt;/p&gt;

&lt;p&gt;The BBC runs a centralised benefits scheme which offers things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A great pension plan.&lt;/li&gt;
  &lt;li&gt;Dental, health, and travel insurance.&lt;/li&gt;
  &lt;li&gt;Childcare vouchers.&lt;/li&gt;
  &lt;li&gt;Access to &lt;a href=&quot;https://www.cyclescheme.co.uk/&quot;&gt;Cyclescheme&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The ability to buy and sell annual leave.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Secure bike storage is available, or you can just lock your bike to the railing outside the building.&lt;/p&gt;

&lt;h2 id=&quot;the-joel-test&quot;&gt;The Joel Test&lt;/h2&gt;

&lt;p&gt;Here’s how BBC News scores on &lt;a href=&quot;https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/&quot;&gt;The Joel Test&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you use source control?&lt;/strong&gt;&lt;br /&gt;
 Yes. We use Git for almost everything, and SVN for a small number of legacy systems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Can you make a build in one step?&lt;/strong&gt;&lt;br /&gt;
 Yes, all applications can be built in one step. Older applications have a separate deployment process, while newer applications are deployed to integration environments automatically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you make daily builds?&lt;/strong&gt;&lt;br /&gt;
 We practice continuous integration, so there are usually hundreds of builds happening every day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you have a bug database?&lt;/strong&gt;&lt;br /&gt;
 Yes. We aim to keep the backlog tidy, and will often close minor bugs which are not likely to be fixed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you fix bugs before writing new code?&lt;/strong&gt;&lt;br /&gt;
 Most teams prioritise bugs which affect more than 1% of users. Other bugs are prioritised on a case-by-case basis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you have an up-to-date schedule?&lt;/strong&gt;&lt;br /&gt;
 Yes. Schedules range from broad 1-2 year goals to month-by-month feature delivery.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you have a spec?&lt;/strong&gt;&lt;br /&gt;
 We have Business Analysts who work within our teams to define specifications and acceptance criteria.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do programmers have quiet working conditions?&lt;/strong&gt;&lt;br /&gt;
 Not by default, but quiet areas are available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you use the best tools money can buy?&lt;/strong&gt;&lt;br /&gt;
 Yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you have testers?&lt;/strong&gt;&lt;br /&gt;
 Yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do new candidates write code during their interview?&lt;/strong&gt;&lt;br /&gt;
 Yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Do you do hallway usability testing?&lt;/strong&gt;&lt;br /&gt;
 Yes. UI changes are reviewed by our UX teams, and &lt;em&gt;Accessibility Champions&lt;/em&gt; are embedded in each team.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
        <link>https://wildlyinaccurate.com/working-as-a-developer-at-bbc-news/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/working-as-a-developer-at-bbc-news/</guid>
        
        <category>bbc news</category>
        
        <category>culture</category>
        
        
        <category>BBC News</category>
        
      </item>
    
      <item>
        <title>Redefining the BBC News core experience</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Over the last 4 years, the BBC News core experience has been transformed from a speedy 21KB page into a slow &amp;amp; bloated 685KB monster. This was in part due to a lack of performance monitoring and 4 years of feature creep, but also due to a lack of performance-oriented culture throughout the business.&lt;/p&gt;

  &lt;p&gt;I created a lightweight prototype of the BBC News core experience which demonstrates that focusing on the content first and foremost can result in an extremely fast page. I want the BBC and other websites to rethink what the core experience means, and experiment with giving users the power to define their own experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the beginning of 2012 the BBC Responsive News team wrote about how they provide a “core experience” for users by default, and then progressively enhance the page if the browser &lt;a href=&quot;http://responsivenews.co.uk/post/18948466399/cutting-the-mustard&quot;&gt;cuts the mustard&lt;/a&gt;. At the time, this was cutting edge. They were able to build pages that worked on practically any browser without compromising the experience for users on modern browsers. To quote directly from the Responsive News blog:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first tier of support we call the core experience. This works on everything. I’ve seen it work on a Nokia E65, a Blackberry OS4, Kindle 1, a HTC Touch 2 running Win Mobile 6.5, a Samsung U900 Soul, a Commodore Vic20, my nan’s slipper and a toaster just sellotaped to a TV. Likewise, GoogleBot, text-browsers like Lynx, folks that disable JavaScript and so on are all assured a good level of service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This technique is still in use today, and is an integral part of the front-end strategy for all modern BBC News pages. In 2012 it allowed the team to provide a fast and lightweight experience for users on low-end devices. 7 HTTP requests totalling 21KB was all it took to load the core experience of the BBC News front page. All users benefited from this fast initial page load, with modern browsers progressively enhancing the rest of the page after the content was loaded.&lt;/p&gt;

&lt;p&gt;It has been over 4 years since the BBC News core experience was first built, and a lot has changed since then. Today, the core experience consists of 91 HTTP requests totalling 685KB – over 32x heavier than the original core experience. With JavaScript disabled this can be reduced to 137KB – still over 6x heavier.&lt;/p&gt;

&lt;p&gt;The BBC News team is aware of their website’s shortcomings. Back in May 2015 I conducted a huge performance review which I’ve spoken about extensively both &lt;a href=&quot;http://slides.com/wildlyinaccurate/bbc-news-performance-review&quot;&gt;internally&lt;/a&gt; and &lt;a href=&quot;http://slides.com/wildlyinaccurate/bbc-news-performance&quot;&gt;externally&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=nE4LTRfcr94&quot;&gt;video&lt;/a&gt;). A &lt;em&gt;lot&lt;/em&gt; of work has been done over the last year, and many of the issues mentioned in those slides have already been addressed. Despite this, the elephant in the room is still the core experience.&lt;/p&gt;

&lt;p&gt;That’s why when BBC News ran an internal hack day (where people can form teams to work on whatever they like) I took the opportunity to totally redefine the BBC News core experience.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-have-a-core-experience&quot;&gt;Why have a core experience?&lt;/h2&gt;

&lt;p&gt;If you’re not already convinced that having a core experience is a good idea, I’ll attempt to sell it to you now.&lt;/p&gt;

&lt;p&gt;Of the 3.6 billion Internet users today, over 2 billion (65%) are accessing the web from developing countries. This percentage will continue to increase over the coming years, as Internet usage in developing countries is growing over 100x faster than the rest of the world. Yes, you read that right – 100x! In India alone, over 108 million people accessed the Internet for the first time in the last year. That was a 30% increase over the year before.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;Internet growth in India is accelerating at an enormous rate&quot; src=&quot;/assets/internet-growth-in-india.png&quot; width=&quot;800&quot; srcset=&quot;/assets/r/320/internet-growth-in-india.png 320w, /assets/r/380/internet-growth-in-india.png 380w, /assets/r/420/internet-growth-in-india.png 420w, /assets/r/640/internet-growth-in-india.png 640w, /assets/r/768/internet-growth-in-india.png 768w, /assets/r/510/internet-growth-in-india.png 510w, /assets/r/690/internet-growth-in-india.png 690w,  /assets/internet-growth-in-india.png 800w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;Internet growth in India is accelerating at an enormous rate&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Despite huge Internet growth in developing countries, device capabilities and connection speeds are not improving. A typical smartphone sold in India in 2016 has 512MB of RAM, or about one sixth of a typical 2016 smartphone sold in developed countries. Fast connections are still a precious commodity, with nearly 70% of users in developing countries relying on cellular data to access the Internet. What’s interesting is that while this number is much lower in developed countries (10-20%), it has actually been &lt;em&gt;increasing&lt;/em&gt; –not decreasing– over the last few years.&lt;/p&gt;

&lt;p&gt;So what does all of this have to do with a core experience?&lt;/p&gt;

&lt;p&gt;If the majority of your users access the Internet on a mobile connection, then (hopefully) the last thing you want to do is send them bytes they don’t need. Not only can this be costly for your users (it takes 17 hours of minimum wage work in India to purchase 500MB of mobile data), it can also be costly for your business. At BBC News, the difference between a page loading in 4 seconds versus the same page loading in 8 seconds correlates to a 30% increase in users abandoning the page. This is a big deal for content providers like the BBC, and an even bigger deal for online stores.&lt;/p&gt;

&lt;p&gt;Providing a core experience is about being able to reach users all around the world, regardless of connection speed and device capabilities. It’s about thinking beyond the USA &amp;amp; Europe, and welcoming the other 65% of the Internet to your website.&lt;/p&gt;

&lt;h2 id=&quot;the-definition-of-a-core-experience&quot;&gt;The definition of a core experience&lt;/h2&gt;

&lt;p&gt;A core experience should be made up of these five things, in order of importance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The page content.&lt;/li&gt;
  &lt;li&gt;The markup required to make the page accessible.&lt;/li&gt;
  &lt;li&gt;Minimal styling to make the content easily readable – grids, typography, etc.&lt;/li&gt;
  &lt;li&gt;Minimal styling to brand the page – logo, colours.&lt;/li&gt;
  &lt;li&gt;The means to enhance the page where appropriate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A core experience should be &lt;em&gt;just&lt;/em&gt; these things. Everything else is an enhancement.&lt;/p&gt;

&lt;p&gt;The way this has been achieved so far at the BBC has been to create a small &lt;code class=&quot;highlighter-rouge&quot;&gt;core.css&lt;/code&gt; stylesheet containing just the styles for points 3 and 4. Then, provided the browser cuts the mustard, some JavaScript inserts an &lt;code class=&quot;highlighter-rouge&quot;&gt;enhanced.css&lt;/code&gt; stylesheet into the page that contains the rest of the styling. This JavaScript is also responsible for downloading and initialising other JavaScript enhancements, like live updates and localisation services.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-the-bbc-news-core-experience&quot;&gt;The problem with the BBC News core experience&lt;/h2&gt;

&lt;p&gt;Cutting the mustard to provide an enhanced experience is great from a web developer’s point of view: browsers that use &lt;code class=&quot;highlighter-rouge&quot;&gt;enhanced.css&lt;/code&gt; can use modern (in browser terms) standards like CSS3. Likewise, modern JavaScript can be used without the need for polyfills or compatibility libraries. But there’s a problem with this approach: the user has no say in which experience they get.&lt;/p&gt;

&lt;p&gt;The fact that a user has a modern browser does not mean that they have a fast or reliable connection. Providing a core experience is useless if users are going to be forced onto the enhanced experience anyway. Loading the enhanced BBC News front page on a mobile device will cost about 500KB. Opening an article page from there will cost another 370KB. That’s a cost of nearly 1MB of data (or 20 minutes of minimum wage work) just to read a single article.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC News core experience on a wide screen&quot; src=&quot;/assets/bbc-news-core.png&quot; width=&quot;640&quot; srcset=&quot;/assets/r/320/bbc-news-core.png 320w, /assets/r/380/bbc-news-core.png 380w, /assets/r/420/bbc-news-core.png 420w, /assets/r/510/bbc-news-core.png 510w,  /assets/bbc-news-core.png 640w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC News core experience on a wide screen&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;As well as being relatively heavy, the BBC News core experience was designed with small screens in mind. The content is forced into a single column layout, and the width of the primary image is hard-coded to 200px. It looks fine on low-resolution smartphones and feature phones, but on anything larger it starts to look stretched and at the same time somewhat empty.&lt;/p&gt;

&lt;h2 id=&quot;how-did-we-get-here&quot;&gt;How did we get here?&lt;/h2&gt;

&lt;p&gt;The BBC is a relatively unique organisation in that its digital divisions don’t always act like a cohesive unit. The various digital “products” within the BBC (like News, Sport, and Weather) are developed independently and share very little in the way of code or overall vision. If you look closely at what makes up the BBC News core experience, you might notice that a large portion of the CSS, the JavaScript, and the images on the page come from BBC products that are &lt;em&gt;not&lt;/em&gt; BBC News.&lt;/p&gt;

&lt;p&gt;Most of these products live in the “white BBC bar” at the top of the page. This is an area of the page which used to have a very good core experience, but has become bloated over the last year or so in order to accommodate new features. When I look through the network requests of a core page load, there are three products that stand out from the crowd:&lt;/p&gt;

&lt;h4 id=&quot;bbc-id&quot;&gt;BBC iD&lt;/h4&gt;

&lt;p&gt;The ID service allows you to sign in so that you can do things like post comments and receive notifications. It adds 13 HTTP requests to the page –8 of which are scripts– totalling 25KB.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC iD button&quot; src=&quot;/assets/bbc-id.png&quot; width=&quot;617&quot; srcset=&quot;/assets/r/320/bbc-id.png 320w, /assets/r/380/bbc-id.png 380w, /assets/r/420/bbc-id.png 420w, /assets/r/510/bbc-id.png 510w,  /assets/bbc-id.png 617w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC iD button&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h4 id=&quot;notifications&quot;&gt;Notifications&lt;/h4&gt;

&lt;p&gt;The notifications service is the little bell icon at the top. When you’re signed in, it will notify you when your favourite TV shows and radio programmes are updated. Notifications adds 7 HTTP requests to the page, with a weight of 37KB. 2 of these requests are scripts, and 4 are individual SVG icons.&lt;/p&gt;

&lt;p&gt;Clicking the icon results in another 2 requests being made, including a 47KB font.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC Notifications popover&quot; src=&quot;/assets/bbc-notifications.png&quot; width=&quot;617&quot; srcset=&quot;/assets/r/320/bbc-notifications.png 320w, /assets/r/380/bbc-notifications.png 380w, /assets/r/420/bbc-notifications.png 420w, /assets/r/510/bbc-notifications.png 510w,  /assets/bbc-notifications.png 617w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC Notifications popover&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h4 id=&quot;search&quot;&gt;Search&lt;/h4&gt;

&lt;p&gt;Search is the simple text input at the top-right of the page. Only, it’s not simple. When you start to type into the input, you’re presented with a lookahead-esque search interface. The BBC Search interface adds 4 HTTP requests to the page, totalling 14KB.&lt;/p&gt;

&lt;p&gt;Beginning to type into the search input triggers &lt;code class=&quot;highlighter-rouge&quot;&gt;app.min.js&lt;/code&gt; to be loaded in the page, weighing in at a hefty 86KB – or 320KB without compression! Furthermore, two HTTP requests at 4KB each are made on the (debounced) &lt;code class=&quot;highlighter-rouge&quot;&gt;onchange&lt;/code&gt; event. Simply typing the word &lt;em&gt;“bears”&lt;/em&gt; resulted in my browser making 10 additional requests totalling 43KB.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC Search interface&quot; src=&quot;/assets/bbc-search.png&quot; width=&quot;617&quot; srcset=&quot;/assets/r/320/bbc-search.png 320w, /assets/r/380/bbc-search.png 380w, /assets/r/420/bbc-search.png 420w, /assets/r/510/bbc-search.png 510w,  /assets/bbc-search.png 617w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC Search interface&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Perhaps I’m trivialising it, but the answer to how the core experience became so bloated really boils down to this: feature creep, and a lack of monitoring. 4 years ago we set the standard for performance on BBC News, but we never put the controls in place to ensure that the standard stayed the same. Without proper performance monitoring, the BBC News team were completely blind to the deterioration of the website’s performance. The standard has been slipping for years, and we didn’t even know.&lt;/p&gt;

&lt;p&gt;I cannot stress enough how important monitoring is for performance. Good monitoring enables realistic performance budgets, which in turn enable automated warnings and performance alarms. Provided there is a good culture around performance, these things can be used as leverage to prioritise performance and user experience over features and deadlines.&lt;/p&gt;

&lt;p&gt;Good performance monitoring needs to include both synthetic testing and real user monitoring. Today the BBC uses &lt;a href=&quot;https://speedcurve.com/&quot;&gt;SpeedCurve&lt;/a&gt; to run over 22,000 synthetic performance tests each month. We mostly use these to provide a high-level “state of performance”, and to track whether releases have any affect on page performance. We have also previously used &lt;a href=&quot;https://www.soasta.com/performance-monitoring/&quot;&gt;mPulse real user monitoring&lt;/a&gt;, which allowed us to get a much more detailed view of how our pages were performing in the real world.&lt;/p&gt;

&lt;h2 id=&quot;starting-from-scratch&quot;&gt;Starting from scratch&lt;/h2&gt;

&lt;p&gt;Making a slow website fast again is really hard. Sometimes there are easy pickings, like removing unused styles and scripts. Usually though, the problems are like a metastatic cancer: they are spread out far and thin, and you can’t remove them without risking damage to the rest of the system.&lt;/p&gt;

&lt;p&gt;That’s why earlier this week, I started thinking about how I would approach the core experience for BBC News if I were given the opportunity to build it from scratch. No overhead, no requirements, no third-party products on the page.&lt;/p&gt;

&lt;p&gt;What I came up with was a hand-rolled CSS framework using Sass mixins from &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/v4-dev&quot;&gt;Bootstrap v4&lt;/a&gt;. This produces about 3.5KB of CSS (1.5KB gzipped), which is small enough to inline. It also enables the markup to be fairly concise, with very few extraneous elements. From a performance perspective, I think the prototype is a success:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A 7KB HTML document containing all the core content and inlined styles – 80% smaller than the current 36KB core experience document.&lt;/li&gt;
  &lt;li&gt;3 HTTP requests totalling 39KB – 88 fewer requests and 95% fewer bytes.&lt;/li&gt;
  &lt;li&gt;100ms first paint time – 150ms faster (60%) than the current core experience.&lt;/li&gt;
  &lt;li&gt;460ms first paint time – 440ms faster (50%).&lt;/li&gt;
  &lt;li&gt;A much better CPU profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The CPU profile of the lightweight prototype&quot; src=&quot;/assets/lightweight-cpu-profile.png&quot; width=&quot;619&quot; srcset=&quot;/assets/r/320/lightweight-cpu-profile.png 320w, /assets/r/380/lightweight-cpu-profile.png 380w, /assets/r/420/lightweight-cpu-profile.png 420w, /assets/r/510/lightweight-cpu-profile.png 510w,  /assets/lightweight-cpu-profile.png 619w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The CPU profile of the lightweight prototype&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The CPU profile of the current BBC News core experience&quot; src=&quot;/assets/bbc-news-core-cpu-profile.png&quot; srcset=&quot;/assets/r/320/bbc-news-core-cpu-profile.png 320w, /assets/r/380/bbc-news-core-cpu-profile.png 380w, /assets/r/420/bbc-news-core-cpu-profile.png 420w, /assets/r/640/bbc-news-core-cpu-profile.png 640w, /assets/r/768/bbc-news-core-cpu-profile.png 768w, /assets/r/510/bbc-news-core-cpu-profile.png 510w, /assets/r/690/bbc-news-core-cpu-profile.png 690w, /assets/r/930/bbc-news-core-cpu-profile.png 930w,  /assets/bbc-news-core-cpu-profile.png 999w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The CPU profile of the current BBC News core experience&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;While these metrics are interesting, the real proof is in how the prototype performs on a simulated 2G connection: the first paint time is &lt;strong&gt;4.5 seconds&lt;/strong&gt;, and it is fully loaded at &lt;strong&gt;8.5 seconds&lt;/strong&gt;. For comparison, the BBC News core experience has a first paint time of &lt;strong&gt;19.5 seconds&lt;/strong&gt;, and is fully loaded at &lt;strong&gt;52 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I think the prototype is also an improvement on the user experience. The layout is fully responsive and works at all device widths. It also supports responsive images through the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;srcset&lt;/code&gt;, with a sensible medium-quality &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; fallback.&lt;/p&gt;

&lt;p&gt;Here is the finished product on a wide screen:&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The lightweight core experience prototype&quot; src=&quot;/assets/redefining-core-prototype.png&quot; srcset=&quot;/assets/r/320/redefining-core-prototype.png 320w, /assets/r/380/redefining-core-prototype.png 380w, /assets/r/420/redefining-core-prototype.png 420w, /assets/r/640/redefining-core-prototype.png 640w, /assets/r/768/redefining-core-prototype.png 768w, /assets/r/510/redefining-core-prototype.png 510w, /assets/r/690/redefining-core-prototype.png 690w,  /assets/redefining-core-prototype.png 900w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The lightweight core experience prototype&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;As well as creating a truly lightweight core experience, I also wanted to think about how we can put people back in control of their own web experience. We can give people a core experience when we think they need it –for example by detecting screen width or connection speed– and then give them the power to enhance the experience for themselves, should they want to.&lt;/p&gt;

&lt;p&gt;I’ve started to explore these ideas by implementing two controls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A button that (lazily) loads the remaining images on the page. This requires basic JavaScript support, so can be used by most users.&lt;/li&gt;
  &lt;li&gt;Buttons to prefetch article content. This requires a relatively modern browser with service worker support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think there’s certainly more to explore in this area, especially around minimising the amount of interaction required to receive the optimal or desired experience.&lt;/p&gt;

&lt;p&gt;If you’d like to inspect it further, the code for this prototype is &lt;a href=&quot;https://github.com/wildlyinaccurate/news-core-experience&quot;&gt;on GitHub&lt;/a&gt;, and a live demo is available at &lt;a href=&quot;https://wildlyinaccurate.com/news-core-experience/&quot;&gt;https://wildlyinaccurate.com/news-core-experience/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;where-to-from-here&quot;&gt;Where to from here?&lt;/h2&gt;

&lt;p&gt;After all of that, the point I really want to make is this: for a website like BBC News, &lt;strong&gt;content is the only thing that matters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With current trends, very soon the majority of Internet users will be browsing the web on a mobile connection. The lucky ones will have 3G-like speeds, and the others will be lucky to even get 2G-like speeds. As website producers, we need to make it easier for these people to get to the content that they want. By far, the easiest way for us to do that is to give them &lt;em&gt;just the content&lt;/em&gt;. Nothing else.&lt;/p&gt;

&lt;p&gt;BBC World Service is expanding to reach a wider audience by 2020, and most of the users in that audience will come from developing countries. This is a fantastic opportunity to reinvent the BBC’s web experience and tailor it for the users we &lt;em&gt;have&lt;/em&gt; (people using underpowered phones on mobile connections), rather than the users we &lt;em&gt;want&lt;/em&gt; (people using MacBooks on cable connections).&lt;/p&gt;

&lt;p&gt;At BBC News we understand this, and we’re in the middle of building our front page from the ground up with performance at the front of our minds. We’re using the small &amp;amp; efficient &lt;a href=&quot;https://medium.com/@shaunbent/css-at-bbc-sport-part-1-bab546184e66&quot;&gt;Grandstand&lt;/a&gt; CSS framework developed by our colleagues in BBC Sport. We’re also investing in performance monitoring up-front, and trying to drive performance as a key feature rather then an afterthought.&lt;/p&gt;

&lt;p&gt;With HTTPS everywhere being &lt;a href=&quot;http://www.bbc.co.uk/blogs/internet/entries/f6f50d1f-a879-4999-bc6d-6634a71e2e60&quot;&gt;rolled out across the BBC&lt;/a&gt; later this year, the BBC’s web teams have a whole new set of opportunities before them. One of the things I’m most excited about is the ability to start using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;service worker API&lt;/a&gt; to provide a better and more resilient web experience.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0100</pubDate>
        <link>https://wildlyinaccurate.com/redefining-the-bcc-news-core-experience/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/redefining-the-bcc-news-core-experience/</guid>
        
        <category>performance</category>
        
        <category>bbc news</category>
        
        <category>core experience</category>
        
        <category>cut the mustard</category>
        
        
        <category>BBC News</category>
        
      </item>
    
      <item>
        <title>How can we fix open source culture?</title>
        <description>&lt;p&gt;The recent kerfuffle around the &lt;a href=&quot;http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm&quot;&gt;NPM #unpublishgate&lt;/a&gt; and the &lt;a href=&quot;https://medium.com/@boennemann/your-just-considered-harmful-679db7366b95&quot;&gt;Greenkeeper bot impersonation&lt;/a&gt; has got me thinking about the open source community and its culture.&lt;/p&gt;

&lt;p&gt;Sometimes the open source community feels like a wonderful, cooperative, welcoming place. There have been times when maintaining an open source project has given me an enormous sense of satisfaction and well-being. On the best days, complete strangers offer valuable feedback and even actively contribute to my projects.&lt;/p&gt;

&lt;p&gt;On the worst days I feel drained, unappreciated, and even abused. Stephan describes this more concisely than I could right at the bottom of &lt;a href=&quot;https://medium.com/@boennemann/your-just-considered-harmful-679db7366b95&quot;&gt;&lt;em&gt;Your “just” considered harmful&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The reactions to the npm #unpublishgate showed me once more just how far spread entitled and toxic behaviour is in our community. This has to change and being silent or accepting won’t help.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the part of the open source culture that we need to fix. &lt;em&gt;Entitled&lt;/em&gt; and &lt;em&gt;toxic&lt;/em&gt; are not words that I associate with welcoming and inclusive communities. Yet they are completely apt descriptions of behaviour which is common within the open source community.&lt;/p&gt;

&lt;p&gt;I don’t have any solutions to offer. I’m merely venting some frustrations which have been building up for quite some time. But &lt;strong&gt;we need to fix this&lt;/strong&gt;. I don’t want to see this toxic behaviour cause another friend, colleague, or community member to suffer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we fix open source culture?&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Mar 2016 00:00:00 +0100</pubDate>
        <link>https://wildlyinaccurate.com/how-can-we-fix-open-source-culture/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/how-can-we-fix-open-source-culture/</guid>
        
        <category>open source</category>
        
        <category>culture</category>
        
        
        <category>Open Source</category>
        
      </item>
    
      <item>
        <title>Accidental Keyboard Enthusiasm</title>
        <description>&lt;p&gt;Over the last 5 years I’ve managed to collect quite a few mechanical keyboards, to the point where I think I qualify as an (accidental) enthusiast.&lt;/p&gt;

&lt;h3 id=&quot;das-keyboard-3-model-s-ultimate&quot;&gt;Das Keyboard (3) Model S Ultimate&lt;/h3&gt;

&lt;p&gt;This was my first mechanical keyboard. The soft Cherry MX Brown switches make it my favourites for long periods of typing. Even so, I rarely use it any more. At the time of writing, this model is still available &lt;a href=&quot;http://www.daskeyboard.com/model-s-ultimate/&quot;&gt;on the Das Keyboard website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;Das Keyboard Model S Ultimate&quot; src=&quot;/assets/das-keyboard.jpg&quot; srcset=&quot;/assets/r/320/das-keyboard.jpg 320w, /assets/r/380/das-keyboard.jpg 380w, /assets/r/420/das-keyboard.jpg 420w, /assets/r/640/das-keyboard.jpg 640w, /assets/r/768/das-keyboard.jpg 768w, /assets/r/1024/das-keyboard.jpg 1024w, /assets/r/1280/das-keyboard.jpg 1280w, /assets/r/1366/das-keyboard.jpg 1366w, /assets/r/1440/das-keyboard.jpg 1440w, /assets/r/1680/das-keyboard.jpg 1680w, /assets/r/510/das-keyboard.jpg 510w, /assets/r/690/das-keyboard.jpg 690w, /assets/r/930/das-keyboard.jpg 930w, /assets/r/1110/das-keyboard.jpg 1110w,  /assets/das-keyboard.jpg 2048w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;Das Keyboard Model S Ultimate&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;code-keyboard&quot;&gt;CODE Keyboard&lt;/h3&gt;

&lt;p&gt;I was really excited when Jeff Atwood &lt;a href=&quot;http://blog.codinghorror.com/the-code-keyboard/&quot;&gt;announced the CODE keyboard&lt;/a&gt;. I already knew that I wanted my next keyboard to be compact and have backlit keys, so the CODE seemed to come at just the right time. Not long after buying the CODE, I purchased some &lt;a href=&quot;https://www.massdrop.com/buy/keycool-rainbow-keycaps?mode=guest_open&quot;&gt;Keycool rainbow keycaps&lt;/a&gt; so brighten things up.&lt;/p&gt;

&lt;p&gt;The CODE has Cherry MX Clear switches, which makes for a much firmer keyboard than the Das. I find the clears preferable for short bursts of typing, but over long periods they tire my hands out.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;CODE keyboard with Keycool rainbow keycaps&quot; src=&quot;/assets/code-keyboard.jpg&quot; srcset=&quot;/assets/r/320/code-keyboard.jpg 320w, /assets/r/380/code-keyboard.jpg 380w, /assets/r/420/code-keyboard.jpg 420w, /assets/r/640/code-keyboard.jpg 640w, /assets/r/768/code-keyboard.jpg 768w, /assets/r/1024/code-keyboard.jpg 1024w, /assets/r/1280/code-keyboard.jpg 1280w, /assets/r/1366/code-keyboard.jpg 1366w, /assets/r/1440/code-keyboard.jpg 1440w, /assets/r/1680/code-keyboard.jpg 1680w, /assets/r/510/code-keyboard.jpg 510w, /assets/r/690/code-keyboard.jpg 690w, /assets/r/930/code-keyboard.jpg 930w, /assets/r/1110/code-keyboard.jpg 1110w,  /assets/code-keyboard.jpg 2048w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;CODE keyboard with Keycool rainbow keycaps&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;ergodox&quot;&gt;ErgoDox&lt;/h3&gt;

&lt;p&gt;As I’ve mentioned in &lt;a href=&quot;/transitioning-to-a-new-keyboard-layout/&quot;&gt;a previous post&lt;/a&gt;, I decided that I wanted a split-hand keyboard. After much searching, I settled on buying an ErgoDox kit &lt;a href=&quot;https://www.massdrop.com/buy/ergodox?mode=guest_open&quot;&gt;from Massdrop&lt;/a&gt;. This was a really fun project and involved spending plenty of time at the London Hackspace soldering station. The ErgoDox is by far the most comfortable keyboard I’ve used – I like it so much I’ve even placed an order for &lt;a href=&quot;https://www.massdrop.com/buy/infinity-ergodox?mode=guest_open&quot;&gt;the next generation ErgoDox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My ErgoDox has Cherry MX Clear switches. Somehow the clears on the ErgoDox feel much softer than on the CODE, so I’m able to enjoy the feeling of firm keys without the fatigue I experience with the CODE.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;ErgoDox keyboard&quot; src=&quot;/assets/ergodox.jpg&quot; srcset=&quot;/assets/r/320/ergodox.jpg 320w, /assets/r/380/ergodox.jpg 380w, /assets/r/420/ergodox.jpg 420w, /assets/r/640/ergodox.jpg 640w, /assets/r/768/ergodox.jpg 768w, /assets/r/1024/ergodox.jpg 1024w, /assets/r/1280/ergodox.jpg 1280w, /assets/r/1366/ergodox.jpg 1366w, /assets/r/1440/ergodox.jpg 1440w, /assets/r/1680/ergodox.jpg 1680w, /assets/r/510/ergodox.jpg 510w, /assets/r/690/ergodox.jpg 690w, /assets/r/930/ergodox.jpg 930w, /assets/r/1110/ergodox.jpg 1110w,  /assets/ergodox.jpg 2048w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;ErgoDox keyboard&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

</description>
        <pubDate>Sun, 23 Aug 2015 00:00:00 +0100</pubDate>
        <link>https://wildlyinaccurate.com/accidental-keyboard-enthusiasm/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/accidental-keyboard-enthusiasm/</guid>
        
        <category>ergodox</category>
        
        <category>code keyboard</category>
        
        <category>das keyboard</category>
        
        
        <category>Keyboards</category>
        
      </item>
    
      <item>
        <title>Functional Programming Resources</title>
        <description>&lt;h3 id=&quot;articles-papers--blog-posts&quot;&gt;Articles, Papers &amp;amp; Blog Posts&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Academic&amp;quot;, &amp;quot;Paper&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf&quot;&gt;Why Functional Programming Matters (&quot;WhyFP&quot;)&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Considered to be “the” paper describing the importance of functional programming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://raganwald.com/2014/12/20/why-why-functional-programming-matters-matters.html&quot;&gt;Why Why Functional Programming Matters Matters&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A short reflection of &lt;em&gt;Why Functional Programming Matters&lt;/em&gt;, with a particular focus on language design.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Academic&amp;quot;, &amp;quot;Paper&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://nsr.oxfordjournals.org/content/early/2015/07/13/nsr.nwv042.full.pdf&quot;&gt;How Functional Programming Mattered&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;This paper attempts to asses the impact that functional programming has had in the real world, more than 20 years after &lt;em&gt;Why Functional Programming Matters&lt;/em&gt; was written.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://paulstovell.com/blog/reactive-programming&quot;&gt;What is Reactive Programming?&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A very concise explanation of what (functional) reactive programming is.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;, &amp;quot;Intermediate&amp;quot;, &amp;quot;Haskell&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A great illustrated introduction to functors, applicatives and monads.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;, &amp;quot;Intermediate&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types&quot;&gt;The algebra (and calculus!) of algebraic data types&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;An intermediate-level article which explores the connection between algebraic data types and elemendary algebra. A basic understanding of Haskell's data type declaration syntax is assumed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;books&quot;&gt;Books&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Javascript&amp;quot;, &amp;quot;Book&amp;quot;]&quot; data-category=&quot;Books&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://drboolean.gitbooks.io/mostly-adequate-guide/&quot;&gt;Professor Frisby&amp;#39;s Mostly Adequate Guide to Functional Programming&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A general look at the functional paradigm, using JavaScript as the example language. This book is &lt;a href=&quot;https://github.com/DrBoolean/mostly-adequate-guide&quot;&gt;available on GitHub&lt;/a&gt; (under the Attribution-ShareAlike license).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Textbook&amp;quot;, &amp;quot;Book&amp;quot;]&quot; data-category=&quot;Books&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Available for free on MIT Press, this classic textbook covers the foundations of modern programming. Scheme is the main language used, so most of the book is written from a functional perspective.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;videos&quot;&gt;Videos&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;FRP&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://begriffs.com/posts/2015-07-22-essence-of-frp.html&quot;&gt;The Essence of FRP&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Conal Elliott talks about how the definition of FPR has recently become more and more misunderstood. He explains the original definition of FRP and the benefits it is intended to provide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Advanced&amp;quot;, &amp;quot;Haskell&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://skillsmatter.com/skillscasts/4251-lenses-compositional-data-access-and-manipulation&quot;&gt;Lenses: compositional data access and manipulation&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;An introduction to &lt;a href=&quot;http://hackage.haskell.org/package/lens&quot;&gt;lens&lt;/a&gt;, and how lenses can help simplify working with complex data types.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Advanced&amp;quot;, &amp;quot;Haskell&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://www.youtube.com/watch?v=cefnmjtAolY&quot;&gt;Lenses, Folds, and Traversals&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A talk centred around the &lt;a href=&quot;http://hackage.haskell.org/package/lens&quot;&gt;lens package&lt;/a&gt;, covering how to compose lenses using Haskell's regular composition operator (&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;), and illustrating a scheme for performing lens-based folds and traversals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;F#&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://fsharpforfunandprofit.com/rop/&quot;&gt;Railway Oriented Programming&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Scott Wlaschin explains a functional approach to error handling (F#).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://fsharpforfunandprofit.com/fppatterns/&quot;&gt;Functional Programming Design Patterns&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Another talk by Scott Wlaschin where he explains some common functional design patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;other-collections&quot;&gt;Other Collections&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Haskell&amp;quot;, &amp;quot;OCaml&amp;quot;]&quot; data-category=&quot;Other Collections&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://github.com/caiorss/Functional-Programming&quot;&gt;Functional Programming in Haskell and OCaml by Examples&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A collection of tutorials which aim to teach functional programming concepts and patterns by example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Haskell&amp;quot;]&quot; data-category=&quot;Other Collections&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://github.com/bitemyapp/learnhaskell&quot;&gt;How to learn Haskell&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A &lt;em&gt;huge&lt;/em&gt; collection of resources for learning Haskell. The &lt;a href=&quot;https://github.com/bitemyapp/learnhaskell/blob/master/specific_topics.md&quot;&gt;&lt;em&gt;Specific topics for Haskell users&lt;/em&gt;&lt;/a&gt; page is especially useful for understanding specific concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 27 Jul 2015 00:00:00 +0100</pubDate>
        <link>https://wildlyinaccurate.com/functional-programming-resources/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/functional-programming-resources/</guid>
        
        <category>functional programming</category>
        
        
        <category>Functional Programming</category>
        
        <category>Resources</category>
        
      </item>
    
      <item>
        <title>Some Git Things</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#some-notes-on-terminology&quot; id=&quot;markdown-toc-some-notes-on-terminology&quot;&gt;Some notes on terminology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-which-commit-a-reference-points-at&quot; id=&quot;markdown-toc-find-which-commit-a-reference-points-at&quot;&gt;Find which commit a reference points at&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-which-branches-a-commit-is-in&quot; id=&quot;markdown-toc-find-which-branches-a-commit-is-in&quot;&gt;Find which branches a commit is in&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-commits-which-are-in-one-branch-but-not-another&quot; id=&quot;markdown-toc-find-commits-which-are-in-one-branch-but-not-another&quot;&gt;Find commits which are in one branch but not another&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view-details-of-an-object&quot; id=&quot;markdown-toc-view-details-of-an-object&quot;&gt;View details of an object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#print-the-tree-of-a-given-reference&quot; id=&quot;markdown-toc-print-the-tree-of-a-given-reference&quot;&gt;Print the tree of a given reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-the-first-tag-which-contains-a-reference&quot; id=&quot;markdown-toc-find-the-first-tag-which-contains-a-reference&quot;&gt;Find the first tag which contains a reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-dangling-or-unreachable-objects&quot; id=&quot;markdown-toc-find-dangling-or-unreachable-objects&quot;&gt;Find dangling or unreachable objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;some-notes-on-terminology&quot;&gt;Some notes on terminology&lt;/h3&gt;

&lt;p&gt;In case you’re not familiar with some of the terminology used below, here is a small glossary.&lt;/p&gt;

&lt;h5 id=&quot;object&quot;&gt;Object&lt;/h5&gt;

&lt;p&gt;An object in Git is either a blob (file), tree (directory), commit, or tag. All objects in Git have a hash (like &lt;code class=&quot;highlighter-rouge&quot;&gt;99b69df491c0bcf5262a967313fad8be0098352e&lt;/code&gt;) and are connected in a way that allows them to be modelled as a directed acyclic graph.&lt;/p&gt;

&lt;h5 id=&quot;reference&quot;&gt;Reference&lt;/h5&gt;

&lt;p&gt;A reference in Git is a bit like a pointer, or a symlink. References are not objects themselves, and they always point to either an object or another reference. Branches, tags, and HEAD are examples of references.&lt;/p&gt;

&lt;p&gt;You can learn about all of this and much more in my &lt;a href=&quot;/a-hackers-guide-to-git&quot;&gt;Hacker’s Guide to Git&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;find-which-commit-a-reference-points-at&quot;&gt;Find which commit a reference points at&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rev-parse HEAD
0f64e9e759c904553309858070f444e5e64847c4

$ git rev-parse --short HEAD
0f64e9e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-which-branches-a-commit-is-in&quot;&gt;Find which branches a commit is in&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch --contains HEAD
  master
* other-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-commits-which-are-in-one-branch-but-not-another&quot;&gt;Find commits which are in one branch but not another&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline --right-only master...hotfix-1

0f64e9e Apply hotfix patch from #2914 to hotfix-1
bc3bff5 [Cherry-pick] Fix issue #2926
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;exclude-commits-which-were-cherry-picked&quot;&gt;Exclude commits which were cherry-picked&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline --cherry-pick --right-only master...hotfix-1

0f64e9e Apply hotfix patch from #2914 to hotfix-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;view-details-of-an-object&quot;&gt;View details of an object&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -p HEAD
tree af22d0482b89640c95986f3b4663026bcb7f764b
parent bc3bff555f573ac76f0d3e71f0e54d63f50b8434
author Foo Bar &amp;lt;foo@bar.com&amp;gt; 1436294582 +0100
committer Foo Bar &amp;lt;foo@bar.com&amp;gt; 1436294582 +0100

Lorem ipsum dolor sit amet, consectetur adipiscing elit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;show-an-objects-type&quot;&gt;Show an object’s type&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -t HEAD
commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;show-an-objects-size&quot;&gt;Show an object’s size&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -s HEAD
253
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;print-the-tree-of-a-given-reference&quot;&gt;Print the tree of a given reference&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git ls-tree -t -r HEAD
100644 blob 59e004af21a725c9b378001a1b231967f955b992    .gitignore
100644 blob 9f5d366d261317d8ff881ee2945ef2c7960fa2ea    .travis.yml
100644 blob 148fc67781eba8c08bbb4db1fc9e92b9781ec28d    LICENSE
100644 blob 4a2727bb9afae5782510e7ce764608540dd7c04a    Makefile
100644 blob b07b8d5f39d6f62a18a1b0791f33a784ec34556e    README.md
100644 blob 9a994af677b0dfd41b4e3b76b3e7e604003d64e1    Setup.hs
100644 blob 66820894ca2c16725e8527e16785f2eebd89871a    lishp.cabal
040000 tree eda8357ddb73fa384f283291bac84d7fe1bce436    src
040000 tree 6a84cb52f17c7e1ff691fe45f4c70df5269bdab0    src/Lishp
100644 blob 1f7677ed0c7f3e713c7e6a16d94cc3db89d911cd    src/Lishp/Interpreter.hs
100644 blob 1a0fe9394bc2d7789d783a467626301204de700a    src/Lishp/Primitives.hs
100644 blob caf0fcf1cd265436efbaa6cc39338e653197a3ee    src/Lishp/Readline.hs
100644 blob 92cf693d29169066356bed3f1ae794a624db49a5    src/Lishp/Types.hs
100644 blob 82ec4d14e01598f38a083ab2dea326615cd048dd    src/Main.hs
040000 tree ba0974cba2e671b840bb3cefa69569f62cec29b5    test
100644 blob 2589b7aeb1562a3aa951c2fa52f64891db87d1c6    test/assignment.sh
100644 blob d54fa0437e13ba5ee15ad13330ac07b9a6abcdcc    test/equality.sh
100644 blob ee61aa5dffca43032b5aeef6f4e79ff1f9f2df85    test/functions.sh
100644 blob 22fbec9189d2641c590836c4bb19431d3c6d3df3    test/primitives.sh
100644 blob c455f01b3d88b5d510ff4ebb50e93c5d7f8f0b26    test/types.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-the-first-tag-which-contains-a-reference&quot;&gt;Find the first tag which contains a reference&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git describe HEAD
v1.6.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-dangling-or-unreachable-objects&quot;&gt;Find dangling or unreachable objects&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git fsck --lost-found
Checking object directories: 100% (256/256), done.
Checking objects: 100% (153/153), done.
dangling blob b3cc2f0f4666fda6cda0f6527facbb5a7579d29e
dangling commit a621c6a60383ee430c6d21333026dd5aa7a895b0
dangling commit 4c0aab20fa5e6ba1ede09efbd9015dd8d1c54228
dangling blob 6af75568b0a8aee29c47125098b4b6d60a6a8a6f
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 00:00:00 +0100</pubDate>
        <link>https://wildlyinaccurate.com/some-git-things/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/some-git-things/</guid>
        
        <category>git</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Cabal: Installing readline on OSX</title>
        <description>&lt;p&gt;I’ve had trouble installing the &lt;code class=&quot;highlighter-rouge&quot;&gt;readline&lt;/code&gt; package on a few separate OSX installations, so I figured it was worth writing the solution down.&lt;/p&gt;

&lt;p&gt;When running &lt;code class=&quot;highlighter-rouge&quot;&gt;cabal install&lt;/code&gt; for a package which depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;readline&lt;/code&gt; (or simply when running &lt;code class=&quot;highlighter-rouge&quot;&gt;cabal install readline&lt;/code&gt;), Cabal exits with errors along the lines of&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuring readline-1.0.3.0...
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables...
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for GNUreadline.framework... checking for readline... no
checking for tputs in -lncurses... yes
checking for readline in -lreadline... yes
checking for rl_readline_version... yes
checking for rl_begin_undo_group... no
configure: error: readline not found, so this package cannot be built
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem is that Cabal is not aware of the location of the readline lib. My workaround is to specify the location of the lib whenever running these commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cabal install readline --extra-include-dirs=/usr/local/Cellar/readline/6.3.8/include/ \
                         --extra-lib-dirs=/usr/local/Cellar/readline/6.3.8/lib/ \
                         --configure-option=--with-readline-includes=/usr/local/Cellar/readline/6.3.8/include/readline \
                         --configure-option=--with-readline-libraries=/usr/local/Cellar/readline/6.3.8/lib/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your paths may differ slightly if you have a different version of readline installed. You can check this with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls /usr/local/Cellar/readline
6.3.8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Apr 2015 00:00:00 +0100</pubDate>
        <link>https://wildlyinaccurate.com/cabal-installing-readline-on-osx/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/cabal-installing-readline-on-osx/</guid>
        
        <category>cabal</category>
        
        <category>readline</category>
        
        <category>OSX</category>
        
        <category>homebrew</category>
        
        
        <category>Haskell</category>
        
      </item>
    
  </channel>
</rss>
