<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wildly Inaccurate</title>
    <description>A collection of guides &amp;amp; opinions about programming and the state of the web, from a developer at BBC News.
</description>
    <link>https://wildlyinaccurate.com/</link>
    <atom:link href="https://wildlyinaccurate.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 29 Dec 2016 17:05:23 +1300</pubDate>
    <lastBuildDate>Thu, 29 Dec 2016 17:05:23 +1300</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Redefining the BBC News core experience</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Over the last 4 years, the BBC News core experience has been transformed from a speedy 21KB page into a slow &amp;amp; bloated 685KB monster. This was in part due to a lack of performance monitoring and 4 years of feature creep, but also due to a lack of performance-oriented culture throughout the business.&lt;/p&gt;

  &lt;p&gt;I created a lightweight prototype of the BBC News core experience which demonstrates that focusing on the content first and foremost can result in an extremely fast page. I want the BBC and other websites to rethink what the core experience means, and experiment with giving users the power to define their own experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the beginning of 2012 the BBC Responsive News team wrote about how they provide a “core experience” for users by default, and then progressively enhance the page if the browser &lt;a href=&quot;http://responsivenews.co.uk/post/18948466399/cutting-the-mustard&quot;&gt;cuts the mustard&lt;/a&gt;. At the time, this was cutting edge. They were able to build pages that worked on practically any browser without compromising the experience for users on modern browsers. To quote directly from the Responsive News blog:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first tier of support we call the core experience. This works on everything. I’ve seen it work on a Nokia E65, a Blackberry OS4, Kindle 1, a HTC Touch 2 running Win Mobile 6.5, a Samsung U900 Soul, a Commodore Vic20, my nan’s slipper and a toaster just sellotaped to a TV. Likewise, GoogleBot, text-browsers like Lynx, folks that disable JavaScript and so on are all assured a good level of service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This technique is still in use today, and is an integral part of the front-end strategy for all modern BBC News pages. In 2012 it allowed the team to provide a fast and lightweight experience for users on low-end devices. 7 HTTP requests totalling 21KB was all it took to load the core experience of the BBC News front page. All users benefited from this fast initial page load, with modern browsers progressively enhancing the rest of the page after the content was loaded.&lt;/p&gt;

&lt;p&gt;It has been over 4 years since the BBC News core experience was first built, and a lot has changed since then. Today, the core experience consists of 91 HTTP requests totalling 685KB – over 32x heavier than the original core experience. With JavaScript disabled this can be reduced to 137KB – still over 6x heavier.&lt;/p&gt;

&lt;p&gt;The BBC News team is aware of their website’s shortcomings. Back in May 2015 I conducted a huge performance review which I’ve spoken about extensively both &lt;a href=&quot;http://slides.com/wildlyinaccurate/bbc-news-performance-review&quot;&gt;internally&lt;/a&gt; and &lt;a href=&quot;http://slides.com/wildlyinaccurate/bbc-news-performance&quot;&gt;externally&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=nE4LTRfcr94&quot;&gt;video&lt;/a&gt;). A &lt;em&gt;lot&lt;/em&gt; of work has been done over the last year, and many of the issues mentioned in those slides have already been addressed. Despite this, the elephant in the room is still the core experience.&lt;/p&gt;

&lt;p&gt;That’s why when BBC News ran an internal hack day (where people can form teams to work on whatever they like) I took the opportunity to totally redefine the BBC News core experience.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-have-a-core-experience&quot;&gt;Why have a core experience?&lt;/h2&gt;

&lt;p&gt;If you’re not already convinced that having a core experience is a good idea, I’ll attempt to sell it to you now.&lt;/p&gt;

&lt;p&gt;Of the 3.6 billion Internet users today, over 2 billion (65%) are accessing the web from developing countries. This percentage will continue to increase over the coming years, as Internet usage in developing countries is growing over 100x faster than the rest of the world. Yes, you read that right – 100x! In India alone, over 108 million people accessed the Internet for the first time in the last year. That was a 30% increase over the year before.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;Internet growth in India is accelerating at an enormous rate&quot; src=&quot;/assets/internet-growth-in-india.png&quot; width=&quot;800&quot; srcset=&quot;/assets/resized/internet-growth-in-india-320x181.png 320w, /assets/resized/internet-growth-in-india-360x204.png 360w, /assets/resized/internet-growth-in-india-720x408.png 720w,  /assets/internet-growth-in-india.png 800w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;Internet growth in India is accelerating at an enormous rate&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Despite huge Internet growth in developing countries, device capabilities and connection speeds are not improving. A typical smartphone sold in India in 2016 has 512MB of RAM, or about one sixth of a typical 2016 smartphone sold in developed countries. Fast connections are still a precious commodity, with nearly 70% of users in developing countries relying on cellular data to access the Internet. What’s interesting is that while this number is much lower in developed countries (10-20%), it has actually been &lt;em&gt;increasing&lt;/em&gt; –not decreasing– over the last few years.&lt;/p&gt;

&lt;p&gt;So what does all of this have to do with a core experience?&lt;/p&gt;

&lt;p&gt;If the majority of your users access the Internet on a mobile connection, then (hopefully) the last thing you want to do is send them bytes they don’t need. Not only can this be costly for your users (it takes 17 hours of minimum wage work in India to purchase 500MB of mobile data), it can also be costly for your business. At BBC News, the difference between a page loading in 4 seconds versus the same page loading in 8 seconds correlates to a 30% increase in users abandoning the page. This is a big deal for content providers like the BBC, and an even bigger deal for online stores.&lt;/p&gt;

&lt;p&gt;Providing a core experience is about being able to reach users all around the world, regardless of connection speed and device capabilities. It’s about thinking beyond the USA &amp;amp; Europe, and welcoming the other 65% of the Internet to your website.&lt;/p&gt;

&lt;h2 id=&quot;the-definition-of-a-core-experience&quot;&gt;The definition of a core experience&lt;/h2&gt;

&lt;p&gt;A core experience should be made up of these five things, in order of importance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The page content.&lt;/li&gt;
  &lt;li&gt;The markup required to make the page accessible.&lt;/li&gt;
  &lt;li&gt;Minimal styling to make the content easily readable – grids, typography, etc.&lt;/li&gt;
  &lt;li&gt;Minimal styling to brand the page – logo, colours.&lt;/li&gt;
  &lt;li&gt;The means to enhance the page where appropriate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A core experience should be &lt;em&gt;just&lt;/em&gt; these things. Everything else is an enhancement.&lt;/p&gt;

&lt;p&gt;The way this has been achieved so far at the BBC has been to create a small &lt;code class=&quot;highlighter-rouge&quot;&gt;core.css&lt;/code&gt; stylesheet containing just the styles for points 3 and 4. Then, provided the browser cuts the mustard, some JavaScript inserts an &lt;code class=&quot;highlighter-rouge&quot;&gt;enhanced.css&lt;/code&gt; stylesheet into the page that contains the rest of the styling. This JavaScript is also responsible for downloading and initialising other JavaScript enhancements, like live updates and localisation services.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-the-bbc-news-core-experience&quot;&gt;The problem with the BBC News core experience&lt;/h2&gt;

&lt;p&gt;Cutting the mustard to provide an enhanced experience is great from a web developer’s point of view: browsers that use &lt;code class=&quot;highlighter-rouge&quot;&gt;enhanced.css&lt;/code&gt; can use modern (in browser terms) standards like CSS3. Likewise, modern JavaScript can be used without the need for polyfills or compatibility libraries. But there’s a problem with this approach: the user has no say in which experience they get.&lt;/p&gt;

&lt;p&gt;The fact that a user has a modern browser does not mean that they have a fast or reliable connection. Providing a core experience is useless if users are going to be forced onto the enhanced experience anyway. Loading the enhanced BBC News front page on a mobile device will cost about 500KB. Opening an article page from there will cost another 370KB. That’s a cost of nearly 1MB of data (or 20 minutes of minimum wage work) just to read a single article.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC News core experience on a wide screen&quot; src=&quot;/assets/bbc-news-core.png&quot; width=&quot;640&quot; srcset=&quot;/assets/resized/bbc-news-core-320x351.png 320w, /assets/resized/bbc-news-core-360x395.png 360w,  /assets/bbc-news-core.png 640w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC News core experience on a wide screen&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;As well as being relatively heavy, the BBC News core experience was designed with small screens in mind. The content is forced into a single column layout, and the width of the primary image is hard-coded to 200px. It looks fine on low-resolution smartphones and feature phones, but on anything larger it starts to look stretched and at the same time somewhat empty.&lt;/p&gt;

&lt;h2 id=&quot;how-did-we-get-here&quot;&gt;How did we get here?&lt;/h2&gt;

&lt;p&gt;The BBC is a relatively unique organisation in that its digital divisions don’t always act like a cohesive unit. The various digital “products” within the BBC (like News, Sport, and Weather) are developed independently and share very little in the way of code or overall vision. If you look closely at what makes up the BBC News core experience, you might notice that a large portion of the CSS, the JavaScript, and the images on the page come from BBC products that are &lt;em&gt;not&lt;/em&gt; BBC News.&lt;/p&gt;

&lt;p&gt;Most of these products live in the “white BBC bar” at the top of the page. This is an area of the page which used to have a very good core experience, but has become bloated over the last year or so in order to accommodate new features. When I look through the network requests of a core page load, there are three products that stand out from the crowd:&lt;/p&gt;

&lt;h4 id=&quot;bbc-id&quot;&gt;BBC iD&lt;/h4&gt;

&lt;p&gt;The ID service allows you to sign in so that you can do things like post comments and receive notifications. It adds 13 HTTP requests to the page –8 of which are scripts– totalling 25KB.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC iD button&quot; src=&quot;/assets/bbc-id.png&quot; width=&quot;617&quot; srcset=&quot;/assets/resized/bbc-id-320x20.png 320w, /assets/resized/bbc-id-360x22.png 360w,  /assets/bbc-id.png 617w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC iD button&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h4 id=&quot;notifications&quot;&gt;Notifications&lt;/h4&gt;

&lt;p&gt;The notifications service is the little bell icon at the top. When you’re signed in, it will notify you when your favourite TV shows and radio programmes are updated. Notifications adds 7 HTTP requests to the page, with a weight of 37KB. 2 of these requests are scripts, and 4 are individual SVG icons.&lt;/p&gt;

&lt;p&gt;Clicking the icon results in another 2 requests being made, including a 47KB font.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC Notifications popover&quot; src=&quot;/assets/bbc-notifications.png&quot; width=&quot;617&quot; srcset=&quot;/assets/resized/bbc-notifications-320x126.png 320w, /assets/resized/bbc-notifications-360x141.png 360w,  /assets/bbc-notifications.png 617w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC Notifications popover&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h4 id=&quot;search&quot;&gt;Search&lt;/h4&gt;

&lt;p&gt;Search is the simple text input at the top-right of the page. Only, it’s not simple. When you start to type into the input, you’re presented with a lookahead-esque search interface. The BBC Search interface adds 4 HTTP requests to the page, totalling 14KB.&lt;/p&gt;

&lt;p&gt;Beginning to type into the search input triggers &lt;code class=&quot;highlighter-rouge&quot;&gt;app.min.js&lt;/code&gt; to be loaded in the page, weighing in at a hefty 86KB – or 320KB without compression! Furthermore, two HTTP requests at 4KB each are made on the (debounced) &lt;code class=&quot;highlighter-rouge&quot;&gt;onchange&lt;/code&gt; event. Simply typing the word &lt;em&gt;“bears”&lt;/em&gt; resulted in my browser making 10 additional requests totalling 43KB.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The BBC Search interface&quot; src=&quot;/assets/bbc-search.png&quot; width=&quot;617&quot; srcset=&quot;/assets/resized/bbc-search-320x224.png 320w, /assets/resized/bbc-search-360x252.png 360w,  /assets/bbc-search.png 617w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The BBC Search interface&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;Perhaps I’m trivialising it, but the answer to how the core experience became so bloated really boils down to this: feature creep, and a lack of monitoring. 4 years ago we set the standard for performance on BBC News, but we never put the controls in place to ensure that the standard stayed the same. Without proper performance monitoring, the BBC News team were completely blind to the deterioration of the website’s performance. The standard has been slipping for years, and we didn’t even know.&lt;/p&gt;

&lt;p&gt;I cannot stress enough how important monitoring is for performance. Good monitoring enables realistic performance budgets, which in turn enable automated warnings and performance alarms. Provided there is a good culture around performance, these things can be used as leverage to prioritise performance and user experience over features and deadlines.&lt;/p&gt;

&lt;p&gt;Good performance monitoring needs to include both synthetic testing and real user monitoring. Today the BBC uses &lt;a href=&quot;https://speedcurve.com/&quot;&gt;SpeedCurve&lt;/a&gt; to run over 22,000 synthetic performance tests each month. We mostly use these to provide a high-level “state of performance”, and to track whether releases have any affect on page performance. We have also previously used &lt;a href=&quot;https://www.soasta.com/performance-monitoring/&quot;&gt;mPulse real user monitoring&lt;/a&gt;, which allowed us to get a much more detailed view of how our pages were performing in the real world.&lt;/p&gt;

&lt;h2 id=&quot;starting-from-scratch&quot;&gt;Starting from scratch&lt;/h2&gt;

&lt;p&gt;Making a slow website fast again is really hard. Sometimes there are easy pickings, like removing unused styles and scripts. Usually though, the problems are like a metastatic cancer: they are spread out far and thin, and you can’t remove them without risking damage to the rest of the system.&lt;/p&gt;

&lt;p&gt;That’s why earlier this week, I started thinking about how I would approach the core experience for BBC News if I were given the opportunity to build it from scratch. No overhead, no requirements, no third-party products on the page.&lt;/p&gt;

&lt;p&gt;What I came up with was a hand-rolled CSS framework using Sass mixins from &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/v4-dev&quot;&gt;Bootstrap v4&lt;/a&gt;. This produces about 3.5KB of CSS (1.5KB gzipped), which is small enough to inline. It also enables the markup to be fairly concise, with very few extraneous elements. From a performance perspective, I think the prototype is a success:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A 7KB HTML document containing all the core content and inlined styles – 80% smaller than the current 36KB core experience document.&lt;/li&gt;
  &lt;li&gt;3 HTTP requests totalling 39KB – 88 fewer requests and 95% fewer bytes.&lt;/li&gt;
  &lt;li&gt;100ms first paint time – 150ms faster (60%) than the current core experience.&lt;/li&gt;
  &lt;li&gt;460ms first paint time – 440ms faster (50%).&lt;/li&gt;
  &lt;li&gt;A much better CPU profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The CPU profile of the lightweight prototype&quot; src=&quot;/assets/lightweight-cpu-profile.png&quot; width=&quot;619&quot; srcset=&quot;/assets/resized/lightweight-cpu-profile-320x42.png 320w, /assets/resized/lightweight-cpu-profile-360x47.png 360w,  /assets/lightweight-cpu-profile.png 619w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The CPU profile of the lightweight prototype&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The CPU profile of the current BBC News core experience&quot; src=&quot;/assets/bbc-news-core-cpu-profile.png&quot; srcset=&quot;/assets/resized/bbc-news-core-cpu-profile-320x26.png 320w, /assets/resized/bbc-news-core-cpu-profile-360x29.png 360w, /assets/resized/bbc-news-core-cpu-profile-720x58.png 720w, /assets/resized/bbc-news-core-cpu-profile-940x76.png 940w,  /assets/bbc-news-core-cpu-profile.png 999w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The CPU profile of the current BBC News core experience&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;While these metrics are interesting, the real proof is in how the prototype performs on a simulated 2G connection: the first paint time is &lt;strong&gt;4.5 seconds&lt;/strong&gt;, and it is fully loaded at &lt;strong&gt;8.5 seconds&lt;/strong&gt;. For comparison, the BBC News core experience has a first paint time of &lt;strong&gt;19.5 seconds&lt;/strong&gt;, and is fully loaded at &lt;strong&gt;52 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I think the prototype is also an improvement on the user experience. The layout is fully responsive and works at all device widths. It also supports responsive images through the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;srcset&lt;/code&gt;, with a sensible medium-quality &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; fallback.&lt;/p&gt;

&lt;p&gt;Here is the finished product on a wide screen:&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;The lightweight core experience prototype&quot; src=&quot;/assets/redefining-core-prototype.png&quot; srcset=&quot;/assets/resized/redefining-core-prototype-320x252.png 320w, /assets/resized/redefining-core-prototype-360x283.png 360w, /assets/resized/redefining-core-prototype-720x566.png 720w,  /assets/redefining-core-prototype.png 900w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The lightweight core experience prototype&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;As well as creating a truly lightweight core experience, I also wanted to think about how we can put people back in control of their own web experience. We can give people a core experience when we think they need it –for example by detecting screen width or connection speed– and then give them the power to enhance the experience for themselves, should they want to.&lt;/p&gt;

&lt;p&gt;I’ve started to explore these ideas by implementing two controls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A button that (lazily) loads the remaining images on the page. This requires basic JavaScript support, so can be used by most users.&lt;/li&gt;
  &lt;li&gt;Buttons to prefetch article content. This requires a relatively modern browser with service worker support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think there’s certainly more to explore in this area, especially around minimising the amount of interaction required to receive the optimal or desired experience.&lt;/p&gt;

&lt;p&gt;If you’d like to inspect it further, the code for this prototype is &lt;a href=&quot;https://github.com/wildlyinaccurate/news-core-experience&quot;&gt;on GitHub&lt;/a&gt;, and a live demo is available at &lt;a href=&quot;https://wildlyinaccurate.com/news-core-experience/&quot;&gt;https://wildlyinaccurate.com/news-core-experience/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;where-to-from-here&quot;&gt;Where to from here?&lt;/h2&gt;

&lt;p&gt;After all of that, the point I really want to make is this: for a website like BBC News, &lt;strong&gt;content is the only thing that matters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With current trends, very soon the majority of Internet users will be browsing the web on a mobile connection. The lucky ones will have 3G-like speeds, and the others will be lucky to even get 2G-like speeds. As website producers, we need to make it easier for these people to get to the content that they want. By far, the easiest way for us to do that is to give them &lt;em&gt;just the content&lt;/em&gt;. Nothing else.&lt;/p&gt;

&lt;p&gt;BBC World Service is expanding to reach a wider audience by 2020, and most of the users in that audience will come from developing countries. This is a fantastic opportunity to reinvent the BBC’s web experience and tailor it for the users we &lt;em&gt;have&lt;/em&gt; (people using underpowered phones on mobile connections), rather than the users we &lt;em&gt;want&lt;/em&gt; (people using MacBooks on cable connections).&lt;/p&gt;

&lt;p&gt;At BBC News we understand this, and we’re in the middle of building our front page from the ground up with performance at the front of our minds. We’re using the small &amp;amp; efficient &lt;a href=&quot;https://medium.com/@shaunbent/css-at-bbc-sport-part-1-bab546184e66&quot;&gt;Grandstand&lt;/a&gt; CSS framework developed by our colleagues in BBC Sport. We’re also investing in performance monitoring up-front, and trying to drive performance as a key feature rather then an afterthought.&lt;/p&gt;

&lt;p&gt;With HTTPS everywhere being &lt;a href=&quot;http://www.bbc.co.uk/blogs/internet/entries/f6f50d1f-a879-4999-bc6d-6634a71e2e60&quot;&gt;rolled out across the BBC&lt;/a&gt; later this year, the BBC’s web teams have a whole new set of opportunities before them. One of the things I’m most excited about is the ability to start using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;service worker API&lt;/a&gt; to provide a better and more resilient web experience.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +1200</pubDate>
        <link>https://wildlyinaccurate.com/redefining-the-bcc-news-core-experience/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/redefining-the-bcc-news-core-experience/</guid>
        
        <category>performance</category>
        
        <category>bbc news</category>
        
        <category>core experience</category>
        
        <category>cut the mustard</category>
        
        
        <category>BBC News</category>
        
      </item>
    
      <item>
        <title>How can we fix open source culture?</title>
        <description>&lt;p&gt;The recent kerfuffle around the &lt;a href=&quot;http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm&quot;&gt;NPM #unpublishgate&lt;/a&gt; and the &lt;a href=&quot;https://medium.com/@boennemann/your-just-considered-harmful-679db7366b95&quot;&gt;Greenkeeper bot impersonation&lt;/a&gt; has got me thinking about the open source community and its culture.&lt;/p&gt;

&lt;p&gt;Sometimes the open source community feels like a wonderful, cooperative, welcoming place. There have been times when maintaining an open source project has given me an enormous sense of satisfaction and well-being. On the best days, complete strangers offer valuable feedback and even actively contribute to my projects.&lt;/p&gt;

&lt;p&gt;On the worst days I feel drained, unappreciated, and even abused. Stephan describes this more concisely than I could right at the bottom of &lt;a href=&quot;https://medium.com/@boennemann/your-just-considered-harmful-679db7366b95&quot;&gt;&lt;em&gt;Your “just” considered harmful&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The reactions to the npm #unpublishgate showed me once more just how far spread entitled and toxic behaviour is in our community. This has to change and being silent or accepting won’t help.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the part of the open source culture that we need to fix. &lt;em&gt;Entitled&lt;/em&gt; and &lt;em&gt;toxic&lt;/em&gt; are not words that I associate with welcoming and inclusive communities. Yet they are completely apt descriptions of behaviour which is common within the open source community.&lt;/p&gt;

&lt;p&gt;I don’t have any solutions to offer. I’m merely venting some frustrations which have been building up for quite some time. But &lt;strong&gt;we need to fix this&lt;/strong&gt;. I don’t want to see this toxic behaviour cause another friend, colleague, or community member to suffer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we fix open source culture?&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Mar 2016 00:00:00 +1300</pubDate>
        <link>https://wildlyinaccurate.com/how-can-we-fix-open-source-culture/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/how-can-we-fix-open-source-culture/</guid>
        
        <category>open source</category>
        
        <category>culture</category>
        
        
        <category>Open Source</category>
        
      </item>
    
      <item>
        <title>Accidental Keyboard Enthusiasm</title>
        <description>&lt;p&gt;Over the last 5 years I’ve managed to collect quite a few mechanical keyboards, to the point where I think I qualify as an (accidental) enthusiast.&lt;/p&gt;

&lt;h3 id=&quot;das-keyboard-3-model-s-ultimate&quot;&gt;Das Keyboard (3) Model S Ultimate&lt;/h3&gt;

&lt;p&gt;This was my first mechanical keyboard. The soft Cherry MX Brown switches make it my favourites for long periods of typing. Even so, I rarely use it any more. At the time of writing, this model is still available &lt;a href=&quot;http://www.daskeyboard.com/model-s-ultimate/&quot;&gt;on the Das Keyboard website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;Das Keyboard Model S Ultimate&quot; src=&quot;/assets/das-keyboard.jpg&quot; srcset=&quot;/assets/resized/das-keyboard-320x180.jpg 320w, /assets/resized/das-keyboard-360x203.jpg 360w, /assets/resized/das-keyboard-720x405.jpg 720w, /assets/resized/das-keyboard-940x529.jpg 940w, /assets/resized/das-keyboard-1140x641.jpg 1140w, /assets/resized/das-keyboard-1280x720.jpg 1280w, /assets/resized/das-keyboard-1360x765.jpg 1360w, /assets/resized/das-keyboard-1680x945.jpg 1680w, /assets/resized/das-keyboard-1840x1035.jpg 1840w,  /assets/das-keyboard.jpg 2048w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;Das Keyboard Model S Ultimate&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;code-keyboard&quot;&gt;CODE Keyboard&lt;/h3&gt;

&lt;p&gt;I was really excited when Jeff Atwood &lt;a href=&quot;http://blog.codinghorror.com/the-code-keyboard/&quot;&gt;announced the CODE keyboard&lt;/a&gt;. I already knew that I wanted my next keyboard to be compact and have backlit keys, so the CODE seemed to come at just the right time. Not long after buying the CODE, I purchased some &lt;a href=&quot;https://www.massdrop.com/buy/keycool-rainbow-keycaps?mode=guest_open&quot;&gt;Keycool rainbow keycaps&lt;/a&gt; so brighten things up.&lt;/p&gt;

&lt;p&gt;The CODE has Cherry MX Clear switches, which makes for a much firmer keyboard than the Das. I find the clears preferable for short bursts of typing, but over long periods they tire my hands out.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;CODE keyboard with Keycool rainbow keycaps&quot; src=&quot;/assets/code-keyboard.jpg&quot; srcset=&quot;/assets/resized/code-keyboard-320x180.jpg 320w, /assets/resized/code-keyboard-360x203.jpg 360w, /assets/resized/code-keyboard-720x405.jpg 720w, /assets/resized/code-keyboard-940x529.jpg 940w, /assets/resized/code-keyboard-1140x641.jpg 1140w, /assets/resized/code-keyboard-1280x720.jpg 1280w, /assets/resized/code-keyboard-1360x765.jpg 1360w, /assets/resized/code-keyboard-1680x945.jpg 1680w, /assets/resized/code-keyboard-1840x1035.jpg 1840w,  /assets/code-keyboard.jpg 2048w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;CODE keyboard with Keycool rainbow keycaps&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;ergodox&quot;&gt;ErgoDox&lt;/h3&gt;

&lt;p&gt;As I’ve mentioned in &lt;a href=&quot;/transitioning-to-a-new-keyboard-layout/&quot;&gt;a previous post&lt;/a&gt;, I decided that I wanted a split-hand keyboard. After much searching, I settled on buying an ErgoDox kit &lt;a href=&quot;https://www.massdrop.com/buy/ergodox?mode=guest_open&quot;&gt;from Massdrop&lt;/a&gt;. This was a really fun project and involved spending plenty of time at the London Hackspace soldering station. The ErgoDox is by far the most comfortable keyboard I’ve used – I like it so much I’ve even placed an order for &lt;a href=&quot;https://www.massdrop.com/buy/infinity-ergodox?mode=guest_open&quot;&gt;the next generation ErgoDox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My ErgoDox has Cherry MX Clear switches. Somehow the clears on the ErgoDox feel much softer than on the CODE, so I’m able to enjoy the feeling of firm keys without the fatigue I experience with the CODE.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;ErgoDox keyboard&quot; src=&quot;/assets/ergodox.jpg&quot; srcset=&quot;/assets/resized/ergodox-320x180.jpg 320w, /assets/resized/ergodox-360x203.jpg 360w, /assets/resized/ergodox-720x405.jpg 720w, /assets/resized/ergodox-940x529.jpg 940w, /assets/resized/ergodox-1140x641.jpg 1140w, /assets/resized/ergodox-1280x720.jpg 1280w, /assets/resized/ergodox-1360x765.jpg 1360w, /assets/resized/ergodox-1680x945.jpg 1680w, /assets/resized/ergodox-1840x1035.jpg 1840w,  /assets/ergodox.jpg 2048w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;ErgoDox keyboard&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

</description>
        <pubDate>Sun, 23 Aug 2015 00:00:00 +1200</pubDate>
        <link>https://wildlyinaccurate.com/accidental-keyboard-enthusiasm/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/accidental-keyboard-enthusiasm/</guid>
        
        <category>ergodox</category>
        
        <category>code keyboard</category>
        
        <category>das keyboard</category>
        
        
        <category>Keyboards</category>
        
      </item>
    
      <item>
        <title>Functional Programming Resources</title>
        <description>&lt;h3 id=&quot;articles-papers--blog-posts&quot;&gt;Articles, Papers &amp;amp; Blog Posts&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Academic&amp;quot;, &amp;quot;Paper&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf&quot;&gt;Why Functional Programming Matters (&quot;WhyFP&quot;)&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Considered to be “the” paper describing the importance of functional programming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://raganwald.com/2014/12/20/why-why-functional-programming-matters-matters.html&quot;&gt;Why Why Functional Programming Matters Matters&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A short reflection of &lt;em&gt;Why Functional Programming Matters&lt;/em&gt;, with a particular focus on language design.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Academic&amp;quot;, &amp;quot;Paper&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://nsr.oxfordjournals.org/content/early/2015/07/13/nsr.nwv042.full.pdf&quot;&gt;How Functional Programming Mattered&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;This paper attempts to asses the impact that functional programming has had in the real world, more than 20 years after &lt;em&gt;Why Functional Programming Matters&lt;/em&gt; was written.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://paulstovell.com/blog/reactive-programming&quot;&gt;What is Reactive Programming?&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A very concise explanation of what (functional) reactive programming is.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;, &amp;quot;Intermediate&amp;quot;, &amp;quot;Haskell&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A great illustrated introduction to functors, applicatives and monads.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Blog&amp;quot;, &amp;quot;Intermediate&amp;quot;]&quot; data-category=&quot;Articles, Papers &amp;amp; Blog Posts&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types&quot;&gt;The algebra (and calculus!) of algebraic data types&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;An intermediate-level article which explores the connection between algebraic data types and elemendary algebra. A basic understanding of Haskell's data type declaration syntax is assumed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;books&quot;&gt;Books&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Javascript&amp;quot;, &amp;quot;Book&amp;quot;]&quot; data-category=&quot;Books&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://drboolean.gitbooks.io/mostly-adequate-guide/&quot;&gt;Professor Frisby&amp;#39;s Mostly Adequate Guide to Functional Programming&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A general look at the functional paradigm, using JavaScript as the example language. This book is &lt;a href=&quot;https://github.com/DrBoolean/mostly-adequate-guide&quot;&gt;available on GitHub&lt;/a&gt; (under the Attribution-ShareAlike license).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Textbook&amp;quot;, &amp;quot;Book&amp;quot;]&quot; data-category=&quot;Books&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Available for free on MIT Press, this classic textbook covers the foundations of modern programming. Scheme is the main language used, so most of the book is written from a functional perspective.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;videos&quot;&gt;Videos&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;FRP&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://begriffs.com/posts/2015-07-22-essence-of-frp.html&quot;&gt;The Essence of FRP&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Conal Elliott talks about how the definition of FPR has recently become more and more misunderstood. He explains the original definition of FRP and the benefits it is intended to provide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Advanced&amp;quot;, &amp;quot;Haskell&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://skillsmatter.com/skillscasts/4251-lenses-compositional-data-access-and-manipulation&quot;&gt;Lenses: compositional data access and manipulation&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;An introduction to &lt;a href=&quot;http://hackage.haskell.org/package/lens&quot;&gt;lens&lt;/a&gt;, and how lenses can help simplify working with complex data types.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Advanced&amp;quot;, &amp;quot;Haskell&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://www.youtube.com/watch?v=cefnmjtAolY&quot;&gt;Lenses, Folds, and Traversals&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A talk centred around the &lt;a href=&quot;http://hackage.haskell.org/package/lens&quot;&gt;lens package&lt;/a&gt;, covering how to compose lenses using Haskell's regular composition operator (&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;), and illustrating a scheme for performing lens-based folds and traversals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;F#&amp;quot;, &amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://fsharpforfunandprofit.com/rop/&quot;&gt;Railway Oriented Programming&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Scott Wlaschin explains a functional approach to error handling (F#).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Video&amp;quot;]&quot; data-category=&quot;Videos&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;http://fsharpforfunandprofit.com/fppatterns/&quot;&gt;Functional Programming Design Patterns&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;Another talk by Scott Wlaschin where he explains some common functional design patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;other-collections&quot;&gt;Other Collections&lt;/h3&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Haskell&amp;quot;, &amp;quot;OCaml&amp;quot;]&quot; data-category=&quot;Other Collections&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://github.com/caiorss/Functional-Programming&quot;&gt;Functional Programming in Haskell and OCaml by Examples&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A collection of tutorials which aim to teach functional programming concepts and patterns by example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-collection-item=&quot;&quot; data-tags=&quot;[&amp;quot;Haskell&amp;quot;]&quot; data-category=&quot;Other Collections&quot;&gt;
    &lt;h4&gt;
        &lt;a data-title=&quot;&quot; data-url=&quot;&quot; href=&quot;https://github.com/bitemyapp/learnhaskell&quot;&gt;How to learn Haskell&lt;/a&gt;
    &lt;/h4&gt;
    &lt;div data-description=&quot;&quot;&gt;&lt;p&gt;A &lt;em&gt;huge&lt;/em&gt; collection of resources for learning Haskell. The &lt;a href=&quot;https://github.com/bitemyapp/learnhaskell/blob/master/specific_topics.md&quot;&gt;&lt;em&gt;Specific topics for Haskell users&lt;/em&gt;&lt;/a&gt; page is especially useful for understanding specific concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 27 Jul 2015 00:00:00 +1200</pubDate>
        <link>https://wildlyinaccurate.com/functional-programming-resources/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/functional-programming-resources/</guid>
        
        <category>functional programming</category>
        
        
        <category>Functional Programming</category>
        
        <category>Resources</category>
        
      </item>
    
      <item>
        <title>Some Git Things</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#some-notes-on-terminology&quot; id=&quot;markdown-toc-some-notes-on-terminology&quot;&gt;Some notes on terminology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-which-commit-a-reference-points-at&quot; id=&quot;markdown-toc-find-which-commit-a-reference-points-at&quot;&gt;Find which commit a reference points at&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-which-branches-a-commit-is-in&quot; id=&quot;markdown-toc-find-which-branches-a-commit-is-in&quot;&gt;Find which branches a commit is in&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-commits-which-are-in-one-branch-but-not-another&quot; id=&quot;markdown-toc-find-commits-which-are-in-one-branch-but-not-another&quot;&gt;Find commits which are in one branch but not another&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view-details-of-an-object&quot; id=&quot;markdown-toc-view-details-of-an-object&quot;&gt;View details of an object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#print-the-tree-of-a-given-reference&quot; id=&quot;markdown-toc-print-the-tree-of-a-given-reference&quot;&gt;Print the tree of a given reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-the-first-tag-which-contains-a-reference&quot; id=&quot;markdown-toc-find-the-first-tag-which-contains-a-reference&quot;&gt;Find the first tag which contains a reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-dangling-or-unreachable-objects&quot; id=&quot;markdown-toc-find-dangling-or-unreachable-objects&quot;&gt;Find dangling or unreachable objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;some-notes-on-terminology&quot;&gt;Some notes on terminology&lt;/h3&gt;

&lt;p&gt;In case you’re not familiar with some of the terminology used below, here is a small glossary.&lt;/p&gt;

&lt;h5 id=&quot;object&quot;&gt;Object&lt;/h5&gt;

&lt;p&gt;An object in Git is either a blob (file), tree (directory), commit, or tag. All objects in Git have a hash (like &lt;code class=&quot;highlighter-rouge&quot;&gt;99b69df491c0bcf5262a967313fad8be0098352e&lt;/code&gt;) and are connected in a way that allows them to be modelled as a directed acyclic graph.&lt;/p&gt;

&lt;h5 id=&quot;reference&quot;&gt;Reference&lt;/h5&gt;

&lt;p&gt;A reference in Git is a bit like a pointer, or a symlink. References are not objects themselves, and they always point to either an object or another reference. Branches, tags, and HEAD are examples of references.&lt;/p&gt;

&lt;p&gt;You can learn about all of this and much more in my &lt;a href=&quot;/a-hackers-guide-to-git&quot;&gt;Hacker’s Guide to Git&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;find-which-commit-a-reference-points-at&quot;&gt;Find which commit a reference points at&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rev-parse HEAD
0f64e9e759c904553309858070f444e5e64847c4

$ git rev-parse --short HEAD
0f64e9e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-which-branches-a-commit-is-in&quot;&gt;Find which branches a commit is in&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch --contains HEAD
  master
* other-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-commits-which-are-in-one-branch-but-not-another&quot;&gt;Find commits which are in one branch but not another&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline --right-only master...hotfix-1

0f64e9e Apply hotfix patch from #2914 to hotfix-1
bc3bff5 [Cherry-pick] Fix issue #2926
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;exclude-commits-which-were-cherry-picked&quot;&gt;Exclude commits which were cherry-picked&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline --cherry-pick --right-only master...hotfix-1

0f64e9e Apply hotfix patch from #2914 to hotfix-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;view-details-of-an-object&quot;&gt;View details of an object&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -p HEAD
tree af22d0482b89640c95986f3b4663026bcb7f764b
parent bc3bff555f573ac76f0d3e71f0e54d63f50b8434
author Foo Bar &amp;lt;foo@bar.com&amp;gt; 1436294582 +0100
committer Foo Bar &amp;lt;foo@bar.com&amp;gt; 1436294582 +0100

Lorem ipsum dolor sit amet, consectetur adipiscing elit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;show-an-objects-type&quot;&gt;Show an object’s type&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -t HEAD
commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;show-an-objects-size&quot;&gt;Show an object’s size&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -s HEAD
253
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;print-the-tree-of-a-given-reference&quot;&gt;Print the tree of a given reference&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git ls-tree -t -r HEAD
100644 blob 59e004af21a725c9b378001a1b231967f955b992    .gitignore
100644 blob 9f5d366d261317d8ff881ee2945ef2c7960fa2ea    .travis.yml
100644 blob 148fc67781eba8c08bbb4db1fc9e92b9781ec28d    LICENSE
100644 blob 4a2727bb9afae5782510e7ce764608540dd7c04a    Makefile
100644 blob b07b8d5f39d6f62a18a1b0791f33a784ec34556e    README.md
100644 blob 9a994af677b0dfd41b4e3b76b3e7e604003d64e1    Setup.hs
100644 blob 66820894ca2c16725e8527e16785f2eebd89871a    lishp.cabal
040000 tree eda8357ddb73fa384f283291bac84d7fe1bce436    src
040000 tree 6a84cb52f17c7e1ff691fe45f4c70df5269bdab0    src/Lishp
100644 blob 1f7677ed0c7f3e713c7e6a16d94cc3db89d911cd    src/Lishp/Interpreter.hs
100644 blob 1a0fe9394bc2d7789d783a467626301204de700a    src/Lishp/Primitives.hs
100644 blob caf0fcf1cd265436efbaa6cc39338e653197a3ee    src/Lishp/Readline.hs
100644 blob 92cf693d29169066356bed3f1ae794a624db49a5    src/Lishp/Types.hs
100644 blob 82ec4d14e01598f38a083ab2dea326615cd048dd    src/Main.hs
040000 tree ba0974cba2e671b840bb3cefa69569f62cec29b5    test
100644 blob 2589b7aeb1562a3aa951c2fa52f64891db87d1c6    test/assignment.sh
100644 blob d54fa0437e13ba5ee15ad13330ac07b9a6abcdcc    test/equality.sh
100644 blob ee61aa5dffca43032b5aeef6f4e79ff1f9f2df85    test/functions.sh
100644 blob 22fbec9189d2641c590836c4bb19431d3c6d3df3    test/primitives.sh
100644 blob c455f01b3d88b5d510ff4ebb50e93c5d7f8f0b26    test/types.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-the-first-tag-which-contains-a-reference&quot;&gt;Find the first tag which contains a reference&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git describe HEAD
v1.6.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-dangling-or-unreachable-objects&quot;&gt;Find dangling or unreachable objects&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git fsck --lost-found
Checking object directories: 100% (256/256), done.
Checking objects: 100% (153/153), done.
dangling blob b3cc2f0f4666fda6cda0f6527facbb5a7579d29e
dangling commit a621c6a60383ee430c6d21333026dd5aa7a895b0
dangling commit 4c0aab20fa5e6ba1ede09efbd9015dd8d1c54228
dangling blob 6af75568b0a8aee29c47125098b4b6d60a6a8a6f
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 00:00:00 +1200</pubDate>
        <link>https://wildlyinaccurate.com/some-git-things/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/some-git-things/</guid>
        
        <category>git</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Cabal: Installing readline on OSX</title>
        <description>&lt;p&gt;I’ve had trouble installing the &lt;code class=&quot;highlighter-rouge&quot;&gt;readline&lt;/code&gt; package on a few separate OSX installations, so I figured it was worth writing the solution down.&lt;/p&gt;

&lt;p&gt;When running &lt;code class=&quot;highlighter-rouge&quot;&gt;cabal install&lt;/code&gt; for a package which depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;readline&lt;/code&gt; (or simply when running &lt;code class=&quot;highlighter-rouge&quot;&gt;cabal install readline&lt;/code&gt;), Cabal exits with errors along the lines of&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuring readline-1.0.3.0...
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables...
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for GNUreadline.framework... checking for readline... no
checking for tputs in -lncurses... yes
checking for readline in -lreadline... yes
checking for rl_readline_version... yes
checking for rl_begin_undo_group... no
configure: error: readline not found, so this package cannot be built
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem is that Cabal is not aware of the location of the readline lib. My workaround is to specify the location of the lib whenever running these commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cabal install readline --extra-include-dirs=/usr/local/Cellar/readline/6.3.8/include/ \
                         --extra-lib-dirs=/usr/local/Cellar/readline/6.3.8/lib/ \
                         --configure-option=--with-readline-includes=/usr/local/Cellar/readline/6.3.8/include/readline \
                         --configure-option=--with-readline-libraries=/usr/local/Cellar/readline/6.3.8/lib/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your paths may differ slightly if you have a different version of readline installed. You can check this with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls /usr/local/Cellar/readline
6.3.8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Apr 2015 00:00:00 +1200</pubDate>
        <link>https://wildlyinaccurate.com/cabal-installing-readline-on-osx/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/cabal-installing-readline-on-osx/</guid>
        
        <category>cabal</category>
        
        <category>readline</category>
        
        <category>OSX</category>
        
        <category>homebrew</category>
        
        
        <category>Haskell</category>
        
      </item>
    
      <item>
        <title>Transitioning to a new keyboard layout</title>
        <description>&lt;p&gt;I’ve long been considering switching to a different keyboard layout. I tend to type with mostly my forefinger and middle finger, only using my ring and pinky fingers occasionally to stretch out to the modifier keys. Despite this, I still manage to type at around 120WPM on a staggered QWERTY keyboard.&lt;/p&gt;

&lt;p&gt;Thinking back, I probably started teaching myself to type at a reasonable speed around age 10. I’m now in my mid-twenties. My typing technique (or lack thereof) never really bothered me, but 15 years of typing with poor technique has started to take its toll. Recently I’ve started experiencing hand fatigue, and I’m beginning to see early signs of RSI. So I figure now is the perfect time to make some changes to the way I type.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;My first idea was to start using an ergonomic keyboard. The three keyboards which seemed to be most popular at the time were the &lt;a href=&quot;http://www.microsoft.com/hardware/en-gb/p/natural-ergonomic-keyboard-4000&quot;&gt;Microsoft Natural Ergonomic&lt;/a&gt;, the &lt;a href=&quot;https://www.trulyergonomic.com/store/index.php&quot;&gt;Truly Ergonomic&lt;/a&gt;, and the soon-to-be-released &lt;a href=&quot;http://matias.ca/ergopro/pc/&quot;&gt;Matias Ergo Pro&lt;/a&gt;. After trying some keyboards out, I realised that if I was going to do this properly, I would need a split-hand keyboard. This is mostly due to having quite broad shoulders, which means that when my hands are close together (like on a keyboard), my shoulders need to be bunched up in order for my hands to take the correct position. This can be quite uncomfortable, and I often find myself stretching and cracking my shoulders throughout the day.&lt;/p&gt;

&lt;p&gt;The Ergo Pro is the only one of the keyboards I was evaluating which had a split-hand design. Unfortunately it didn’t take long for me to realise that despite the split-hand design, the Ergo Pro wasn’t suitable either. A lot of the pain I get in my hands is due to over-stretching the ring and pinky fingers. The Ergo Pro still follows a fairly standard keyboard layout, which places the modifier keys in a position where you must reach your pinkies out in order to hit them.&lt;/p&gt;

&lt;p&gt;For a while, I was defeated.&lt;/p&gt;

&lt;p&gt;Then, I stumbled across the &lt;a href=&quot;http://ergodox.org/&quot;&gt;ErgoDox&lt;/a&gt;. At a glance, this looked like the perfect keyboard for me. The split-hand design would relieve the tension from my shoulders, the thumb keys would reduce the need to stretch my pinkies to reach the modifier keys, and the non-staggered layout would help reduce the distance my fingers need to travel when changing rows. The fact that the keyboard is fully programmable with open-source firmware was what finally sold me.&lt;/p&gt;

&lt;p&gt;So I ordered myself an &lt;a href=&quot;https://www.massdrop.com/buy/ergodox&quot;&gt;ErgoDox kit from Massdrop&lt;/a&gt;, and set around to building my keyboard.&lt;/p&gt;

&lt;p&gt;I built the keyboard in short bursts when I had spare time on the weekends. All up I probably invested about 10 hours over a period of two months. I made good use of the electronics station at &lt;a href=&quot;https://london.hackspace.org.uk/&quot;&gt;London Hackspace&lt;/a&gt;, and learned a lot about soldering and about electronics in general. I’m fairly confident that I could build another ErgoDox in a matter of hours.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;The finished ErgoDox&quot; src=&quot;/assets/ergodox-1024x551.jpg&quot; srcset=&quot;/assets/resized/ergodox-1024x551-320x172.jpg 320w, /assets/resized/ergodox-1024x551-360x194.jpg 360w, /assets/resized/ergodox-1024x551-720x387.jpg 720w, /assets/resized/ergodox-1024x551-940x506.jpg 940w,  /assets/ergodox-1024x551.jpg 1024w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The finished ErgoDox&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;While the open-source firmware has &lt;a href=&quot;https://github.com/wildlyinaccurate/ergodox-firmware/tree/master/src/keyboard/ergodox/layout&quot;&gt;several layouts available&lt;/a&gt;, Massdrop provides the binary firmware for a QWERTY layout to get you started. I didn’t particularly feel like learning a completely new keyboard layout so I stuck with QWERTY, figuring that the layout of the ErgoDox would solve the fatigue problems I was having. I was wrong.&lt;/p&gt;

&lt;p&gt;Using the ErgoDox, I still felt like my fingers were moving just as much as on a regular keyboard. I used Patrick Gillespie’s amazing &lt;a href=&quot;http://patorjk.com/keyboard-layout-analyzer&quot;&gt;Keyboard Layout Analyzer&lt;/a&gt; to help me figure out what the problem was.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;ErgoDox QWERTY Layout Heat Map&quot; src=&quot;/assets/ergodox-qwerty-heatmap.png&quot; srcset=&quot;/assets/resized/ergodox-qwerty-heatmap-320x122.png 320w, /assets/resized/ergodox-qwerty-heatmap-360x137.png 360w, /assets/resized/ergodox-qwerty-heatmap-720x274.png 720w,  /assets/ergodox-qwerty-heatmap.png 929w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;ErgoDox QWERTY Layout Heat Map&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;The heat map above shows how the QWERTY layout requires you to constantly move your fingers between rows. For me, this was a major cause of discomfort. I decided that I needed to find a more efficient keyboard layout.&lt;/p&gt;

&lt;p&gt;Learning a new keyboard layout isn’t something you can take lightly. There’s a huge time investment required not only to learn the new layout, but to become proficient with it. For me, “proficient” means being able to type at least 100WPM – hopefully even more. So finding the “right” layout was a fairly daunting task.&lt;/p&gt;

&lt;p&gt;After some experimenting and reading others’ thoughts, I finally settled on Colemak. There were a few reasons for this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The layout scores highly in the layout analyser when analysing code (which I spend more time typing than English).&lt;/li&gt;
  &lt;li&gt;The heat map shows reduced movement between rows.&lt;/li&gt;
  &lt;li&gt;Keys used for common keyboard shortcuts (Q, W, Z, X, C, V) remain unchanged.&lt;/li&gt;
  &lt;li&gt;It felt the most “natural” compared to other popular layouts like Workman, Dvorak, and Programmer Dvorak.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;The heat map for a Colemak layout on the ErgoDox&quot; src=&quot;/assets/ergodox-colemak-heatmap1.png&quot; srcset=&quot;/assets/resized/ergodox-colemak-heatmap1-320x122.png 320w, /assets/resized/ergodox-colemak-heatmap1-360x137.png 360w, /assets/resized/ergodox-colemak-heatmap1-720x274.png 720w,  /assets/ergodox-colemak-heatmap1.png 929w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The heat map for a Colemak layout on the ErgoDox&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;An article about &lt;a href=&quot;http://jjt.io/2013/11/25/why-any-developer-should-check-out-the-ergodox-keyboard/&quot;&gt;Jason Trill’s experience with the ErgoDox&lt;/a&gt; convinced me at the last minute to use a modified version of Colemak which puts the symbols on a separate layer around the home row, so you don’t need to move your fingers to the top row to type symbols. In case you’re wondering what I mean by a “separate layer”: layers on a keyboard are a way to have one key type different characters. You actually use layers all the time, even if you don’t realise it. When you hold down the Shift key, you’re activating another layer on your keyboard. When you hit the Caps Lock key, you’re toggling that layer. Layers differ from key combinations (like Control + Alt + Delete) in that they’re implemented in the keyboard’s firmware rather than at the software level.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;The &amp;quot;symbolmod&amp;quot; Colemak layout reduces finger movement even further&quot; src=&quot;/assets/ergodox-colemak-symbolmod-heatmap.png&quot; srcset=&quot;/assets/resized/ergodox-colemak-symbolmod-heatmap-320x122.png 320w, /assets/resized/ergodox-colemak-symbolmod-heatmap-360x137.png 360w, /assets/resized/ergodox-colemak-symbolmod-heatmap-720x274.png 720w,  /assets/ergodox-colemak-symbolmod-heatmap.png 929w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The &amp;quot;symbolmod&amp;quot; Colemak layout reduces finger movement even further&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;p&gt;As you can probably tell from the heat map above, the “Alt Gr” key enables the symbol layer, allowing me to type common symbols without my fingers leaving the home row.&lt;/p&gt;

&lt;h2 id=&quot;what-now&quot;&gt;What now?&lt;/h2&gt;

&lt;p&gt;As of today, I’ve only clocked up about an hour of typing with the new layout. I can only manage about 5WPM at the moment so it can be frustrating to use it for any more than a few minutes at a time.&lt;/p&gt;

&lt;p&gt;Rather than just trying to use the new layout for my day-to-day tasks, I’ve come up with a plan to help me become productive with it first.&lt;/p&gt;

&lt;h3 id=&quot;stage-1---touch-typing&quot;&gt;Stage 1 - Touch Typing&lt;/h3&gt;

&lt;p&gt;Before I do anything else, I need to learn how to touch type with the new layout. At the moment I’m relying on a printed guide, which I constantly refer to in order to find the keys I want. To learn how to touch type, I’m going back to basics:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The quick brown fox jumps over the lazy fox.
The quick brown fox jumps over the lazy fox.
The quick brown fox jumps over the lazy fox.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In theory, the more I use each key, the less I’ll have to look at my guide.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c thumbnail--bleed&quot;&gt;
    
    &lt;img alt=&quot;The layout guide I'm using to type at the moment&quot; src=&quot;/assets/ergodox-layout-guide-1024x598.jpg&quot; srcset=&quot;/assets/resized/ergodox-layout-guide-1024x598-320x187.jpg 320w, /assets/resized/ergodox-layout-guide-1024x598-360x210.jpg 360w, /assets/resized/ergodox-layout-guide-1024x598-720x420.jpg 720w, /assets/resized/ergodox-layout-guide-1024x598-940x549.jpg 940w,  /assets/ergodox-layout-guide-1024x598.jpg 1024w&quot; /&gt;
    

    
    &lt;div class=&quot;c-gl&quot;&gt;
        &lt;small&gt;&lt;i&gt;The layout guide I'm using to type at the moment&lt;/i&gt;&lt;/small&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;stage-2---speed&quot;&gt;Stage 2 - Speed&lt;/h3&gt;

&lt;p&gt;Once I’m familiar enough with the layout, I’ll need to get my speed up. There are plenty of tools available online which give you a list of randomly-chosen words to type, and report your speed at the end. I’ve found that &lt;a href=&quot;http://10fastfingers.com/typing-test/english&quot;&gt;10FastFingers&lt;/a&gt; is good enough for my needs. Hopefully doing this for a week or two will get me typing at least 60WPM again.&lt;/p&gt;

&lt;h3 id=&quot;stage-3---programming&quot;&gt;Stage 3 - Programming&lt;/h3&gt;

&lt;p&gt;I spend a lot of my waking life programming, so I’ll need to become proficient with this new layout in a programming context. Up until this point I will have been typing mostly English words and some symbols on the new layout, so I’ll need some practice programming before I’m ready to use this layout for my day-to-day work.&lt;/p&gt;

&lt;p&gt;At the same time I will be continuing to use the typing speed tools and hopefully get closer to 100WPM.&lt;/p&gt;

&lt;h3 id=&quot;stage-4---shortcuts&quot;&gt;Stage 4 - Shortcuts&lt;/h3&gt;

&lt;p&gt;Once I’ve reached my 100WPM goal and feel comfortable enough using the new layout in a programming context, I’ll start using the new layout at work. The final step to fully converting to the new layout will be to re-learn all of the keyboard shortcuts which are currently part of my muscle memory on a QWERTY layout.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Nov 2014 02:44:00 +1300</pubDate>
        <link>https://wildlyinaccurate.com/transitioning-to-a-new-keyboard-layout/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/transitioning-to-a-new-keyboard-layout/</guid>
        
        <category>colemak</category>
        
        <category>ergodox</category>
        
        <category>keyboard</category>
        
        
        <category>Keyboards</category>
        
      </item>
    
      <item>
        <title>JavaScript Performance: Variable Initialization</title>
        <description>&lt;p&gt;Initializing variables properly in JavaScript can have significant performance benefits. This can be shown with a simple synthetic benchmark.&lt;/p&gt;

&lt;h3 id=&quot;notypejs&quot;&gt;notype.js&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;withtypejs&quot;&gt;withtype.js&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;!--more--&gt;

&lt;h3 id=&quot;benchmark-results&quot;&gt;Benchmark Results&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ time node notype.js
node notype.js  **0.30s** user 0.01s system 100% cpu 0.301 total

$ time node withtype.js
node withtype.js  **0.10s** user 0.00s system 99% cpu 0.109 total
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This particular benchmark may be trivial, but it demonstrates an important point. In &lt;code class=&quot;highlighter-rouge&quot;&gt;notype.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is initialized as &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. This makes it impossible for V8 to optimize the arithmetic within the loop, since the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; must be inferred during the first arithmetic operation. By contrast, the compiler can optimize &lt;code class=&quot;highlighter-rouge&quot;&gt;withtype.js&lt;/code&gt; because &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is known to be a number.&lt;/p&gt;

&lt;p&gt;Running these scripts again with V8’s profiler enabled, we can gain some additional insight into what’s going on under the hood.&lt;/p&gt;

&lt;h3 id=&quot;notypejs-1&quot;&gt;notype.js&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [JavaScript]:
   ticks  total  nonlib   name
    181   63.3%   71.8%  LazyCompile: * /home/joseph/dev/jsperf/var_init_value/notype.js:1
     68   23.8%   27.0%  Stub: BinaryOpStub_ADD_Alloc_SMI
      1    0.3%    0.4%  LazyCompile: ~PropertyDescriptor native v8natives.js:482
      1    0.3%    0.4%  KeyedLoadIC: A keyed load IC from the snapshot
      1    0.3%    0.4%  CallInitialize: args_count: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;withtypejs-1&quot;&gt;withtype.js&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [JavaScript]:
   ticks  total  nonlib   name
     72   66.7%   98.6%  LazyCompile: * /home/joseph/dev/jsperf/var_init_value/withtype.js:1
      1    0.9%    1.4%  LazyCompile: RegExpConstructor native regexp.js:86
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The profiler doesn’t give us the full picture here, but we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;notype.js&lt;/code&gt; is spending a fair amount of time in &lt;code class=&quot;highlighter-rouge&quot;&gt;BinaryOpStub_ADD_Alloc_SMI&lt;/code&gt;, which V8 uses to create SMI (small integer) values.&lt;/p&gt;

&lt;p&gt;It’s possible to dig into this even further by having V8 output the Hydrogen code (the intermediate language which V8 uses to represent the JavaScript code’s abstract syntax tree), or &lt;em&gt;even&lt;/em&gt; further by having V8 output the final assembly code. However, both of these things are outside the scope of this post. (If you’re &lt;em&gt;really&lt;/em&gt; interested, I’ve posted the output &lt;a href=&quot;https://gist.github.com/wildlyinaccurate/423294822c2729743490&quot;&gt;on GitHub&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;If this sort of thing interests you, you might enjoy reading Thorsten Lorenz’s collection of &lt;a href=&quot;https://github.com/thlorenz/v8-perf&quot;&gt;V8 performance resources&lt;/a&gt; or Petka Antonov’s &lt;a href=&quot;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot;&gt;V8 optimization killers&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Aug 2014 11:10:46 +1200</pubDate>
        <link>https://wildlyinaccurate.com/javascript-performance-variable-initialization/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/javascript-performance-variable-initialization/</guid>
        
        <category>javascript</category>
        
        <category>performance</category>
        
        <category>v8</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>A Hacker's Guide to Git</title>
        <description>&lt;p&gt;&lt;em&gt;A Hacker’s Guide to Git&lt;/em&gt; is now available as an e-book. You can purchase it &lt;a href=&quot;https://leanpub.com/a-hackers-guide-to-git&quot;&gt;on Leanpub&lt;/a&gt;.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#repositories&quot; id=&quot;markdown-toc-repositories&quot;&gt;Repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tree-objects&quot; id=&quot;markdown-toc-tree-objects&quot;&gt;Tree Objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#commits&quot; id=&quot;markdown-toc-commits&quot;&gt;Commits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#branches&quot; id=&quot;markdown-toc-branches&quot;&gt;Branches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tags&quot; id=&quot;markdown-toc-tags&quot;&gt;Tags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#merging&quot; id=&quot;markdown-toc-merging&quot;&gt;Merging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rebasing&quot; id=&quot;markdown-toc-rebasing&quot;&gt;Rebasing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cherry-picking&quot; id=&quot;markdown-toc-cherry-picking&quot;&gt;Cherry-Picking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rebasing-continued&quot; id=&quot;markdown-toc-rebasing-continued&quot;&gt;Rebasing (Continued)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#remotes&quot; id=&quot;markdown-toc-remotes&quot;&gt;Remotes&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cloning&quot; id=&quot;markdown-toc-cloning&quot;&gt;Cloning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pushing&quot; id=&quot;markdown-toc-pushing&quot;&gt;Pushing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#remote-tracking-branches&quot; id=&quot;markdown-toc-remote-tracking-branches&quot;&gt;Remote-Tracking Branches&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fetching&quot; id=&quot;markdown-toc-fetching&quot;&gt;Fetching&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pulling&quot; id=&quot;markdown-toc-pulling&quot;&gt;Pulling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#toolkit&quot; id=&quot;markdown-toc-toolkit&quot;&gt;Toolkit&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#git-reflog&quot; id=&quot;markdown-toc-git-reflog&quot;&gt;git-reflog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-fsck&quot; id=&quot;markdown-toc-git-fsck&quot;&gt;git-fsck&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-stash&quot; id=&quot;markdown-toc-git-stash&quot;&gt;git-stash&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-describe&quot; id=&quot;markdown-toc-git-describe&quot;&gt;git-describe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-rev-parse&quot; id=&quot;markdown-toc-git-rev-parse&quot;&gt;git-rev-parse&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git-bisect&quot; id=&quot;markdown-toc-git-bisect&quot;&gt;git-bisect&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Git is currently the most widely used version control system in the world, mostly thanks to GitHub. By that measure, I’d argue that it’s also the most misunderstood version control system in the world.&lt;/p&gt;

&lt;p&gt;This statement probably doesn’t ring true straight away because on the surface, Git is pretty simple. It’s really easy to pick up if you’ve come from another VCS like Subversion or Mercurial. It’s even relatively easy to pick up if you’ve never used a VCS before. Everybody understands adding, committing, pushing and pulling; but this is about as far as Git’s simplicity goes. Past this point, Git is shrouded by fear, uncertainty and doubt.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Once you start talking about branching, merging, rebasing, multiple remotes, remote-tracking branches, detached HEAD states… Git becomes less of an easily-understood tool and more of a feared deity. Anybody who talks about no-fast-forward merges is regarded with quiet superstition, and even veteran hackers would rather stay away from rebasing “just to be safe”.&lt;/p&gt;

&lt;p&gt;I think a big part of this is due to many people coming to Git from a conceptually simpler VCS – probably Subversion – and trying to apply their past knowledge to Git. It’s easy to understand why people want to do this. Subversion is simple, right? It’s just files and folders. Commits are numbered sequentially. Even branching and tagging is simple – it’s just like taking a backup of a folder.&lt;/p&gt;

&lt;p&gt;Basically, Subversion fits in nicely with our existing computing paradigms. Everybody understands files and folders. Everybody knows that revision #10 was the one after #9 and before #11. But these paradigms break down when you try to apply them to Git.&lt;/p&gt;

&lt;p&gt;That’s why trying to understand Git in this way is wrong. Git doesn’t work like Subversion at all. Which can be pretty confusing. You can add and remove files. You can commit your changes. You can generate diffs and patches which look just like the ones that Subversion generates. So how can something which appears so similar really be so different?&lt;/p&gt;

&lt;p&gt;Complex systems like Git become much easier to understand once you figure out how they really work. The goal of this guide is to shed some light on how Git works under the hood. We’re going to take a look at some of Git’s core concepts including its basic object storage, how commits work, how branches and tags work, and we’ll look at the different kinds of merging in Git including the much-feared rebase. Hopefully at the end of it all, you’ll have a solid understanding of these concepts and will be able to use some of Git’s more advanced features with confidence.&lt;/p&gt;

&lt;p&gt;It’s worth noting at this point that this guide is not intended to be a beginner’s introduction to Git. This guide was written for people who already use Git, but would like to better understand it by taking a peek under the hood, and learn a few neat tricks along the way. With that said, let’s begin.&lt;/p&gt;

&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;At the core of Git, like other VCS, is the repository. A Git repository is really just a simple key-value data store. This is where Git stores, among other things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Blobs&lt;/strong&gt;, which are the most basic data type in Git. Essentially, a blob is just a bunch of bytes; usually a binary representation of a file.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tree objects&lt;/strong&gt;, which are a bit like directories. Tree objects can contain pointers to blobs and other tree objects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Commit objects&lt;/strong&gt;, which point to a single tree object, and contain some metadata including the commit author and any parent commits.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tag objects&lt;/strong&gt;, which point to a single commit object, and contain some metadata.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;, which are pointers to a single object (usually a commit or tag object).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don’t need to worry about all of this just yet; we’ll cover these things in more detail later.&lt;/p&gt;

&lt;p&gt;The important thing to remember about a Git repository is that it exists entirely in a single &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; directory in your project root. There is no central repository like in Subversion or CVS. This is what allows Git to be a &lt;em&gt;distributed&lt;/em&gt; version control system – everybody has their own self-contained version of a repository.&lt;/p&gt;

&lt;p&gt;You can initialize a Git repository anywhere with the &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; command. Take a look inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder to get a glimpse of what a repository looks like.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
Initialized empty Git repository in /home/demo/demo-repository/.git/
$ ls -l .git
total 32
drwxrwxr-x 2 demo demo 4096 May 24 20:10 branches
-rw-rw-r-- 1 demo demo 92 May 24 20:10 config
-rw-rw-r-- 1 demo demo 73 May 24 20:10 description
-rw-rw-r-- 1 demo demo 23 May 24 20:10 HEAD
drwxrwxr-x 2 demo demo 4096 May 24 20:10 hooks
drwxrwxr-x 2 demo demo 4096 May 24 20:10 info
drwxrwxr-x 4 demo demo 4096 May 24 20:10 objects
drwxrwxr-x 4 demo demo 4096 May 24 20:10 refs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The important directories are &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/objects&lt;/code&gt;, where Git stores all of its objects; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs&lt;/code&gt;, where Git stores all of its references.&lt;/p&gt;

&lt;p&gt;We’ll see how all of this fits together as we learn about the rest of Git. For now, let’s learn a little bit more about tree objects.&lt;/p&gt;

&lt;h2 id=&quot;tree-objects&quot;&gt;Tree Objects&lt;/h2&gt;

&lt;p&gt;A tree object in Git can be thought of as a directory. It contains a list of blobs (files) and other tree objects (sub-directories).&lt;/p&gt;

&lt;p&gt;Imagine we had a simple repository, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; file and a &lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt; directory containing a &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.c&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;README
src/
    hello.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would be represented by two tree objects: one for the root directory, and another for the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt; directory. Here’s what they would look like.&lt;/p&gt;

&lt;h4 id=&quot;tree-4da454&quot;&gt;tree 4da454..&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;blob&lt;/td&gt;
      &lt;td&gt;976165..&lt;/td&gt;
      &lt;td&gt;README&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tree&lt;/td&gt;
      &lt;td&gt;81fc8b..&lt;/td&gt;
      &lt;td&gt;src&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;tree81fc8b&quot;&gt;tree 81fc8b..&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;blob&lt;/td&gt;
      &lt;td&gt;1febef..&lt;/td&gt;
      &lt;td&gt;hello.c&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we draw the blobs (in green) as well as the tree objects (in blue), we end up with a diagram that looks a lot like our directory structure.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/tree-graph.png&quot; width=&quot;591&quot; srcset=&quot;/assets/resized/tree-graph-320x248.png 320w, /assets/resized/tree-graph-360x279.png 360w,  /assets/tree-graph.png 591w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Notice how given the root tree object, we can recurse through every tree object to figure out the state of the entire working tree. The root tree object, therefore, is essentially a snapshot of your repository at a given time. Usually when Git refers to “the tree”, it is referring to the root tree object.&lt;/p&gt;

&lt;p&gt;Now let’s learn how you can track the history of your repository with commit objects.&lt;/p&gt;

&lt;h2 id=&quot;commits&quot;&gt;Commits&lt;/h2&gt;

&lt;p&gt;A commit object is essentially a pointer that contains a few pieces of important metadata. The commit itself has a hash, which is built from a combination of the metadata that it contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The hash of the tree (the root tree object) at the time of the commit. As we learned in &lt;em&gt;Tree Objects&lt;/em&gt;, this means that with a single commit, Git can build the entire working tree by recursing into the tree.&lt;/li&gt;
  &lt;li&gt;The hash of any parent commits. This is what gives a repository its history: every commit has a parent commit, all the way back to the very first commit.&lt;/li&gt;
  &lt;li&gt;The author’s name and email address, and the time that the changes were authored.&lt;/li&gt;
  &lt;li&gt;The committer’s name and email address, and the time that the commit was made.&lt;/li&gt;
  &lt;li&gt;The commit message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see a commit object in action by creating a simple repository.&lt;/p&gt;

&lt;pre&gt;
 $ git init
Initialized empty Git repository in /home/demo/simple-repository/.git/
 $ echo 'This is the readme.' &amp;gt; README
 $ git add README
 $ git commit -m &quot;First commit&quot;
[master (root-commit) &lt;strong&gt;d409ca7&lt;/strong&gt;] First commit
 1 file changed, 1 insertion(+)
 create mode 100644 README
&lt;/pre&gt;

&lt;p&gt;When you create a commit, Git will give you the hash of that commit. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;git show&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--format=raw&lt;/code&gt; flag, we can see this newly-created commit’s metadata.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show --format=raw d409ca7

commit d409ca76bc919d9ca797f39ae724b7c65700fd27
tree 9d073fcdfaf07a39631ef94bcb3b8268bc2106b1
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400

    First commit

diff --git a/README b/README
new file mode 100644
index 0000000..9761654
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+This is the readme.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice how although we referenced the commit by the partial hash &lt;code class=&quot;highlighter-rouge&quot;&gt;d409ca7&lt;/code&gt;, Git was able to figure out that we actually meant &lt;code class=&quot;highlighter-rouge&quot;&gt;d409ca76bc919d9ca797f39ae724b7c65700fd27&lt;/code&gt;. This is because the hashes that Git assigns to objects are unique enough to be identified by the first few characters. You can see here that Git is able to find this commit with as few as four characters; after which point Git will tell you that the reference is ambiguous.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show d409c
$ git show d409
$ git show d40
fatal: ambiguous argument 'd40': unknown revision or path not in the working tree.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;In previous sections, we saw how objects in Git are identified by a hash. Since we want to manipulate objects quite often in Git, it’s important to know their hashes. You could run all your Git commands referencing each object’s hash, like &lt;code class=&quot;highlighter-rouge&quot;&gt;git show d409ca7&lt;/code&gt;, but that would require you to remember the hash of every object you want to manipulate.&lt;/p&gt;

&lt;p&gt;To save you from having to memorize these hashes, Git has references, or “refs”. A reference is simply a file stored somewhere in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs&lt;/code&gt;, containing the hash of a commit object.&lt;/p&gt;

&lt;p&gt;To carry on the example from &lt;em&gt;Commits&lt;/em&gt;, let’s figure out the hash of “First commit” using references only.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; has told us that we are on branch &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. As we will learn in a later section, branches are just references. We can see this by looking in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/heads&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -l .git/refs/heads/
total 4
-rw-rw-r-- 1 demo demo 41 May 24 20:02 master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can easily see which commit &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; points to by reading the file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/refs/heads/master
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sure enough, &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; contains the hash of the “First commit” object.&lt;/p&gt;

&lt;p&gt;Of course, it’s possible to simplify this process. Git can tell us which commit a reference is pointing to with the &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rev-parse&lt;/code&gt; commands.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show --oneline master
d409ca7 First commit
$ git rev-parse master
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git also has a special reference, &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;. This is a “symbolic” reference which points to the tip of the current branch rather than an actual commit. If we inspect &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;, we see that it simply points to &lt;code class=&quot;highlighter-rouge&quot;&gt;refs/head/master&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/HEAD
ref: refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is actually possible for &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; to point directly to a commit object. When this happens, Git will tell you that you are in a “detached HEAD state”. We’ll talk a bit more about this later, but really all this means is that you’re not currently on a branch.&lt;/p&gt;

&lt;h2 id=&quot;branches&quot;&gt;Branches&lt;/h2&gt;

&lt;p&gt;Git’s branches are often touted as being one of its strongest features. This is because branches in Git are very lightweight, compared to other VCS where a branch is usually a clone of the entire repository.&lt;/p&gt;

&lt;p&gt;The reason branches are so lightweight in Git is because they’re just references. We saw in &lt;em&gt;References&lt;/em&gt; that the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch was simply a file inside &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/heads&lt;/code&gt;. Let’s create another branch to see what happens under the hood.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch test-branch
$ cat .git/refs/heads/test-branch
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s as simple as that. Git has created a new entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/heads&lt;/code&gt; and pointed it at the current commit.&lt;/p&gt;

&lt;p&gt;We also saw in &lt;em&gt;References&lt;/em&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; is Git’s reference to the current branch. Let’s see that in action by switching to our newly-created branch.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/HEAD
ref: refs/heads/master
$ git checkout test-branch
Switched to branch 'test-branch'
$ cat .git/HEAD
ref: refs/heads/test-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you create a new commit, Git simply changes the current branch to point to the newly-created commit object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'Some more information here.' &amp;gt;&amp;gt; README
$ git add README
$ git commit -m &quot;Update README in a new branch&quot;
[test-branch 7604067] Update README in a new branch
 1 file changed, 1 insertion(+)
$ cat .git/refs/heads/test-branch
76040677d717fd090e327681064ac6af9f0083fb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Later on we’ll look at the difference between &lt;strong&gt;local branches&lt;/strong&gt; and &lt;strong&gt;remote-tracking branches&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tags&quot;&gt;Tags&lt;/h2&gt;

&lt;p&gt;There are two types of tags in Git – &lt;strong&gt;lightweight tags&lt;/strong&gt; and &lt;strong&gt;annotated tags&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the surface, these two types of tags look very similar. Both of them are references stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/tags&lt;/code&gt;. However, that’s about as far as the similarities go. Let’s create a lightweight tag to see how they work.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git tag 1.0-lightweight
$ cat .git/refs/tags/1.0-lightweight
d409ca76bc919d9ca797f39ae724b7c65700fd27
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see that Git has created a tag reference which points to the current commit. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;git tag&lt;/code&gt; will create a lightweight tag. Note that this is &lt;strong&gt;not a tag object&lt;/strong&gt;. We can verify this by using &lt;code class=&quot;highlighter-rouge&quot;&gt;git cat-file&lt;/code&gt; to inspect the tag.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -p 1.0-lightweight
tree 9d073fcdfaf07a39631ef94bcb3b8268bc2106b1
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400

First commit
$ git cat-file -p d409ca7
tree 9d073fcdfaf07a39631ef94bcb3b8268bc2106b1
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1400976134 -0400

First commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can see that as far as Git is concerned, the &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0-lightweight&lt;/code&gt; tag and the &lt;code class=&quot;highlighter-rouge&quot;&gt;d409ca7&lt;/code&gt; commit are the &lt;em&gt;same object&lt;/em&gt;. That’s because the lightweight tag is &lt;em&gt;only a reference&lt;/em&gt; to the commit object.&lt;/p&gt;

&lt;p&gt;Let’s compare this to an annotated tag.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git tag -a -m &quot;Tagged 1.0&quot; 1.0
$ cat .git/refs/tags/1.0
10589beae63c6e111e99a0cd631c28479e2d11bf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ve passed the &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;--annotate&lt;/code&gt;) flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;git tag&lt;/code&gt; to create an annotated tag. Notice how Git creates a reference for the tag just like the lightweight tag, but this reference is not pointing to the same object as the lightweight tag. Let’s use &lt;code class=&quot;highlighter-rouge&quot;&gt;git cat-file&lt;/code&gt; again to inspect the object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cat-file -p 1.0
object d409ca76bc919d9ca797f39ae724b7c65700fd27
type commit
tag 1.0
tagger Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1401029229 -0400

Tagged 1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a &lt;strong&gt;tag object&lt;/strong&gt;, separate to the commit that it points to. As well as containing a pointer to a commit, tag objects also store a tag message and information about the tagger. Tag objects can also be signed with a &lt;a href=&quot;http://en.wikipedia.org/wiki/GNU_Privacy_Guard&quot; title=&quot;GNU Privacy Guard&quot;&gt;GPG key&lt;/a&gt; to prevent commit or email spoofing.&lt;/p&gt;

&lt;p&gt;Aside from being GPG-signable, there are a few reasons why annotated tags are preferred over lightweight tags.&lt;/p&gt;

&lt;p&gt;Probably the most important reason is that annotated tags have their own author information. This can be helpful when you want to know who created the tag, rather than who created the commit that the tag is referring to.&lt;/p&gt;

&lt;p&gt;Annotated tags are also timestamped. Since new versions are usually tagged right before they are released, an annotated tag can tell you when a version was released rather than just when the final commit was made.&lt;/p&gt;

&lt;h2 id=&quot;merging&quot;&gt;Merging&lt;/h2&gt;

&lt;p&gt;Merging in Git is the process of joining two histories (usually branches) together. Let’s start with a simple example. Say you’ve created a new feature branch from &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, and done some work on it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -b feature-branch
Switched to a new branch 'feature-branch'
$ vim feature.html
$ git commit -am &quot;Finished the new feature&quot;
[feature-branch 0c21359] Finished the new feature
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the same time, you need to fix an urgent bug. So you create a &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; branch from &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, and do some work in there.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
Switched to branch 'master'
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -am &quot;Fixed some wording&quot;
[hotfix 40837f1] Fixed some wording
 1 file changed, 1 insertion(+), 1 deletion(-)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, the history will look something like this.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/branch-feature-hotfix.png&quot; width=&quot;631&quot; srcset=&quot;/assets/resized/branch-feature-hotfix-320x136.png 320w, /assets/resized/branch-feature-hotfix-360x153.png 360w,  /assets/branch-feature-hotfix.png 631w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Now you want to bring the bug fix into &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; so that you can tag it and release it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
Switched to branch 'master'
$ git merge hotfix
Updating d939a3a..40837f1
Fast-forward
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice how Git mentions &lt;strong&gt;fast-forward&lt;/strong&gt; during the merge. What this means is that all of the commits in &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; were directly upstream from &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. This allows Git to simply move the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; pointer up the tree to &lt;code class=&quot;highlighter-rouge&quot;&gt;hotfix&lt;/code&gt;. What you end up with looks like this.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/branch-merge-hotfix.png&quot; width=&quot;631&quot; srcset=&quot;/assets/resized/branch-merge-hotfix-320x136.png 320w, /assets/resized/branch-merge-hotfix-360x153.png 360w,  /assets/branch-merge-hotfix.png 631w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Now let’s try and merge &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git merge feature-branch
Merge made by the 'recursive' strategy.
 feature.html | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This time, Git wasn’t able to perform a fast-forward. This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; isn’t directly upstream from &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. This is clear on the graph above, where &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; is at commit &lt;strong&gt;D&lt;/strong&gt; which is in a different history tree to &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; at commit &lt;strong&gt;C&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So how did Git handle this merge? Taking a look at the log, we see that Git has actually created a new ”merge” commit, as well as bringing the commit from &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline
8ad0923 Merge branch 'feature-branch'
0c21359 Finished the new feature
40837f1 Fixed some wording
d939a3a Initial commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Upon closer inspection, we can see that this is a special kind of commit object – it has &lt;strong&gt;two parent commits&lt;/strong&gt;. This is referred to as a &lt;strong&gt;merge commit&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show --format=raw 8ad0923

commit 8ad09238b0dff99e8a99c84d68161ebeebbfc714
tree e5ee97c8f9a4173f07aa4c46cb7f26b7a9ff7a17
parent 40837f14b8122ac6b37c0919743b1fd429b3bbab
parent 0c21359730915c7888c6144aa8e9063345330f1f
author Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1401134489 +0100
committer Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt; 1401134489 +0100

 Merge branch 'feature-branch'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This means that our history graph now looks something like this (commit &lt;strong&gt;E&lt;/strong&gt; is the new merge commit).&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/branch-merge-feature.png&quot; width=&quot;656&quot; srcset=&quot;/assets/resized/branch-merge-feature-320x164.png 320w, /assets/resized/branch-merge-feature-360x184.png 360w,  /assets/branch-merge-feature.png 656w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Some people believe that this sort of history graph is undesirable. In the &lt;em&gt;Rebasing (Continued)&lt;/em&gt; section, we’ll learn how to prevent non-fast-forward merges by rebasing feature branches before merging them with &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rebasing&quot;&gt;Rebasing&lt;/h2&gt;

&lt;p&gt;Rebasing is without a doubt one of Git’s most misunderstood features. For most people, &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; is a command that should be avoided at all costs. This is probably due to the extraordinary amount of scaremongering around rebasing. &lt;em&gt;“Rebase Considered Harmful”&lt;/em&gt;, and &lt;em&gt;“Please, stay away from rebase”&lt;/em&gt; are just two of the many anti-rebase articles you will find in the vast archives of the Internet.&lt;/p&gt;

&lt;p&gt;But rebase isn’t scary, or dangerous, so long as you understand what it does. But before we get into rebasing, I’m going to take a quick digression, because it’s actually much easier to explain rebasing in the context of cherry-picking.&lt;/p&gt;

&lt;h2 id=&quot;cherry-picking&quot;&gt;Cherry-Picking&lt;/h2&gt;

&lt;p&gt;What &lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry-pick&lt;/code&gt; does is take one or more commits, and replay them on top of the current commit. Imagine a repository with the following history graph.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/cherry-pick-before.png&quot; width=&quot;467&quot; srcset=&quot;/assets/resized/cherry-pick-before-320x125.png 320w, /assets/resized/cherry-pick-before-360x141.png 360w,  /assets/cherry-pick-before.png 467w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;If you are on commit &lt;strong&gt;D&lt;/strong&gt; and you run &lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry-pick F&lt;/code&gt;, Git will take the changes that were introduced in commit &lt;strong&gt;F&lt;/strong&gt; and replay them &lt;em&gt;as a new commit&lt;/em&gt; (shown as &lt;strong&gt;F’&lt;/strong&gt;) on top of commit &lt;strong&gt;D.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/cherry-pick-after.png&quot; width=&quot;555&quot; srcset=&quot;/assets/resized/cherry-pick-after-320x98.png 320w, /assets/resized/cherry-pick-after-360x110.png 360w,  /assets/cherry-pick-after.png 555w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;The reason you end up with a &lt;em&gt;copy&lt;/em&gt; of commit &lt;strong&gt;F&lt;/strong&gt; rather than commit &lt;strong&gt;F&lt;/strong&gt; itself is due to the way commits are constructed. Recall that the parent commit is part of a commit’s hash. So despite containing the exact same changes, author information and timestamp; &lt;strong&gt;F’&lt;/strong&gt; will have a different parent to &lt;strong&gt;F&lt;/strong&gt;, giving it a different hash.&lt;/p&gt;

&lt;p&gt;A common workflow in Git is to develop features on small branches, and merge the features one at a time into the master branch. Let’s recreate this scenario by adding some branch labels to the graphs.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/graph-branch-labels.png&quot; width=&quot;623&quot; srcset=&quot;/assets/resized/graph-branch-labels-320x89.png 320w, /assets/resized/graph-branch-labels-360x101.png 360w,  /assets/graph-branch-labels.png 623w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;As you can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; has been updated since &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; was created. To avoid potential conflicts when &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; is merged with &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, we want to bring &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;’s changes into &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; is the &lt;em&gt;base&lt;/em&gt; branch, we want to play &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;’s commits &lt;em&gt;on top&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Essentially, we want to change commit &lt;strong&gt;C&lt;/strong&gt;’s parent from &lt;strong&gt;B&lt;/strong&gt; to &lt;strong&gt;F&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s not going to be easy, but we can achieve this with &lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry-pick&lt;/code&gt;. First, we need to create a temporary branch at commit &lt;em&gt;F&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
$ git checkout -b foo-tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/foo-tmp.png&quot; width=&quot;623&quot; srcset=&quot;/assets/resized/foo-tmp-320x89.png 320w, /assets/resized/foo-tmp-360x101.png 360w,  /assets/foo-tmp.png 623w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Now that we have a base on commit &lt;em&gt;F&lt;/em&gt;, we can &lt;code class=&quot;highlighter-rouge&quot;&gt;cherry-pick&lt;/code&gt; all of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;’s commits on top of it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git cherry-pick C D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/cherry-pick-c-d.png&quot; width=&quot;744&quot; srcset=&quot;/assets/resized/cherry-pick-c-d-320x102.png 320w, /assets/resized/cherry-pick-c-d-360x115.png 360w, /assets/resized/cherry-pick-c-d-720x229.png 720w,  /assets/cherry-pick-c-d.png 744w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Now all that’s left to do is point &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; at commit &lt;strong&gt;D’&lt;/strong&gt;, and delete the temporary branch &lt;code class=&quot;highlighter-rouge&quot;&gt;foo-tmp&lt;/code&gt;. We do this with the &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; command, which points &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; (and therefore the current branch) at a specified commit. The &lt;code class=&quot;highlighter-rouge&quot;&gt;--hard&lt;/code&gt; flag ensures our working tree is updated as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout foo
$ git reset --hard foo-tmp
$ git branch -D foo-tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This gives the desired result of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;’s commits being upstream of &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Note that the original &lt;strong&gt;C&lt;/strong&gt; and &lt;strong&gt;D&lt;/strong&gt; commits are no longer reachable because no branch points to them.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/cherry-pick-final.png&quot; width=&quot;751&quot; srcset=&quot;/assets/resized/cherry-pick-final-320x63.png 320w, /assets/resized/cherry-pick-final-360x71.png 360w, /assets/resized/cherry-pick-final-720x143.png 720w,  /assets/cherry-pick-final.png 751w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;h2 id=&quot;rebasing-continued&quot;&gt;Rebasing (Continued)&lt;/h2&gt;

&lt;p&gt;While the example in &lt;em&gt;Cherry-Picking&lt;/em&gt; worked, it’s not practical. In Git, rebasing allows us to replace our verbose cherry-pick workflow…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
$ git checkout -b foo-tmp
$ git cherry-pick C D
$ git checkout foo
$ git reset --hard foo-tmp
$ git branch -D foo-tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…With a single command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase master foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With the format &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase &amp;lt;base&amp;gt; &amp;lt;target&amp;gt;&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt; command will take all of the commits from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;target&amp;gt;&lt;/code&gt; and play them on top of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base&amp;gt;&lt;/code&gt; one by one. It does this without actually modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base&amp;gt;&lt;/code&gt;, so the end result is a linear history in which &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base&amp;gt;&lt;/code&gt; can be fast-forwarded to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;target&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a sense, performing a rebase is like telling Git, &lt;strong&gt;“Hey, I want to pretend that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;target&amp;gt;&lt;/code&gt; was actually branched from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base&amp;gt;&lt;/code&gt;. Take all of the commits from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;target&amp;gt;&lt;/code&gt;, and pretend that they happened &lt;em&gt;after&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base&amp;gt;&lt;/code&gt;“&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look again at the example graph from &lt;em&gt;Merging&lt;/em&gt; to see how rebasing can prevent us from having to do a non-fast-forward merge.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/branch-merge-hotfix.png&quot; width=&quot;631&quot; srcset=&quot;/assets/resized/branch-merge-hotfix-320x136.png 320w, /assets/resized/branch-merge-hotfix-360x153.png 360w,  /assets/branch-merge-hotfix.png 631w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;All we have to do to enable a fast-forward merge of &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; is run &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase master feature-branch&lt;/code&gt; before performing the merge.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase master feature-branch
First, rewinding head to replay your work on top of it...
Applying: Finished the new feature
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This has brought &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; directly upstream of &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/rebase-feature.png&quot; width=&quot;680&quot; srcset=&quot;/assets/resized/rebase-feature-320x89.png 320w, /assets/resized/rebase-feature-360x100.png 360w,  /assets/rebase-feature.png 680w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Git is now able to perform a fast-forward merge.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout master
$ git merge feature-branch
Updating 40837f1..2a534dd
Fast-forward
 feature.html | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;remotes&quot;&gt;Remotes&lt;/h2&gt;

&lt;p&gt;In order to collaborate on any Git project, you need to utilise at least one remote repository. Unlike centralised VCS which require a dedicated server daemon, a Git remote is simply another Git repository. In order to demonstrate this, we first need to understand the concept of a &lt;em&gt;bare&lt;/em&gt; repository.&lt;/p&gt;

&lt;p&gt;Recall that Git stores the entire repository inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; directory. Inside this directory are blobs and tree objects which can be traversed to build a snapshot of the entire project. This means that Git doesn’t actually &lt;em&gt;need&lt;/em&gt; a working tree – it only uses the working tree to figure out what changes have been made since the last commit. This is easily demonstrated if you delete a file from a repository, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout &amp;lt;file&amp;gt;&lt;/code&gt;. Despite being removed from the file system, Git can still restore the file because it has previously stored it in the repository. You can do the same thing with entire directories and Git will still be able to restore everything by traversing its tree objects.&lt;/p&gt;

&lt;p&gt;It is therefore possible to have a repository which can store your project’s history without actually having a working tree. This is called a &lt;em&gt;bare&lt;/em&gt; repository. Bare repositories are most commonly used as a “central” repository where collaborators can share changes. The mechanism for sharing these changes will be explained in detail in the &lt;em&gt;Pushing&lt;/em&gt; and &lt;em&gt;Pulling&lt;/em&gt; sections. For now, let’s look at creating a bare repository.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init --bare
Initialised empty Git repository in /home/demo/bare-repo/
$ ls -l
total 12
drwxrwxr-x 1 demo demo   0 May 31 12:58 branches
-rw-rw-r-- 1 demo demo  66 May 31 12:58 config
-rw-rw-r-- 1 demo demo  73 May 31 12:58 description
-rw-rw-r-- 1 demo demo  23 May 31 12:58 HEAD
drwxrwxr-x 1 demo demo 328 May 31 12:58 hooks
drwxrwxr-x 1 demo demo  14 May 31 12:58 info
drwxrwxr-x 1 demo demo  16 May 31 12:58 objects
drwxrwxr-x 1 demo demo  18 May 31 12:58 refs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice how rather than creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; directory for the repository, &lt;code class=&quot;highlighter-rouge&quot;&gt;git init --bare&lt;/code&gt; simply treats the current directory as the &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;There’s really not much to this repository. The only interesting things it contains are a &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; reference which points to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch (which doesn’t exist yet), and a &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; file which has the &lt;code class=&quot;highlighter-rouge&quot;&gt;bare&lt;/code&gt; flag set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. The other files aren’t of much interest to us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ find . -type f
./info/exclude
./hooks/commit-msg.sample
./hooks/pre-commit.sample
./hooks/pre-push.sample
./hooks/pre-rebase.sample
./hooks/pre-applypatch.sample
./hooks/applypatch-msg.sample
./hooks/post-update.sample
./hooks/prepare-commit-msg.sample
./hooks/update.sample
./description
./HEAD
./config

$ cat HEAD
ref: refs/heads/master
$ cat config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = true

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what can we do with this repository? Well, nothing much right now. Git won’t let us modify the repository because it doesn’t have a working tree to modify. (Note: this isn’t strictly true. We could painstakingly use Git’s low-level commands to manually create and store objects in Git’s data store, but that is beyond the scope of this guide. If you’re &lt;em&gt;really&lt;/em&gt; interested, read &lt;a href=&quot;http://git-scm.com/book/en/Git-Internals-Git-Objects&quot;&gt;&lt;em&gt;Git Internals - Git Objects&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch README
$ git add README
fatal: This operation must be run in a work tree
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The intended use of this repository is for other collaborators to &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt; changes from, as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; their own changes to.&lt;/p&gt;

&lt;h3 id=&quot;cloning&quot;&gt;Cloning&lt;/h3&gt;

&lt;p&gt;Now that we’ve set up a bare repository, let’s look at the concept of &lt;em&gt;cloning&lt;/em&gt; a repository.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; command is really just a shortcut which does a few things for you. With its default configuration, it will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create remote-tracking branches for each branch in the remote.&lt;/li&gt;
  &lt;li&gt;Check out the branch which is currently active (&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;) on the remote.&lt;/li&gt;
  &lt;li&gt;Perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; to bring the current branch and working tree up-to-date with the remote.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; command takes a URL and supports a number of transport protocols including HTTP, SSH, and Git’s own protocol. It also supports plain old file paths, which is what we’ll use.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ..
$ git clone bare-repo/ clone-of-bare-repo
Cloning into 'clone-of-bare-repo'...
warning: You appear to have cloned an empty repository.
done.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s inspect this cloned repository to see how Git has set it up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd clone-of-bare-repo/
$ find . -type f
./.git/info/exclude
./.git/hooks/commit-msg.sample
./.git/hooks/pre-commit.sample
./.git/hooks/pre-push.sample
./.git/hooks/pre-rebase.sample
./.git/hooks/pre-applypatch.sample
./.git/hooks/applypatch-msg.sample
./.git/hooks/post-update.sample
./.git/hooks/prepare-commit-msg.sample
./.git/hooks/update.sample
./.git/description
./.git/HEAD
./.git/config

$ cat .git/HEAD
ref: refs/heads/master
$ ls -l .git/refs/heads/
total 0
$ cat .git/config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote &quot;origin&quot;]
    url = /home/demo/bare-repo/
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is quite literally a clone of &lt;code class=&quot;highlighter-rouge&quot;&gt;bare-repo&lt;/code&gt;. The only difference is that this repository contains a few extra lines in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, it contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;remote&lt;/code&gt; listing for “origin”, which is the default name given to a repository’s main remote. This tells Git the URL of the repository, and which references it should retrieve when performing a &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below that is a &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt; listing. This is the configuration for a &lt;em&gt;remote-tracking branch&lt;/em&gt;. But before we get into that, let’s store some data in the remote repository.&lt;/p&gt;

&lt;h3 id=&quot;pushing&quot;&gt;Pushing&lt;/h3&gt;

&lt;p&gt;We’ve just cloned a completely empty repository, and we want to start working on it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'Project v1.0' &amp;gt; README
$ git add README
$ git commit -m &quot;Add readme&quot;
[master (root-commit) 5d591d5] Add readme
 1 file changed, 1 insertion(+)
 create mode 100644 README
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that even though it didn’t &lt;em&gt;technically&lt;/em&gt; exist (there was nothing in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/heads&lt;/code&gt;), this commit has been made to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch. That’s because the &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; of this repository pointed to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, so Git has gone ahead and created the branch for us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/refs/heads/master
5d591d5fafd538610291f45bec470d1b4e77891e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we’ve completed some work, we need to share this with our collaborators who have also cloned this repository. Git makes this really easy.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 231 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To /home/demo/bare-repo/
 * [new branch] master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice how we specified both the remote (&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;) and the branch (&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;) that we want Git to push. It &lt;em&gt;is&lt;/em&gt; possible to simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;, but this can be dangerous and is generally advised against. Running &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; without any arguments can (depending on your configuration) push all remote-tracking branches. This is usually okay, but it can result in you pushing changes which you don’t want collaborators to pull. In the worst case, you can destroy other collaborators’ changes if you specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;So, let’s take a look at the remote repository to see what happened.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../bare-repo/
$ cat refs/heads/master
5d591d5fafd538610291f45bec470d1b4e77891e

$ git show 5d591d5
commit 5d591d5fafd538610291f45bec470d1b4e77891e
Author: Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt;
Date: Sat May 31 14:08:34 2014 +0100

 Add readme

diff --git a/README b/README
new file mode 100644
index 0000000..5cecdfb
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+Project v1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As we expected, the remote repository now contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch which points to the commit that we just created.&lt;/p&gt;

&lt;p&gt;Essentially what happened when we ran &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;, is Git updated the remote’s references, and sent it any objects required to build those references. In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; updated the remote’s &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; to point at &lt;code class=&quot;highlighter-rouge&quot;&gt;5d591d5&lt;/code&gt;, and sent it the &lt;code class=&quot;highlighter-rouge&quot;&gt;5d591d5&lt;/code&gt; commit object as well as any tree and blob objects related to that commit.&lt;/p&gt;

&lt;h3 id=&quot;remote-tracking-branches&quot;&gt;Remote-Tracking Branches&lt;/h3&gt;

&lt;p&gt;As we saw in &lt;em&gt;Cloning&lt;/em&gt;, a remote-tracking branch is essentially just a few lines in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;. Let’s take a look at those lines again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The line &lt;code class=&quot;highlighter-rouge&quot;&gt;[branch &quot;master&quot;]&lt;/code&gt; denotes that the following configuration applies to the &lt;em&gt;local&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;The rest of the configuration specifies that when this remote-tracking branch is fetched, Git should fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch from the &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; remote.&lt;/p&gt;

&lt;p&gt;Besides storing this configuration, Git also stores a local copy of the remote branch. This is simply stored as a reference in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/remotes/&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt;. We’ll see more about how this works in &lt;em&gt;Fetching&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fetching&quot;&gt;Fetching&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; command is fairly simple. It takes the name of a remote (unless used with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt; flag, which fetches all remotes), and retrieves any new references and all objects necessary to complete them.&lt;/p&gt;

&lt;p&gt;Recall what a remote’s configuration looks like.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[remote &quot;origin&quot;]
    url = /home/demo/bare-repo/
    fetch = +refs/heads/*:refs/remotes/origin/*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; parameter here specifies a mapping of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;remote-refs&amp;gt;:&amp;lt;local-refs&amp;gt;&lt;/code&gt;. The example above simply states that the references found in origin’s &lt;code class=&quot;highlighter-rouge&quot;&gt;refs/heads/*&lt;/code&gt; should be stored locally in &lt;code class=&quot;highlighter-rouge&quot;&gt;refs/remotes/origin/*&lt;/code&gt;. We can see this in the repository that we cloned earlier.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -l .git/refs/remotes/origin/
total 4
-rw-rw-r-- 1 demo demo 41 May 31 14:12 master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s see a fetch in action to get a better idea of what happens. First, we’ll create a new branch on the remote repository.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../bare-repo/
$ git branch feature-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we’ll run &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; from the clone.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../clone-of-bare-repo/
$ git fetch origin
From /home/demo/bare-repo
 * [new branch] feature-branch -&amp;gt; origin/feature-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This has done a couple of things. First, it has created a reference for the remote branch in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/remotes/origin&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/refs/remotes/origin/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It has also updated a special file, &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt; with some important information. We’ll talk about this file in more detail soon.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/FETCH_HEAD
5d591d5fafd538610291f45bec470d1b4e77891e branch 'master' of /home/demo/bare-repo
5d591d5fafd538610291f45bec470d1b4e77891e not-for-merge branch 'feature-branch' of /home/demo/bare-repo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What is &lt;em&gt;hasn’t&lt;/em&gt; done is created a local branch. This is because Git understands that even though the remote has a &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt;, you might not want it in your local repository.&lt;/p&gt;

&lt;p&gt;But what if we &lt;em&gt;do&lt;/em&gt; want a local branch which tracks the remote &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt;? Git makes this easy. If we run &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout feature-branch&lt;/code&gt;, rather than failing because no local &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; exists, Git will see that there is a remote &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; available and create a local branch for us.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout feature-branch

Branch feature-branch set up to track remote branch feature-branch from origin.
Switched to a new branch 'feature-branch'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git has done a couple of things for us here. First, it has created a local &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt; reference which points to the same commit as the remote &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/refs/remotes/origin/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
$ cat .git/refs/heads/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It has also created a remote-tracking branch entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote &quot;origin&quot;]
    url = /home/demo/bare-repo/
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
[branch &quot;feature-branch&quot;]
    remote = origin
    merge = refs/heads/feature-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;pulling&quot;&gt;Pulling&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; command is, like &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;, a nice shortcut which essentially just runs a few lower-level commands. In short, with the format &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; command does the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Runs &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Reads &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt; to figure out if &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; has a remote-tracking branch which should be merged.&lt;/li&gt;
  &lt;li&gt;Runs &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; if required, otherwise quits with an appropriate message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, it helps to understand Git’s &lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH_HEAD&lt;/code&gt;. Every time you run &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt;, Git stores information about the fetched branches in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt;. This is referred to as a &lt;em&gt;short-lived reference&lt;/em&gt;, because by default Git will override the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH_HEAD&lt;/code&gt; every time you run &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s introduce some new commits to our remote repository so that we can see this in practice.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone bare-repo/ new-clone-of-bare-repo
Cloning into 'new-clone-of-bare-repo'...
done.

$ cd new-clone-of-bare-repo/
$ git checkout feature-branch
Branch feature-branch set up to track remote branch feature-branch from origin.
Switched to a new branch 'feature-branch'

$ echo 'Some more information.' &amp;gt;&amp;gt; README
$ git commit -am &quot;Add more information to readme&quot;
[feature-branch 7cd83c2] Add more information to readme
 1 file changed, 1 insertion(+)
$ git push origin feature-branch
Counting objects: 5, done.
Writing objects: 100% (3/3), 298 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To /home/demo/bare-repo/
   5d591d5..7cd83c2  feature-branch -&amp;gt; feature-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, using the steps outlined earlier, let’s manually perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; on the other clone to pull in the changes we just introduced.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../clone-of-bare-repo/
$ git fetch origin
remote: Counting objects: 5, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /home/demo/bare-repo
   5d591d5..7cd83c2  feature-branch -&amp;gt; origin/feature-branch
$ cat .git/FETCH_HEAD
7cd83c29d7360dfc432d556fdbf03eb83ec5158d        branch 'feature-branch' of /home/demo/bare-repo
5d591d5fafd538610291f45bec470d1b4e77891e    not-for-merge   branch 'master' of /home/demo/bare-repo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, Git has updated our local copy of the remote branch, and updated the information in &lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH_HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .git/refs/heads/feature-branch
5d591d5fafd538610291f45bec470d1b4e77891e
$ cat .git/refs/remotes/origin/feature-branch
7cd83c29d7360dfc432d556fdbf03eb83ec5158d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We know from &lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH_HEAD&lt;/code&gt; that the fetch introduced some changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt;. So all that’s left to do to complete the “pull” is perform a merge.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git merge FETCH_HEAD
Updating 5d591d5..7cd83c2
Fast-forward
 README | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s it – we’ve just performed a &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; without actually running &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;. Of course, it is much easier to let Git take care of these details. Just to be sure that the outcome is the same, we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD^1
HEAD is now at 5d591d5 Add readme
$ git pull origin feature-branch
From /home/demo/bare-repo
 * branch            feature-branch -&amp;gt; FETCH_HEAD
Updating 5d591d5..7cd83c2
Fast-forward
 README | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;toolkit&quot;&gt;Toolkit&lt;/h2&gt;

&lt;p&gt;With a solid understanding of Git’s inner workings, some of the more advanced Git tools start to make more sense.&lt;/p&gt;

&lt;h3 id=&quot;git-reflog&quot;&gt;git-reflog&lt;/h3&gt;

&lt;p&gt;Whenever you make a change in Git that affects the tip of a branch, Git records information about that change in what’s called the reflog. Usually you shouldn’t need to look at these logs, but sometimes they can come in &lt;em&gt;very&lt;/em&gt; handy.&lt;/p&gt;

&lt;p&gt;Let’s say you have a repository with a few commits.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline
d6f2a84 Add empty LICENSE file
51c4b49 Add some actual content to readme
3413f46 Add TODO note to readme
322c826 Add empty readme
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You decide, for some reason, to perform a destructive action on your &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard 3413f46
HEAD is now at 3413f46 Add TODO note to readme
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since performing this action, you’ve realised that you lost some commits and you have no idea what their hashes were. You never pushed the changes; they were only in your local repository. &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; is no help, since the commits are no longer reachable from &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline
3413f46 Add TODO note to readme
322c826 Add empty readme
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is where &lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt; can be useful.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reflog
3413f46 HEAD@{0}: reset: moving to 3413f46
d6f2a84 HEAD@{1}: commit: Add empty LICENSE file
51c4b49 HEAD@{2}: commit: Add some actual content to readme
3413f46 HEAD@{3}: commit: Add TODO note to readme
322c826 HEAD@{4}: commit (initial): Add empty readme
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The reflog shows a list of all changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; in reverse chronological order. The hash in the first column is the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; &lt;em&gt;after the action on the right was performed&lt;/em&gt;. We can see, therefore, that we were at commit &lt;code class=&quot;highlighter-rouge&quot;&gt;d6f2a84&lt;/code&gt; before the destructive change.&lt;/p&gt;

&lt;p&gt;How you want to recover commits depends on the situation. In this particular example, we can simply do a &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard d6f2a84&lt;/code&gt; to restore &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; to its original position. However if we have introduced new commits since the destructive change, we may need to do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;cherry-pick&lt;/code&gt; all the commits that were lost.&lt;/p&gt;

&lt;p&gt;Note that Git’s reflog is only a record of changes &lt;strong&gt;for your local repository&lt;/strong&gt;. If your local repository becomes corrupt or is deleted, the reflog won’t be of any use (if the repository is deleted the reflog won’t exist at all!)&lt;/p&gt;

&lt;p&gt;Depending on the situation, you may find &lt;code class=&quot;highlighter-rouge&quot;&gt;git fsck&lt;/code&gt; more suitable for recovering lost commits.&lt;/p&gt;

&lt;h3 id=&quot;git-fsck&quot;&gt;git-fsck&lt;/h3&gt;

&lt;p&gt;In a way, Git’s object storage works like a primitive file system – objects are like files on a hard drive, and their hashes are the objects’ physical address on the disk. The Git index is exactly like the index of a file system, in that it contains references which point at an object’s physical location.&lt;/p&gt;

&lt;p&gt;By this analogy, &lt;code class=&quot;highlighter-rouge&quot;&gt;git fsck&lt;/code&gt; is aptly named after &lt;code class=&quot;highlighter-rouge&quot;&gt;fsck&lt;/code&gt; (“file system check”). This tool is able to check Git’s database and verify the validity and reachability of every object that it finds.&lt;/p&gt;

&lt;p&gt;When a reference (like a branch) is deleted from Git’s index, the object(s) they refer to usually aren’t deleted, even if they are no longer reachable by any other references. Using a simple example, we can see this in practice. Here we have a branch, &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt;, which points at &lt;code class=&quot;highlighter-rouge&quot;&gt;f71bb43&lt;/code&gt;. If we delete &lt;code class=&quot;highlighter-rouge&quot;&gt;feature-branch&lt;/code&gt;, the commit will no longer be reachable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch
  feature-branch
* master
$ git rev-parse --short feature-branch
f71bb43
$ git branch -D feature-branch
Deleted branch feature-branch (was f71bb43).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, commit &lt;code class=&quot;highlighter-rouge&quot;&gt;f71bb43&lt;/code&gt; still exists in our repository, but there are no references pointing to it. By searching through the database, &lt;code class=&quot;highlighter-rouge&quot;&gt;git fsck&lt;/code&gt; is able to find it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git fsck --lost-found
Checking object directories: 100% (256/256), done.
dangling commit f71bb43907bffe0bce2967504341a0ece7a8cb68
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For simple cases, &lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt; may be preferred. Where &lt;code class=&quot;highlighter-rouge&quot;&gt;git fsck&lt;/code&gt; excels over &lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;, though, is when you need to find objects which you never referenced in your local repository (and therefore would not be in your reflog). An example of this is when you delete a remote branch through an interface like GitHub. Assuming the objects haven’t been garbage-collected, you can clone the remote repository and use &lt;code class=&quot;highlighter-rouge&quot;&gt;git fsck&lt;/code&gt; to recover the deleted branch.&lt;/p&gt;

&lt;h3 id=&quot;git-stash&quot;&gt;git-stash&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt; takes all changes to your working tree and index, and “stashes” them away, giving you a clean working tree. You can then retrieve those changes from your stash and re-apply them to the working tree at any time with &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash apply&lt;/code&gt;. A common use for the &lt;code class=&quot;highlighter-rouge&quot;&gt;stash&lt;/code&gt; command is to save some half-finished changes in order to checkout another branch.&lt;/p&gt;

&lt;p&gt;This seems fairly simple at first, but the mechanism behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;stash&lt;/code&gt; command is actually quite complex. Let’s build a simple repository to see how it works.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
Initialised empty Git repository in /home/demo/demo-repo/.git/
$ echo 'Foo' &amp;gt; test.txt
$ git add test.txt
$ git commit -m &quot;Initial commit&quot;
[master (root-commit) 2522332] Initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s make some changes, and stash them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'Bar' &amp;gt;&amp;gt; test.txt
$ git stash
Saved working directory and index state WIP on master: 2522332 Initial commit
HEAD is now at 2522332 Initial commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Stashes in Git are put onto a stack, with the most recently-stashed on top. You can list all current stashes with &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash list&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git stash list
stash@{0}: WIP on master: 2522332 Initial commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Right now we only have one stash: &lt;code class=&quot;highlighter-rouge&quot;&gt;stash@{0}&lt;/code&gt;. This is actually a reference, which we can inspect.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show stash@{0}
commit f949b46a417a4f1595a9d12773c89cce4454a958
Merge: 2522332 1fbe1cc
Author: Joseph Wynn &amp;lt;joseph@wildlyinaccurate.com&amp;gt;
Date:   Sat Jul 5 00:15:51 2014 +0100

    WIP on master: 2522332 Initial commit

diff --cc test.txt
index bc56c4d,bc56c4d..3b71d5b
--- a/test.txt
+++ b/test.txt
@@@ -1,1 -1,1 +1,2 @@@
  Foo
++Bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From this we can see that the stash is pointing to a commit object. What’s interesting is that the stash commit is a &lt;strong&gt;merge commit&lt;/strong&gt;. We’ll look into that in a bit, but first: where &lt;em&gt;is&lt;/em&gt; this commit?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline
2522332 Initial commit

$ git branch
* master

$ git fsck --lost-found
Checking object directories: 100% (256/256), done.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s not in the current branch, and there are no other branches it could be in. &lt;code class=&quot;highlighter-rouge&quot;&gt;git-fsck&lt;/code&gt; hasn’t found any dangling commits, so it must be referenced somewhere. But &lt;em&gt;where&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The answer is simple: Git creates a special reference for the stash which isn’t seen by commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git tag&lt;/code&gt;. This reference lives in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/stash&lt;/code&gt;. We can verify this with &lt;code class=&quot;highlighter-rouge&quot;&gt;git show-ref&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show-ref
25223321ec2fbcb718b7fbf99485f1cb4d2f2042 refs/heads/master
f949b46a417a4f1595a9d12773c89cce4454a958 refs/stash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So why does Git create a merge commit for a stash? The answer is relatively simple: as well as recording the state of the working tree, &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt; also records the state of the index (also known as the “staging area”). Since it’s possible for the index and the working tree to contain changes to the same file, Git needs to store the states separately.&lt;/p&gt;

&lt;p&gt;This gives us a history that looks a little like this:&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/stash.png&quot; width=&quot;504&quot; srcset=&quot;/assets/resized/stash-320x169.png 320w, /assets/resized/stash-360x190.png 360w,  /assets/stash.png 504w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;In this history graph, the tree of commit &lt;strong&gt;C&lt;/strong&gt; contains the changes to the working tree. Commit &lt;strong&gt;C&lt;/strong&gt;’s first parent is the commit that &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; pointed to when the stash was created (commit &lt;strong&gt;A&lt;/strong&gt;). The second parent (commit &lt;strong&gt;B&lt;/strong&gt;) contains the changes to the index. It is with these two commits that Git is able to re-apply your stashed changes.&lt;/p&gt;

&lt;h3 id=&quot;git-describe&quot;&gt;git-describe&lt;/h3&gt;

&lt;p&gt;Git’s &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; command is summed up pretty neatly in the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git-describe - Show the most recent tag that is reachable from a commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can be helpful for things like build and release scripts, as well as figuring out which version a change was introduced in.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git describe&lt;/code&gt; will take any reference or commit hash, and return the name of the most recent tag. If the tag points at the commit you gave it, &lt;code class=&quot;highlighter-rouge&quot;&gt;git describe&lt;/code&gt; will return only the tag name. Otherwise, it will suffix the tag name with some information including the number of commits since the tag and an abbreviation of the commit hash.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git describe v1.2.15
v1.2.15
$ git describe 2db66f
v1.2.15-80-g2db66f5

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to ensure that only the tag name is returned, you can force Git to remove the suffix by passing &lt;code class=&quot;highlighter-rouge&quot;&gt;--abbrev=0&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git describe --abbrev=0 2db66f
v1.2.15
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;git-rev-parse&quot;&gt;git-rev-parse&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rev-parse&lt;/code&gt; is an ancillary plumbing command which takes a wide range of inputs and returns one or more commit hashes. The most common use case is figuring out which commit a tag or branch points to.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rev-parse v1.2.15
2a46f5e2fbe83ccb47a1cd42b81f815f2f36ee9d
$ git rev-parse --short v1.2.15
2a46f5e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;git-bisect&quot;&gt;git-bisect&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; is an indispensable tool when you need to figure out which commit introduced a breaking change. The &lt;code class=&quot;highlighter-rouge&quot;&gt;bisect&lt;/code&gt; command does a binary search through your commit history to help you find the breaking change as quickly as possible. To get started, simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect start&lt;/code&gt;, and tell Git that the commit you’re currently on is broken with &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect bad&lt;/code&gt;. Then, you can give Git a commit that you know is working with &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect good &amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git bisect start
$ git bisect bad
$ git bisect good v1.2.15
Bisecting: 41 revisions left to test after this (roughly 5 steps)
[b87713687ecaa7a873eeb3b83952ebf95afdd853] docs(misc/index): add header; general links
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git will then checkout a commit and ask you to test whether it’s broken or not. If the commit is broken, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect bad&lt;/code&gt;. If the commit is fine, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect good&lt;/code&gt;. After doing this a few times, Git will be able to pinpoint the commit which first introduced the breaking change.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git bisect bad
e145a8df72f309d5fb80eaa6469a6148b532c821 is the first bad commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once the &lt;code class=&quot;highlighter-rouge&quot;&gt;bisect&lt;/code&gt; is finished (or when you want to abort it), be sure to run &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect reset&lt;/code&gt; to reset &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; to where it was before the &lt;code class=&quot;highlighter-rouge&quot;&gt;bisect&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 May 2014 04:12:22 +1200</pubDate>
        <link>https://wildlyinaccurate.com/a-hackers-guide-to-git/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/a-hackers-guide-to-git/</guid>
        
        <category>git</category>
        
        <category>merge</category>
        
        <category>rebase</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Understanding JavaScript: Inheritance and the prototype chain</title>
        <description>&lt;p&gt;&lt;em&gt;This is the first post in a series on JavaScript. In this post I’m going to explain how JavaScript’s prototype chain works, and how you can use it to achieve inheritance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, it’s important to understand that while JavaScript is an object-oriented language, it is prototype-based and does not implement a traditional class system. Keep in mind that when I mention a &lt;em&gt;class&lt;/em&gt; in this post, I am simply referring to JavaScript objects and the prototype chain – more on this in a bit.&lt;/p&gt;

&lt;p&gt;Almost everything in JavaScript is an object, which you can think of as sort of like associative arrays - objects contain named properties which can be accessed with &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.propName&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;obj['propName']&lt;/code&gt;. Each object has an internal property called &lt;em&gt;prototype&lt;/em&gt;, which links to another object. The prototype object has a prototype object of its own, and so on – this is referred to as the &lt;em&gt;prototype chain&lt;/em&gt;. If you follow an object’s prototype chain, you will eventually reach the core &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; prototype whose prototype is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, signalling the end of the chain.&lt;/p&gt;

&lt;p&gt;So what is the prototype chain used for? When you request a property which the object does not contain, JavaScript will look down the prototype chain until it either finds the requested property, or until it reaches the end of the chain. This behaviour is what allows us to create “classes”, and implement inheritance.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Don’t worry if this doesn’t make sense yet. To see prototypes in action, let’s take a look at the simplest example of a “class” within JavaScript, which is created with a function object:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can add properties to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; class in two ways: either by setting them as &lt;em&gt;instance properties&lt;/em&gt;, or by adding them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; prototype.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Instance properties can be set on each instance of the class&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Prototype properties are shared across all instances of the class. However, they can still be overwritten on a per-instance basis with the `this` keyword.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Monty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// My name is Monty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The structure of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; object becomes clear when we inspect it in the console. We can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; property belongs to the object itself, while &lt;code class=&quot;highlighter-rouge&quot;&gt;speak&lt;/code&gt; is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; prototype.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/Animal.png&quot; width=&quot;430&quot; srcset=&quot;/assets/resized/Animal-320x79.png 320w, /assets/resized/Animal-360x89.png 360w,  /assets/Animal.png 430w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;Now let’s look at how we can extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; class to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Monty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// My name is Monty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What we are doing here is setting &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt;’s prototype to an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;, so that &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; inherits all of &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal's&lt;/code&gt; properties. We’re also using &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal.call&lt;/code&gt; to inherit the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; constructor (sort of like &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; in other languages). &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; is a special function which lets us call a function and specify the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; &lt;em&gt;within that function&lt;/em&gt;. So when &lt;code class=&quot;highlighter-rouge&quot;&gt;this.name&lt;/code&gt; is set inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; constructor, it’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt;’s name property being set, not the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;’s.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; object to get a better view of what’s going on.&lt;/p&gt;

&lt;div class=&quot;my-4 ta-c &quot;&gt;
    
    &lt;img alt=&quot;&quot; src=&quot;/assets/Cat.png&quot; width=&quot;430&quot; srcset=&quot;/assets/resized/Cat-320x100.png 320w, /assets/resized/Cat-360x112.png 360w,  /assets/Cat.png 430w&quot; /&gt;
    

    
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; object has its own &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; instance property, like we expected. When we look at the object’s prototype we see that it has also inherited &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; instance property as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;speak&lt;/code&gt; prototype property. This is where the prototype chain comes in – when we request &lt;code class=&quot;highlighter-rouge&quot;&gt;cat.name&lt;/code&gt;, JavaScript finds the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; instance property and doesn’t bother going down the prototype chain. However when we request &lt;code class=&quot;highlighter-rouge&quot;&gt;cat.speak&lt;/code&gt;, JavaScript has to travel down the prototype chain until it finds the &lt;code class=&quot;highlighter-rouge&quot;&gt;speak&lt;/code&gt; property inherited from &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point I would recommend going through a few slides of &lt;a href=&quot;http://ejohn.org/apps/learn/#64&quot;&gt;John Resig’s JavaScript Ninja&lt;/a&gt; as they go into more detail about how JavaScript prototypes work, and provide some good interactive examples.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 May 2014 09:43:39 +1200</pubDate>
        <link>https://wildlyinaccurate.com/understanding-javascript-inheritance-and-the-prototype-chain/</link>
        <guid isPermaLink="true">https://wildlyinaccurate.com/understanding-javascript-inheritance-and-the-prototype-chain/</guid>
        
        <category>classes</category>
        
        <category>inheritance</category>
        
        <category>javascript</category>
        
        <category>prototype</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
  </channel>
</rss>
