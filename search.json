["{\"title\":\"Integrating Doctrine 2 with CodeIgniter 2\",\"excerpt\":\"_If you're looking for a quick way to get Doctrine 2 running with CodeIgniter 2, you might want to download my [CodeIgniter 2/Doctrine 2 package](https://github.com/wildlyinaccurate/CodeIgniter-2-with-Doctrine-2)_\\n\\n## Overview\\n\\nCodeIgniter is a great PHP framework. The codebase is clean, the [documentation](http://codeigniter.com/user_guide/) is fantastic, and it's regularly updated. Doctrine is a good ORM for the same reasons: it's very well-written, has [extensive documentation](http://www.doctrine-project.org/projects/orm/2.1/docs/en), and is actively developed. A combination of these two systems makes it easy to build database-oriented web applications quicker than ever before.\\n\\nTo get started, download [CodeIgniter 2](http://codeigniter.com/download.php) and [Doctrine 2](http://www.doctrine-project.org/projects/orm.html) – make sure you use the 'Download Archive' link when downloading Doctrine.\\n\\n\\n\\n\",\"tags\":[\"codeigniter 2\",\"combine\",\"doctrine 2\",\"guide\"],\"categories\":[\"codeigniter\",\"doctrine\",\"php\",\"web development\"]}","{\"title\":\"My Top Five Beers\",\"excerpt\":\"Before I start this list, let me explain something. I am not a beer connoisseur; I haven't tried every beer under the sun. I am actually quite picky when it comes to drinking beer. I have no tolerance for the beer-flavoured fizzy water that multi-billion dollar companies like Carlsberg and Heineken produce. I do not enjoy beers that are \\\"low carb\\\" or \\\"lite\\\".\\n\\nWell then, what beers _do_ I like? Stouts and dark ales, of course! So really, this isn't a list of my top five beers. It's a list of my top five dark ales and stouts.\\n\\n\",\"tags\":[\"beer\",\"best\",\"international\",\"new zealand\"],\"categories\":[\"beer\"]}","{\"title\":\"Custom Doctrine 2 Console Commands\",\"excerpt\":\"_This post assumes you have set up [Doctrine 2 with CodeIgniter 2](http://eryr.wordpress.com/2010/09/26/integrating-doctrine-2-with-codeigniter-2/)._\\n\\n## Load Data from Fixtures\\n\\nI could not find a command to load data from fixtures, so I made a very basic command that recursively executes native SQL. If you want to load data from YAML files, you will need to search elsewhere for a YAML interpreter or even a way to convert YAML to SQL.\\n\\n\\n\\n\",\"tags\":[\"commands\",\"console\",\"doctrine 2\"],\"categories\":[\"codeigniter\",\"doctrine\",\"php\",\"web development\"]}","{\"title\":\"Segment-Based URLs with Query Strings in CodeIgniter 2\",\"excerpt\":\"My latest CodeIgniter 2 project requires that I use query strings in some of my URLs. CodeIgniter 1 was notoriously difficult to work with when you enabled query strings, and unfortunately CodeIgniter 2 is no different. Whereas in CodeIgniter 1 you could change two configuration options to enable a combination of segment-based URLs and query strings, this same approach only makes matters worse in CodeIgniter 2.\\n\\n\\n\\n\",\"tags\":[],\"categories\":[\"codeigniter\",\"php\",\"web development\"]}","{\"title\":\"eAccelerator and Doctrine 2\",\"excerpt\":\"A word of warning: eAccelerator does not play well with Doctrine 2. This came to my attention today after I installed eAccelerator so that I could measure the performance gains (if any). As it turns out, one of eAccelerator's \\\"features\\\" is to remove Docblocks from PHP scripts - probably to reduce compile times. Suddenly my application was throwing exceptions with the message \\\"Class _X_ is not a valid entity or mapped super class\\\".\\n\\n\\n\\n\",\"tags\":[],\"categories\":[\"doctrine\",\"php\",\"web development\"]}","{\"title\":\"Beer Review: Renaissance Elemental\",\"excerpt\":\"I touched briefly on the Renaissance brewery while writing about their Craftsman stout, in [My Top Five Beers](https://wildlyinaccurate.com/my-top-five-beers/). Founded by Californians Andy Deuchars and Brian Thiel in 2005, Renaissance is located in the historic Grove Mill in Blenheim, New Zealand. Their beers have been available to the general public since 2006, and have been winning awards ever since. The Elemental porter is Renaissance's most awarded beer, having won gold medals in New Zealand and Australia. More recently the Elemental received a silver medal at the Australia International Beers Awards in May 2010.\\n\\n\",\"tags\":[],\"categories\":[\"beer\",\"reviews\",\"tasting notes\"]}","{\"title\":\"Useful Doctrine 2 Console Commands\",\"excerpt\":\"Doctrine 2's console is really powerful when you know how to use it. You can generate entity classes and their method stubs, reverse-engineer a database, validate your entity schemas, and much more. In this post, I'm going to cover some of the Doctrine console's more useful commands and explain how you can use them to reduce development time. For a full overview of the Doctrine 2 console, read the [Doctrine Tools](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/tools.html) documentation.\\n\\n\",\"tags\":[\"commands\",\"console\",\"Doctrine\"],\"categories\":[\"doctrine\",\"web development\"]}","{\"title\":\"The Music Production Process\",\"excerpt\":\"People who enjoy listening to more 'traditional' styles of music often believe that electronic music shouldn't be called 'real' music. They believe that producing electronic music must be so easy, because after all, isn't it just a few loops played over and over? This is one of the common misconceptions about electronic music production.\\n\\nI have recently been working on a remix of a [Shapeshifter](http://www.shapeshifter.co.nz) song called Longest Day. To give you an idea of the music production process and how it is much more than looping a few sounds, I'm going to share with you some of the work that I've put into this remix.\\n\\n\",\"tags\":[\"audacity\",\"dr rex\",\"loops\",\"music\",\"production\",\"reason\",\"recycle\",\"remix\",\"tracks\"],\"categories\":[\"music production\"]}","{\"title\":\"CodeIgniter 2/Doctrine 2 Installation\",\"excerpt\":\"If you want a quick way of getting Doctrine 2 working with CodeIgniter 2, you can download a pre-configured installation [from my GitHub repository](https://github.com/wildlyinaccurate/CodeIgniter-2-with-Doctrine-2). There are currently three branches available:\\n\\n*   **master** - the latest stable versions of CodeIgniter and Doctrine.\\n*   **develop** - the latest development versions of CodeIgniter and Doctrine. Not recommended for production use.\\n*   **doctrine-2.1** - the latest stable version of CodeIgniter, and the latest stable 2.1.X version of Doctrine. This branch is provided as a way of keeping Doctrine 2.1 applications up to date without breaking backwards compatibility.\\n\\nFor more information, read my post on [integrating Doctrine 2 with CodeIgniter 2](/integrating-doctrine-2-with-codeigniter-2)\\n\\n\\n\",\"tags\":[\"codeigniter\",\"Doctrine\",\"installation\",\"integration\"],\"categories\":[\"codeigniter\",\"doctrine\"]}","{\"title\":\"Dynamic Virtual Hosts Using .htaccess\",\"excerpt\":\"There are several ways to set up virtual hosts on your web server. One of the more common methods is to manually create a `[<VirtualHost>](http://httpd.apache.org/docs/2.0/mod/core.html#virtualhost)` record for each virtual host. While using this method is fine, it can end you up with a huge configuration file that is difficult to manage.\\n\\nBecause all of my virtual hosts are sub-directories of my web server's base directory, I prefer to dynamically allocate the virtual host directory based on the host name. For example, I want wildlyinaccurate.localhost to point to /var/www/wildlyinaccurate. This can be achieved by modifying the .htaccess file of your web server's base directory:\\n\\n\",\"tags\":[\"apache\",\"dynamic\",\"htaccess\",\"virtualhost\"],\"categories\":[\"server administration\"]}","{\"title\":\"Recursively chmod Directories Only\",\"excerpt\":\"The `find` utility's -exec flag makes it very easy to recursively perform operations on specific files or directories.\\n\\n```\\nfind . -type d -exec chmod 755 {} \\\\;\\n```\\n\\nThis command finds all directories (starting at 'dot' - the current directory) and sets their permissions to 755 (rwxr-xr-x).\\n\\n```\\nfind . -type f -exec chmod 644 {} \\\\;\\n```\\n\\nSimilarly, this command finds all files and sets their permissions to 644 (rw-r--r--).\\n\\n&nbsp;\\n\\nThanks to [moveabletripe](http://movabletripe.com/archive/recursively-chmod-directories-only/) for the info.\\n\\n\\n\",\"tags\":[\"chmod\",\"directory\",\"find\",\"linux\",\"permissions\",\"unix\"],\"categories\":[\"server administration\"]}","{\"title\":\"Convert print and echo statements to short syntax\",\"excerpt\":\"It's debatable whether or not it's good practice to use short syntax in PHP. I personally prefer to use short syntax because it keeps my view files looking tidy.\\n\\nThe regular expression below will find all one-liner `print` and `echo` statements (e.g. `<?php print $var; ?>`) and convert them to `<?=$var?>` statements. It will not match statements containing closing brackets, for example when using ternary operators: `<?=($foo == $bar) ? 'Foobar' : 'Foo'?>`\\n\\n```\\nFind:\\n<\\\\?php[\\\\s]*(print|echo)[\\\\s]*\\\\(?([^>\\\\)]+?)\\\\)?[\\\\s]*;?[\\\\s]*\\\\?>\\n```\\n```\\nReplace:\\n<?=$2?>\\n```\\n\\n\\n\",\"tags\":[\"echo\",\"php\",\"print\",\"regular expression\",\"short tags\"],\"categories\":[\"php\",\"web development\"]}","{\"title\":\"Setting up a Web Server on Ubuntu/Debian\",\"excerpt\":\"Setting up a web server with Apache, PHP, and MySQL on any Debian-based system is really easy thanks to APT (Advanced Packaging Tool). Follow along and you'll have a web server set up within fifteen minutes.\\n\\n\",\"tags\":[\"apache\",\"apt-get\",\"debian\",\"mysql\",\"php\",\"phpmyadmin\",\"ubuntu\",\"web server\"],\"categories\":[\"linux\",\"server administration\",\"web development\"]}","{\"title\":\"Deploying a Git repository to a remote server\",\"excerpt\":\"Git's `archive` command is basically the equivalent of SVN's `export` – it dumps a copy of the entire repository without any of the version control files, making it perfect for deploying to a testing or production server.\\n\\n\",\"tags\":[\"archive\",\"deploy\",\"export\",\"git\",\"remote\",\"server\"],\"categories\":[\"git\",\"linux\",\"server administration\"]}","{\"title\":\"Useful Git Configuration Items\",\"excerpt\":\"## Name and email address\\n\\nEach commit you make has your name and email address attached to it. Git will automatically configure these based on your username and hostname, but this information is usually not a good identifier. It is a good idea to set your real name and email address so that your commits can be identified easily.\\n\\n```\\ngit config --global user.name \\\"Your Name\\\"\\ngit config --global user.email you@yourdomain.com\\n```\\n\\n## Global ignore file\\n\\nOften there are files or directories that you want Git to ignore globally. These are probably created automatically by your IDE or operating system. Git's `core.excludesfile` config allows you to write a global .gitignore so that you don't have to fill local .gitignore files with clutter.\\n\\n```\\ngit config --global core.excludesfile /path/to/.gitignore_global\\n```\\n\\n\\n\\n\",\"tags\":[\"configuration\",\"git\",\"global\"],\"categories\":[\"git\"]}","{\"title\":\"Why you should date a web developer\",\"excerpt\":\"Girls always say to me, \\\"I want a really great boyfriend, where do I find one?\\\" The answer is simple: you should date a web developer! Why, you ask? There are dozens, even hundreds of good reasons why you should date a web developer:\\n\\n1.  Web developers are good with computers\\n2.  ...\\n\\n... So what are you waiting for? Go out and grab yourself a hunky web developer!\\n\\n\",\"tags\":[],\"categories\":[\"web development\"]}","{\"title\":\"Doctrine 2: Resolving \\\"unknown database type enum requested\\\"\",\"excerpt\":\"I came across this recently while I was developing a module for PyroCMS. Some of the PyroCMS tables contain ENUM columns, which Doctrine doesn't support. You would think that this wouldn't be an issue since these tables are not mapped, but apparently when Doctrine builds the schema it includes all tables in the database - even if they are not mapped. This has been [reported as an issue](http://www.doctrine-project.org/jira/browse/DDC-1273), but the Doctrine team has given it a low priority.\\n\\nThe symptom? When using the SchemaTool to create, update, or drop the schema; an exception is thrown:\\n\\n```\\n**Fatal error**: Uncaught exception 'Doctrine\\\\DBAL\\\\DBALException' with message 'Unknown database type enum requested, Doctrine\\\\DBAL\\\\Platforms\\\\MySqlPlatform may not support it.'\\n```\\n\\nThankfully, the fix is very easy. There is even a [Doctrine Cookbook article](http://www.doctrine-project.org/docs/orm/2.1/en/cookbook/mysql-enums.html) about it. All you have to do is register the ENUM type as a Doctrine varchar (string):\\n\\n```php\\n/** @var $em \\\\Doctrine\\\\ORM\\\\EntityManager */\\n$platform = $em->getConnection()->getDatabasePlatform();\\n$platform->registerDoctrineTypeMapping('enum', 'string');\\n```\\n\\nThis fix can be applied to any unsupported data type, for example SET (which is also used in PyroCMS):\\n\\n```php\\n$platform->registerDoctrineTypeMapping('set', 'string');\\n```\\n\\n\\n\",\"tags\":[\"Doctrine\",\"enum\"],\"categories\":[\"doctrine\",\"php\"]}","{\"title\":\"Writing good code is easy\",\"excerpt\":\"Everybody wants to write \\\"good code\\\", right? So why is it that nearly every time we pick up another developer's work, our [WTF-o-meter](http://www.osnews.com/story/19266/WTFs_m) goes crazy?\\n\\n\",\"tags\":[\"best practice\",\"development\",\"good code\"],\"categories\":[\"web development\"]}","{\"title\":\"Simple Nested Sets in Doctrine 2\",\"excerpt\":\"Unlike Doctrine 1 with it's NestedSet behaviour, there is no nested set functionality in the core of Doctrine 2. There are a few extensions available that offer nested set support:\\n\\n*   [DoctrineExtensions by Gediminas Morkevicius](https://github.com/l3pp4rd/DoctrineExtensions)\\n*   [Doctrine2 Hierarchical Structural Behavior by Guilherme Blanco](https://github.com/guilhermeblanco/Doctrine2-Hierarchical-Structural-Behavior)\\n*   [Doctrine2 NestedSet by Brandon Turner](https://github.com/blt04/doctrine2-nestedset)\\n\\nI tried all of these extensions, but none of them felt simple or lightweight enough for my application. What I wanted to do was have a Category entity which could have a tree of sub-categories, e.g:\\n\\n\",\"tags\":[\"doctrine 2\",\"Nested Set\",\"RecursiveIterator\",\"RecursiveIteratorIterator\",\"SPL\"],\"categories\":[\"doctrine\",\"php\",\"web development\"]}","{\"title\":\"Converting an SVN repository to Git\",\"excerpt\":\"Today I found out just how easy it is to convert an SVN repository to Git without losing any commit history. Note that you will need [git-svn](http://schacon.github.com/git/git-svn.html) (`apt-get install git-svn` on Debian/Ubuntu).\\n\\n```\\ngit svn clone http://mysvnrepo.com/my-project my-project\\ncd my-project\\ngit remote add origin git@mygitrepo.com:/my-project.git\\ngit push origin master\\n```\\n\\nEt voilà, my-project.git has the full commit history of the my-project SVN repository.\\n\\nIf anybody knows whether SVN branches can be converted to Git branches, please get in touch!\\n\\n\\n\",\"tags\":[\"git\",\"git-svn\",\"svn\"],\"categories\":[\"git\",\"svn\"]}","{\"title\":\"Git: Ignore changes to already-tracked files\",\"excerpt\":\"There are often times when you want to modify a file but not commit the changes, for example changing the database configuration to run on your local machine.\\n\\nAdding the file to .gitignore doesn't work, because the file is already tracked. Luckily, Git will allow you to manually \\\"ignore\\\" changes to a file or directory:\\n\\n```\\ngit update-index --assume-unchanged <file>\\n```\\n\\nAnd if you want to start tracking changes again, you can undo the previous command using:\\n\\n```\\ngit update-index --no-assume-unchanged <file>\\n```\\n\\nEasy!\\n\\n\\n\",\"tags\":[],\"categories\":[\"git\"]}","{\"title\":\"MySQL: Specified key was too long; max key length is 767 bytes\",\"excerpt\":\"MySQL has a [prefix limitation](http://dev.mysql.com/doc/refman/5.1/en/create-index.html) of 767 bytes in InnoDB, and 1000 bytes in MyISAM. This has never been a problem for me, until I started using UTF-16 as the character set for one of my databases. UTF-16 can use up to 4 bytes per character which means that in an InnoDB table, you can't have any keys longer than 191 characters. Take this `CREATE` statement for example:\\n\\n```sql\\nCREATE TABLE `user` (\\n  `id` int(11) NOT NULL AUTO_INCREMENT,\\n  `username` varchar(32) NOT NULL,\\n  `password` varchar(64) NOT NULL,\\n  `email` varchar(255) NOT NULL,\\n  PRIMARY KEY (`id`),\\n  UNIQUE KEY `UNIQ_8D93D649F85E0677` (`username`),\\n  UNIQUE KEY `UNIQ_8D93D649E7927C74` (`email`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf16 AUTO_INCREMENT=1 ;\\n```\\n\\nThis will fail with an error like `Specified key was too long; max key length is 767 bytes`, because the `UNIQUE INDEX` on the email field requires at least 1020 bytes (255 * 4).\\n\\nUnfortunately there is no real solution to this. Your only options are to either reduce the size of the column, use a different character set (like UTF-8), or use a different engine (like MyISAM). In this case I switched the character set to UTF-8 which raised the maximum key length to 255 characters.\\n\\n\\n\",\"tags\":[],\"categories\":[\"mysql\"]}","{\"title\":\"Automatic MySQL Backups\",\"excerpt\":\"It's really easy to set up automatic MySQL backups using `mysqldump`. First, you need to set up a user with `SELECT` and `LOCK TABLES` privileges. In this example the user doesn't have a password.\\n\\n```sql\\nCREATE USER 'autobackup'@'localhost';\\nGRANT SELECT, LOCK TABLES ON *.* TO 'autobackup'@'localhost';\\n```\\n\\nNext create the cron job with `crontab -e`. This job is set to run every day at 5:20am.\\n\\n```\\n20 5 * * * mysqldump --user=autobackup **dbname** | gzip -c > /var/backups/**dbname**-`/bin/date +\\\\%Y\\\\%m\\\\%d`.sql.gz\\n```\\n\\nDon't forget to change **dbname** to the name of the database that you want to backup. And that's it - you're done! This cron job will create a backup of your database and save it to `/var/backups` with a filename based on the current date, e.g. `/var/backups/**dbname**-20120503.sql.gz`\\n\\n\\n\",\"tags\":[],\"categories\":[\"mysql\",\"server administration\"]}","{\"title\":\"Bcrypt: Choosing a Work Factor\",\"excerpt\":\"Bcrypt is a Blowfish-based hashing algorithm which is commonly used for password hashing because of its potentially expensive key setup phase. A Bcrypt hash has the following structure:\\n\\n```\\n$2a$(2 chars work)$(22 chars salt)(31 chars hash)\\n```\\n\\nThe reason that the key setup phase can be potentially expensive is because it is run <code>2<sup>work</sup></code> times. As password hashing is usually associated with common tasks like logging a user into a system, it's important to find the right balance between security and performance. Using a high work factor makes it incredibly difficult to execute a brute-force attack, but can put unnecessary load on the system.\\n\\nUsing [Marco Arment's PHP Bcrypt class](https://gist.github.com/1053158/), I performed some benchmarks to determine how long it takes to hash a string with various work factors:\\n\\n\",\"tags\":[\"bcrypt\",\"brute-force\",\"hashing\"],\"categories\":[\"security\",\"web development\"]}","{\"title\":\"Testing Laravel Controllers\",\"excerpt\":\"There are a two main things that tripped me up while I was writing functional tests for my Laravel controllers: POST requests, and session state.\\n\\nLaravel's Controller class has the `call()` method, which essentially makes a GET request to a controller method. In order to make POST requests, it's necessary to inject some extra parameters into the `HttpFoundation` components. To make this easier, I created a `ControllerTestCase` class with convenient `get()` and `post()` methods:\\n\\n\",\"tags\":[\"controllers\",\"functional testing\",\"laravel\",\"unit testing\"],\"categories\":[\"laravel\",\"unit testing\"]}","{\"title\":\"The man who could turn his feet into roller blades\",\"excerpt\":\"_Few people know about my ability to transform my feet into roller blades. Doctors around the world are perplexed, and also impressed. Biologists debate whether such a transformation is even possible._\\n\\nI casually slide into the biologist debating hall and take a seat near the front. People are staring at my roller-feet, but I don't care. I put my shades on.\\n\\n\",\"tags\":[],\"categories\":[\"short stories\"]}","{\"title\":\"Programming Books and Resources\",\"excerpt\":\"This post is a list of programming-related books that I intend to read at some point (in no particular order).\\n\\n * [Patterns of Enterprise Application Architecture](http://www.amazon.co.uk/Patterns-Enterprise-Application-Architecture-ebook/dp/B008OHVDFM)\\n * [Class Construction in C and C++](http://www.amazon.com/Class-Construction-Object-Oriented-Programming-Fundamentals/dp/0136301045)\\n * [The Pragmatic Programmer](http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X)\\n * [Smalltalk Best Practice Patterns](http://www.amazon.com/Smalltalk-Best-Practice-Patterns-Kent/dp/013476904X)\\n * [Eloquent Ruby](http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104)\\n * [Working Effectively with Legacy Code](http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052)\\n * [Land of Lisp](http://www.amazon.com/Land-Lisp-Learn-Program-Game/dp/1593272812)\\n * [Growing Object-Oriented Software, Guided by Tests](http://www.amazon.co.uk/Growing-Object-Oriented-Software-Guided-Signature/dp/0321503627)\\n * [Functional Programming for the Object-Oriented Programmer](https://leanpub.com/fp-oo)\\n\\nAnd some other resources that aren't books:\\n\\n * [Ruby Rogues podcasts](http://rubyrogues.com/)\\n\\n\\n\",\"tags\":[],\"categories\":[\"books\"]}","{\"title\":\"September 4: Looking back on the Christchurch earthquakes\",\"excerpt\":\"In the early hours of 4 September 2010, I was sound asleep in my house on Mount Pleasant hill in Christchurch, New Zealand. At 4:35am I was woken by a deep rumbling sound. Seconds later, the floor and walls began to shake as my house was rocked back and forth on its foundations. I scrambled out of bed and hid in a doorway until the shaking stopped. After checking that my family was okay, I went upstairs and stepped onto the balcony to look out over Christchurch. The city was silent save for a few car alarms, and it was in this relative quiet that I came to understand the significance of this event. I didn't realise it then, but that earthquake would become a catalyst for change in my life.\\n\\n\",\"tags\":[],\"categories\":[\"thoughts\"]}","{\"title\":\"Sublime Text packages for web development\",\"excerpt\":\"Coming from [PhpStorm](http://www.jetbrains.com/phpstorm/) (a full-featured IDE), I felt that Sublime Text was missing a few useful features. Luckily, one of the great things about Sublime is that it can be easily extended with [plugins](http://docs.sublimetext.info/en/latest/extensibility/plugins.html) and packages. Perhaps the most useful package for Sublime is [Sublime Package Control](http://wbond.net/sublime_packages/package_control), which allows you to easily install and manage packages (it can even uninstall itself - über meta).\\n\\nBelow are some Sublime Text packages that I have found to be useful for web development.\\n\\n\",\"tags\":[],\"categories\":[\"web development\"]}","{\"title\":\"Solving \\\"502 Bad Gateway\\\" with nginx & php-fpm\",\"excerpt\":\"After upgrading php-fpm, my PHP-based sites were returning \\\"502 Bad Gateway\\\" errors. This can happen when the php5-fpm package reconfigures itself to listen on a different socket. Here's how you can solve it.\\n\\nCheck to make sure that php-fpm is running with `ps aux | grep php` - if you can't see any php-fpm processes in the output, then you may need to re-install php-fpm. If php-fpm is running okay, then skip this first step.\\n\\n```\\nsudo apt-get remove php5 php5-cgi php5-fpm\\nsudo apt-get install php5 php5-cgi php5-fpm\\n```\\n\\nThe thing to notice here is that the order in which you install the packages is important. In the past I have found that installing them in the wrong order causes the packages to be configured incorrectly.\\n\\nNext, get php-fpm to listen on the correct host/port. In `/etc/php5/fpm/pool.d/www.conf` change the `listen` value to match the `fastcgi_pass` location in your Nginx configuration. For example, I changed mine from:\\n\\n```\\nlisten = /var/run/php5-fpm.sock\\n```\\n\\nTo:\\n\\n```\\nlisten = 127.0.0.1:9000\\n```\\n\\nIf you are configuring php-fpm to listen on a Unix socket, you should also check that the socket file has the correct owner and permissions. While I wouldn't recommend it, you can simply give read-write permissions to all with `sudo chmod go+rw /var/run/php5-fpm.sock`.\\n\\nRestart php-fpm with `sudo service php5-fpm restart` and everything should work normally again.\\n\\n\\n\",\"tags\":[\"502\",\"bad gateway\",\"nginx\",\"php\",\"php-fpm\"],\"categories\":[\"server administration\"]}","{\"title\":\"Non-tech books I should read\",\"excerpt\":\"This post is to help me keep track of non-tech books that I would like to read.\\n\\n[Breakfast of Champions by Kurt Vonnegut](http://www.amazon.com/Breakfast-Champions-Vonnegut-Series-ebook/dp/B003XRELEI)\\n\\n[Slaughterhouse-Five by Kurt Vonnegut](http://www.amazon.com/Slaughterhouse-Five-Kurt-Vonnegut/dp/0440180295)\\n\\n[Cat's Cradle by Kurt Vonnegut](http://www.amazon.com/Cats-Cradle-Novel-Kurt-Vonnegut/dp/038533348X)\\n\\n[Do Androids Dream Of Electric Sheep by Philip K Dick](http://www.amazon.co.uk/Androids-Dream-Electric-Sheep-Masterworks/dp/1857988132)\\n\\n[Neuromancer by William Gibson](http://www.amazon.co.uk/Neuromancer-William-Gibson/dp/0006480411)\\n\\n[Ham on Rye by Charles Bukowski](http://www.amazon.com/Ham-On-Rye-Charles-Bukowski/dp/0876855575)\\n\\n\",\"tags\":[],\"categories\":[\"books\"]}","{\"title\":\"Setting up your editor\",\"excerpt\":\"Setting up your editor correctly can make working with other developers much less painful. Below are some things that I believe every developer should do when editing source code. Any good IDE or editor should have settings to do these things automatically - the points below are paired with their Sublime Text setting.\\n\\n*   Trim trailing whitespace - `\\\"trim_trailing_white_space_on_save\\\": true`\\n*   Always use Unix line endings (LF) - `\\\"default_line_ending\\\": \\\"unix\\\"`\\n*   Ensure files end with a new line - `\\\"ensure_newline_at_eof_on_save\\\": true`\\n*   Automatically detect indentation style - `\\\"detect_indentation\\\": true`\\n*   Or, failing the above, have a way to quickly switch between indentation styles.\\n\\n\",\"tags\":[],\"categories\":[\"web development\"]}","{\"title\":\"Stop posting jobs for \\\"hackers\\\"\",\"excerpt\":\"I understand what people mean when they say that they want to hire a _hacker_. It means that they want to hire a developer; probably one who is enthusiastic and good at solving problems. The thing is, to me, the term _hacker_ is no different from terms like _rock star_ or _ninja_. When I see these terms in a job advertisement, a few red flags are raised in my mind:\\n\\n\",\"tags\":[\"hacker\",\"recruitment\",\"rock star\"],\"categories\":[\"thoughts\"]}","{\"title\":\"Increasing the size of the LISH console\",\"excerpt\":\"If you've used Linode's LISH console to get remote access to your server, you're probably familiar with the way the console wraps everything to 60x20 (columns x rows) - even when you're connected via ssh in a much larger terminal.\\n\\n\",\"tags\":[\"linode\",\"lish\",\"ssh\",\"stty\"],\"categories\":[\"server administration\"]}","{\"title\":\"Blazing fast WordPress with Nginx and Memcached\",\"excerpt\":\"Inspired by Eric Mann's post on [caching WordPress with Redis](http://eamann.com/tech/ludicrous-speed-wordpress-caching-with-redis/), I thought I'd experiment with a similar setup using Memcached. Any in-memory caching system should work just as well, but I've chosen Memcached because it's already running on my server and because PHP already has a [built-in libmemcached API](http://www.php.net/manual/en/class.memcached.php).\\n\\nMy current setup is Nginx and PHP-FPM, with WP Super Cache. The cache is saved to the filesystem, allowing Nginx to serve static files (which it is [very good at](http://nbonvin.wordpress.com/2011/03/14/apache-vs-nginx-vs-varnish-vs-gwan/)) without needing to pass any requests to PHP. This setup has worked very well, so I'll be using it as a baseline.\\n\\nTo use Memcached, every request needs to be passed to PHP. My gut feeling was that this would be slower than serving static files with Nginx due to the overhead of spinning up a PHP process for each request.\\n\\n## Benchmarks\\n\\nTo find out which of the two setups was faster, I measured the following metrics using [WebPagetest](http://www.webpagetest.org/) and [Blitz](http://www.blitz.io/bhm0Fw2xDFNoGcFXNKJaQSu) <small>(referral link)</small>:\\n\\n*   Time To First Byte (although CloudFlare has speculated that [TTFB is a meaningless metric](http://blog.cloudflare.com/ttfb-time-to-first-byte-considered-meaningles))\\n*   Average response time\\n*   Average hit rate\\n\\n\\n\\n\",\"tags\":[\"memcached\",\"nginx\",\"php-fpm\",\"wordpress\"],\"categories\":[\"server administration\",\"web development\"]}","{\"title\":\"When did dependency management get so complicated?\",\"excerpt\":\"This evening I wanted to start hacking on a [project of mine](https://github.com/wildlyinaccurate/wildly-minimalistic-wordpress-theme), which is a simple WordPress theme. My main development machine was being used by somebody else, so I decided to boot up my old Sony Vaio running Ubuntu. _It'll be simple_, I thought. _I've just got to clone the repo, run `npm install`, `bower install`, and `grunt build`, and I'll be good to go_. I was wrong.\\n\\nFirst, the version of npm installed on the laptop is apparently so out-of-date that it can't run the install. So I let it update itself (and all the other packages I have installed - why not?) with `sudo npm -g update`. Being a Sunday night, my broadband connection is running spectacularly slow, so the update process takes about 10 minutes at 40kB/s. But hey, at least now I can run `npm install`, right?\\n\\nNope. Now npm is throwing some errors with unhelpful messages, but that's fine, I'll just trawl through the error log. 5 minutes later, I figure out that ~/tmp belongs to root (probably from running `npm update` as root). Ok, fine, I'll change the permissions and try again. This time `npm install` works! But of course, my connection is so horribly slow and grunt has so many dependencies that the install process takes **over 15 minutes**.\\n\\n\",\"tags\":[\"bower\",\"environment\",\"npm\",\"vagrant\"],\"categories\":[\"thoughts\"]}","{\"title\":\"Worst fonts for programming\",\"excerpt\":\"There are [plenty](http://www.slant.co/topics/67/~what-are-the-best-programming-fonts) [of](http://hivelogic.com/articles/top-10-programming-fonts) [discussions](https://news.ycombinator.com/item?id=1058946) about which font is the best for programming. The problem is, there are so many \\\"best\\\" fonts that it's difficult to choose one. Rather than have an exhaustive list of \\\"best\\\" fonts for programming, wouldn't it be easier to simply know which fonts to avoid?\\n\\n\",\"tags\":[\"fonts\",\"programming\"],\"categories\":[\"programming\"]}","{\"title\":\"Using SSH agent forwarding with Vagrant\",\"excerpt\":\"Sometimes you'll want to use your local SSH keys on your Vagrant boxes, so that you don't have to manage password-less keys for each box. This can be done with SSH agent forwarding, which is [explained in great detail on Unixwiz.net](http://www.unixwiz.net/techtips/ssh-agent-forwarding.html).\\n\\nSetting this up is fairly straightforward. On the host machine, you need to add the following to `~/.ssh/config` (which you should create if it doesn't exist):\\n\\n```\\nhost your.domain.com\\n    ForwardAgent yes\\n```\\n\\nYou need to replace `your.domain.com` with either the domain or the IP address of your Vagrant box. You can wildcard this with `host *`, but this is a _really_ bad idea because it lets every server you SSH to access your keys.\\n\\nOnce you've done that, just run `ssh-add` to ensure you ensure your identities are added to the SSH agent.\\n\\nNow, add the following to the config block in your Vagrantfile:\\n\\n```ruby\\nconfig.ssh.forward_agent = true\\n```\\n\\nThat's all it takes. You can make sure it worked by comparing the output of `ssh-add -L` on both the host machine and the guest box.\\n\\n\\n\",\"tags\":[\"ssh\",\"vagrant\"],\"categories\":[\"server administration\",\"vagrant\"]}","{\"title\":\"Installing PHP on Debian without Apache\",\"excerpt\":\"When you `apt-get install php5` on a Debian/Ubuntu server, you'll notice that APT will automatically install a bunch of `apache2` packages as well. This can be pretty annoying if you're planning on using another web server (or no web server at all).\\n\\nIf you take a look at the package dependencies ([Debian](http://packages.debian.org/wheezy/php5)/[Ubuntu](http://packages.ubuntu.com/quantal/php5)) you'll see why this happens - `php5` needs one of either `libapache2-mod-php5`, `libapache2-mod-php5filter`, `php5-cgi`, or `php5-fpm`. APT doesn't care which package it installs; it just picks the first package that satisfies the dependency, which is why you get the `apache2` packages.\\n\\nYou can get around this by installing one of the other dependencies _before_ `php5`. For example, `apt-get install php5-fpm php5` or `apt-get install php5-cgi php5`.\\n\\n\",\"tags\":[\"apache\",\"debian\",\"php\",\"ubuntu\"],\"categories\":[\"server administration\"]}","{\"title\":\"Don't use Git's autocorrect feature\",\"excerpt\":\"Quite often I've accidentally typed \\\"git\\\" twice. Usually this is fine, and Git just does something like this:\\n\\n```\\n$ git git diff\\ngit: 'git' is not a git command. See 'git --help'.\\n\\nDid you mean this?\\n    init\\n```\\n\\nBut I recently turned on Git's autocorrect feature, to see what it was like (`git config --global help.autocorrect 1`). The results were... _interesting_:\\n\\n```\\n$ git git diff\\nWARNING: You called a Git command named 'git', which does not exist.\\nContinuing under the assumption that you meant 'init' in **0.1 seconds** automatically...\\nfatal: internal error: work tree has already been set\\nCurrent worktree: /nfs/personaldev/vagrant/mobileweb-v2\\nNew worktree: /nfs/personaldev/vagrant/mobileweb-v2/diff\\n```\\n\\nThis is really bizarre behaviour. The fact that it wants to autocorrect it to `git init` is _sort-of_ okay. But rather than giving me the option to confirm that this is what I want, Git gives me a whole **0.1 seconds** to hit Ctrl+C before it automatically runs the command for me.\\n\\nThankfully, `git init` isn't a very destructive command. I was lucky that the only side effect of this was that Git created a new directory called `diff`. I can't help but wonder what would've happened if Git decided to autocorrect to a more destructive command like `reset`, `checkout`, or `gc`.\\n\\nThe lesson here? Don't use Git's autocorrect. It really sucks.\\n\\nUpdate: m_bright pointed out that the value of `help.autocorrect` is actually how many tenths of a second Git will wait before automatically executing the command. So something like `git config --global help.autocorrect 10` would give you 1 second before the command is executed, which is probably slow enough to let you cancel any mistakes, and quick enough to still be useful.\\n\\n\\n\",\"tags\":[\"autocorrect\",\"git\"],\"categories\":[\"git\"]}","{\"title\":\"Dishonest comments\",\"excerpt\":\"One of my favourite Ruby Rogues episodes ([_What Makes Beautiful Code_](http://rubyrogues.com/what-makes-beautiful-code/)) has a short section where the Rogues talk about the concept of _dishonest code_. David Brady wrote a [really good piece](http://chalain.livejournal.com/39332.html) on this, which I highly recommend reading.\\n\\nWhat I want to talk about is a more specific variant of dishonest code: dishonest comments.\\n\\nTake this code, for example:\\n\\n```js\\n$('a').click(function(e) {\\n    e.stopPropagation();\\n    e.preventDefault();\\n});\\n```\\n\\nIf you're not familiar with JavaScript events, `e.stopPropagation()` will stop this event from bubbling up to other event handlers. Now, what if somebody decides that the event _should_ bubble up? They might do something like this:\\n\\n```diff\\n--- a/example.js\\n+++ b/example.js\\n@@ -1,4 +1,4 @@\\n $('a').click(function(e) {\\n+    // Let the event bubble up to the next handler\\n-    e.stopPropagation();\\n     e.preventDefault();\\n });\\n```\\n\\nThis is pretty common practice; a developer will leave a comment so that the next person understands why the `e.stopPropagation()` is gone.\\n\\n\",\"tags\":[\"comments\"],\"categories\":[\"thoughts\"]}","{\"title\":\"Force Bower to clone from https:// instead of git://\",\"excerpt\":\"Most Bower packages will be fetched using a git:// URL, which connects on port 9418. This can be problematic if you're behind a firewall which blocks this port.\\n\\nYou can get around this quite easily by telling Git to always use https:// instead of git://:\\n\\n```\\ngit config --global url.https://.insteadOf git://\\n```\\n\\n\\n\",\"tags\":[\"bower\",\"git\",\"https\"],\"categories\":[\"git\"]}","{\"title\":\"Getting Internet Sharing to work on OSX 10.8\",\"excerpt\":\"I noticed that the Internet Sharing functionality didn't work on my Macbook Air (running OSX 10.8 - Mountain Lion). This is because the Air's DNS server (BIND) isn't configured correctly.\\n\\nFor me, the fix was pretty simple. Edit `/etc/com.apple.named.proxy.conf` by running `sudo nano /etc/com.apple.named.proxy.conf` in a terminal, and change\\n\\n```\\nforward first;\\n```\\n\\nto\\n\\n```\\nforward only;\\n```\\n\\nThen turn Internet Sharing off and on again.\\n\\nThe annoying thing is that OSX seems to restore the BIND config the next time you turn Internet Sharing off, so you need to remember to change it each time.\\n\\n\\n\",\"tags\":[\"BIND\",\"DNS\",\"Internet Sharing\",\"OSX\"],\"categories\":[\"osx\"]}","{\"title\":\"Converting Bootswatch themes to SASS/SCSS\",\"excerpt\":\"There's a fairly quick way to convert Bootswatch themes to Sass (which you might want to do if you use something like [sass-bootstrap](https://github.com/jlong/sass-bootstrap)).\\n\\nSimply download the theme's variables.less and run the following find/replace patterns against it:\\n\\n### Variables\\n\\nFind (regex): `@([a-zA-Z0-9_-]+)`\\n\\nReplace: `\\\\$$1`\\n\\n### Mixins\\n\\nFind: `spin(`\\n\\nReplace: `adjust-hue(`\\n\\nThis is all I've found in the themes that I've tried.\\n\\n\",\"tags\":[\"bootstrap\",\"bootswatch\",\"scss\"],\"categories\":[\"web development\"]}","{\"title\":\"HTTP status as a service\",\"excerpt\":\"Using Node.js* you can run a simple \\\"HTTP status as a service\\\" server. This can be useful for quickly checking whether your application handles various status codes.\\n\\n```js\\nvar http = require('http');\\n\\nhttp.createServer(function (request, response) {\\n  var status = request.url.substr(1);\\n\\n  if ( ! http.STATUS_CODES[status]) {\\n    status = '404';\\n  }\\n\\n  response.writeHead(status, { 'Content-Type': 'text/plain' });\\n  response.end(http.STATUS_CODES[status]);\\n}).listen(process.env.PORT || 5000);\\n```\\n\\nThis will create a server on port 5000, or any port that you specify in the `PORT` environment variable. It will respond to `/{CODE}` and return the HTTP status that corresponds to `{CODE}`. Here's a couple of examples:\\n\\n```\\n$ curl -i http://127.0.0.1:5000/500\\nHTTP/1.1 500 Internal Server Error\\nContent-Type: text/plain\\nDate: Mon, 30 Sep 2013 14:10:10 GMT\\nConnection: keep-alive\\nTransfer-Encoding: chunked\\n\\nInternal Server Error%\\n```\\n```\\n$ curl -i http://127.0.0.1:5000/404\\nHTTP/1.1 404 Not Found\\nContent-Type: text/plain\\nDate: Mon, 30 Sep 2013 14:10:32 GMT\\nConnection: keep-alive\\nTransfer-Encoding: chunked\\n\\nNot Found%\\n```\\n\\nThis is a really simple example, and could easily be extended to let you specify a `Location` header value for 30X responses.\\n\\n<small>*Well, you could use anything really. I'm just using Node.js since JavaScript is my language of choice.</small>\\n\\n\\n\",\"tags\":[\"http status code\",\"node.js\",\"service\"],\"categories\":[\"javascript\",\"web development\"]}","{\"title\":\"Defining readable code\",\"excerpt\":\"Code readability is something that I often bring up during code reviews, but I often have trouble explaining _why_ I find a piece of code to be easy or difficult to read.\\n\\nWhen you ask programmers how to make code easier to read, many of them will mention things like coding standards, descriptive naming, and decomposition. These things actually aid in making code easier to _comprehend_ rather than easier to _read_. For me, _readability_ is at a lower level, somewhere between legibility and comprehension.\\n\\n&nbsp;\\n\\n{% responsive_image path: assets/legibility-readability-comprehension.png alt: \\\"Legibility - Readability - Comprehension\\\" %}\\n\\nAt the lowest level is legibility. This is how easily individual characters can be distinguished from each other, and can usually be boiled down to the choice of font, as well as the foreground &amp; background colours.\\n\\nAt the highest level is comprehension, which is the ease in which a block of code can be fully understood. Decomposition, naming conventions and comments are just a few of the many ways to improve comprehension.\\n\\nReadability sits between these two. This level is a little harder to define, but I believe it comes down to two main factors: **structure** and **line density**.\\n\\n\",\"tags\":[\"readability\"],\"categories\":[\"programming\",\"thoughts\"]}","{\"title\":\"Understanding JavaScript: Inheritance and the prototype chain\",\"excerpt\":\"_This is the first post in a series on JavaScript. In this post I'm going to explain how JavaScript's prototype chain works, and how you can use it to achieve inheritance._\\n\\nFirst, it's important to understand that while JavaScript is an object-oriented language, it is prototype-based and does not implement a traditional class system. Keep in mind that when I mention a _class_ in this post, I am simply referring to JavaScript objects and the prototype chain – more on this in a bit.\\n\\nAlmost everything in JavaScript is an object, which you can think of as sort of like associative arrays - objects contain named properties which can be accessed with `obj.propName` or `obj['propName']`. Each object has an internal property called _prototype_, which links to another object. The prototype object has a prototype object of its own, and so on – this is referred to as the _prototype chain_. If you follow an object's prototype chain, you will eventually reach the core `Object` prototype whose prototype is `null`, signalling the end of the chain.\\n\\nSo what is the prototype chain used for? When you request a property which the object does not contain, JavaScript will look down the prototype chain until it either finds the requested property, or until it reaches the end of the chain. This behaviour is what allows us to create \\\"classes\\\", and implement inheritance.\\n\\n\",\"tags\":[\"classes\",\"inheritance\",\"javascript\",\"prototype\"],\"categories\":[\"javascript\"]}","{\"title\":\"A Hacker's Guide to Git\",\"excerpt\":\"_A Hacker's Guide to Git_ is now available as an e-book. You can purchase it [on LeanPub](https://leanpub.com/a-hackers-guide-to-git).\\n\\n* Placeholder list item\\n{:toc}\\n\\n## Introduction\\n\\nGit is currently the most widely used version control system in the world, mostly thanks to GitHub. By that measure, I'd argue that it's also the most misunderstood version control system in the world.\\n\\nThis statement probably doesn't ring true straight away because on the surface, Git is pretty simple. It's really easy to pick up if you've come from another VCS like Subversion or Mercurial. It's even relatively easy to pick up if you've never used a VCS before. Everybody understands adding, committing, pushing and pulling; but this is about as far as Git's simplicity goes. Past this point, Git is shrouded by fear, uncertainty and doubt.\\n\\n\",\"tags\":[\"git\",\"merge\",\"rebase\"],\"categories\":[\"git\"]}","{\"title\":\"JavaScript Performance: Variable Initialization\",\"excerpt\":\"Initializing variables properly in JavaScript can have significant performance benefits. This can be shown with a simple synthetic benchmark.\\n\\n### notype.js\\n\\n```js\\nvar x = null;\\n\\nfor (var i = 0; i < 1e8; i++) {\\n    x = 1 + x;\\n}\\n```\\n\\n### withtype.js\\n\\n```js\\nvar x = 0;\\n\\nfor (var i = 0; i < 1e8; i++) {\\n    x = 1 + x;\\n}\\n```\\n\\n\\n\",\"tags\":[\"javascript\",\"performance\",\"v8\"],\"categories\":[\"javascript\"]}","{\"title\":\"Transitioning to a new keyboard layout\",\"excerpt\":\"I've long been considering switching to a different keyboard layout. I tend to type with mostly my forefinger and middle finger, only using my ring and pinky fingers occasionally to stretch out to the modifier keys. Despite this, I still manage to type at around 120WPM on a staggered QWERTY keyboard.\\n\\nThinking back, I probably started teaching myself to type at a reasonable speed around age 10. I'm now in my mid-twenties. My typing technique (or lack thereof) never really bothered me, but 15 years of typing with poor technique has started to take its toll. Recently I've started experiencing hand fatigue, and I'm beginning to see early signs of RSI. So I figure now is the perfect time to make some changes to the way I type.\\n\\n\",\"tags\":[\"colemak\",\"ergodox\",\"keyboard\"],\"categories\":[\"keyboards\"]}"]